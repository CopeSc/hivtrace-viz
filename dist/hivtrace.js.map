{"version":3,"sources":["webpack:///./src/entry.js","webpack:///./~/font-awesome/css/font-awesome.css","webpack:///./src/hivtrace.css","webpack:///./~/hyphy-vision/dist/hyphyvision.js","webpack:///./src/hivtrace.js","webpack:///./~/bootstrap/dist/css/bootstrap.css","webpack:///./src/clusternetwork.js","webpack:///./src/misc.js","webpack:///./src/histogram.js","webpack:///./src/scatterplot.js","webpack:///./src/helpers.js"],"names":[],"mappings":"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;AAEA;AACA;AACA,mBAAkB,2BAA2B;AAC7C;AACA;AACA,uBAAsB,2CAA2C;AACjE;AACA;AACA,2BAA0B,mBAAmB;AAC7C;AACA;AACA,+BAA8B,4CAA4C;AAC1E,+DAA8D,0HAA0H;AACxL;AACA;AACA;AACA;AACA,2BAA0B,gCAAgC;AAC1D;AACA;AACA,+BAA8B,+EAA+E;AAC7G;AACA;AACA,mCAAkC,mCAAmC;AACrE;AACA;AACA,uCAAsC,6BAA6B;AACnE;AACA;AACA,2CAA0C,2BAA2B;AACrE,oEAAmE,kCAAkC;AACrG;AACA;AACA;AACA;AACA;AACA,uCAAsC,0BAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD;AAClD,+CAA8C;AAC9C;AACA;AACA;AACA,mDAAkD;AAClD;AACA,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,6EAA6E;AAC3G;AACA;AACA,mCAAkC,mCAAmC;AACrE;AACA;AACA,uCAAsC,6BAA6B;AACnE;AACA;AACA,2CAA0C,2BAA2B;AACrE,oEAAmE,2BAA2B;AAC9F;AACA;AACA;AACA;AACA;AACA,uCAAsC,0BAA0B;AAChE;AACA;AACA;AACA,qFAAoF,yCAAyC;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,yEAAyE;AACvG;AACA;AACA,mCAAkC,mCAAmC;AACrE;AACA;AACA,uCAAsC,6BAA6B;AACnE;AACA;AACA,2CAA0C,2BAA2B;AACrE,oEAAmE,6BAA6B;AAChG;AACA;AACA;AACA;AACA;AACA,uCAAsC,0BAA0B;AAChE;AACA;AACA;AACA,sFAAqF,sEAAsE;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,gDAAgD;AACtE;AACA;AACA,2BAA0B,mBAAmB;AAC7C;AACA;AACA,+BAA8B,4CAA4C;AAC1E;AACA;AACA;AACA;AACA,mCAAkC;AAClC;AACA,mCAAkC;AAClC;AACA;AACA;AACA;AACA,+BAA8B;AAC9B;AACA;AACA;AACA,8CAA6C,wCAAwC;AACrF;AACA;AACA;AACA;;AAEA,GAAE;;AAEF;AACA;AACA;AACA,iDAAgD,WAAW;AAC3D;AACA,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,+CAA8C;;AAE9C,sGAAqG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE3Q;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gDAA+C;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA,mFAAkF,kBAAkB;AACpG;AACA;;AAEA,uGAAsG;AACtG;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mEAAkE;AAClE,8CAA6C;AAC7C,uBAAsB;AACtB,mBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAU;;AAEV;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA0B,mBAAmB;AAC7C;AACA;AACA;;AAEA,mCAAkC;;AAElC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA,GAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA,kBAAiB;AACjB,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAsB,SAAS;AAC/B;AACA,0EAAyE,yCAAyC;AAClH,uBAAsB;AACtB;AACA,eAAc;AACd;AACA;AACA,uBAAsB,SAAS;AAC/B,+DAA8D,+CAA+C;AAC7G;AACA;AACA;;AAEA,sDAAqD,SAAS;AAC9D,8DAA6D,6GAA6G;AAC1K,WAAU;;AAEV,+CAA8C,gCAAgC;AAC9E;AACA,GAAE;;AAEF;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA4B,uCAAuC;AACnE;AACA,iCAAgC,gDAAgD,QAAQ,gDAAgD;AACxI,eAAc;AACd,WAAU;AACV;AACA,OAAM;;AAEN;AACA,uDAAsD,uGAAuG;AAC7J;;AAEA,GAAE;;AAEF;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;AACA,WAAU;AACV;AACA;;AAEA;AACA,gCAA+B;AAC/B,WAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAc;;AAEd;AACA;AACA;AACA,mBAAkB;AAClB,eAAc;AACd;AACA;AACA,eAAc,MAAM;;;AAGpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA,eAAc;AACd;AACA,4CAA2C;AAC3C,kCAAiC,sBAAsB;;AAEvD;AACA,oDAAmD,mCAAmC;AACtF;AACA;AACA,oDAAmD,kCAAkC;AACrF;;AAEA;AACA;AACA;AACA,eAAc;AACd,WAAU;AACV,OAAM;;AAEN;AACA;AACA,+BAA8B,mBAAmB,wDAAwD,EAAE,WAAW,yBAAyB,KAAK;AACpJ,WAAU;AACV,sBAAqB,mBAAmB,qDAAqD;AAC7F,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA,eAAc,gCAAgC;AAC9C,oDAAmD,2DAA2D;AAC9G;AACA;AACA,GAAE;;AAEF;AACA;;;AAGA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA,2EAA0E;AAC1E;AACA;AACA;;AAEA;;AAEA,4BAA2B,oBAAoB;AAC/C,sBAAqB,6CAA6C;AAClE,gDAA+C;AAC/C,yBAAwB;AACxB,mCAAkC;AAClC,oBAAmB;AACnB,sBAAqB;AACrB;AACA,uBAAsB,WAAW;AACjC;AACA;AACA,2EAA0E;AAC1E,gDAA+C;AAC/C,iCAAgC;AAChC;AACA;AACA,+EAA8E,sBAAsB;AACpG,eAAc;AACd,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA,mBAAkB;AAClB;;AAEA,8BAA6B,qBAAqB,4BAA4B,EAAE;;AAEhF;;AAEA;;AAEA;AACA,oCAAmC,+CAA+C;AAClF,mBAAkB;AAClB;AACA;AACA,eAAc;;AAEd;AACA,WAAU;;AAEV,kBAAiB;AACjB;AACA,eAAc;AACd;AACA,eAAc;AACd;AACA;AACA,eAAc;AACd,OAAM;;AAEN;AACA;AACA;AACA;AACA,WAAU;AACV;AACA,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,eAAc,gCAAgC;AAC9C,oDAAmD,2DAA2D;AAC9G;AACA;AACA,GAAE;;AAEF;AACA;;;AAGA;;AAEA;AACA;AACA,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA,4BAA2B;AAC3B,eAAc;AACd;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA,uDAAsD,2DAA2D;AACjH;AACA,GAAE;AACF,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,+CAA8C;;AAE9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;AACA;AACA;AACA,yBAAwB,uBAAuB;AAC/C,OAAM;;AAEN;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAU;;AAEV;AACA,OAAM;;AAEN;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,gCAA+B,mDAAmD,sBAAsB,EAAE;AAC1G;AACA;AACA;AACA;AACA,eAAc;AACd;AACA,WAAU;;AAEV;AACA,gCAA+B,kCAAkC;AACjE,eAAc;AACd;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4CAA2C,gDAAgD;AAC3F,4CAA2C,2HAA2H;AACtK,4CAA2C,+HAA+H;AAC1K,4CAA2C,4HAA4H;;AAEvK,+CAA8C;AAC9C;AACA;AACA;AACA,+CAA8C,EAAE;AAChD,2BAA0B;AAC1B,4CAA2C,gDAAgD;AAC3F;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,eAAc;;AAEd;AACA;;AAEA;AACA,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA,eAAc,gCAAgC;AAC9C;AACA;AACA,mBAAkB,mDAAmD;AACrE;AACA;AACA,uBAAsB,0BAA0B;AAChD;AACA;AACA,2BAA0B,yBAAyB;AACnD;AACA;AACA,+BAA8B,oJAAoJ;AAClL;AACA,2DAA0D,qBAAqB;AAC/E;AACA;AACA;AACA,+BAA8B,6BAA6B;AAC3D;AACA;AACA,mCAAkC,kBAAkB;AACpD;AACA;AACA,uCAAsC,wBAAwB;AAC9D,oEAAmE,kMAAkM;AACrQ;AACA;AACA;AACA;AACA;AACA,mCAAkC,mBAAmB;AACrD;AACA;AACA,uCAAsC,wBAAwB;AAC9D,oEAAmE,mIAAmI;AACtM;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,2BAA2B;AACrD;AACA;AACA,+BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA;AACA,+BAA8B,4GAA4G;AAC1I;AACA;AACA;AACA,uCAAsC,2BAA2B;AACjE;AACA;AACA,+BAA8B;AAC9B;AACA;AACA;AACA;AACA,oDAAmD,oGAAoG;AACvJ;;AAEA;AACA;AACA,GAAE;AACF,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,+CAA8C;;AAE9C;AACA;;AAEA;AACA;;;AAGA;;AAEA,oBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAQ;AACR,OAAM;;AAEN;AACA;AACA;AACA,SAAQ;AACR,OAAM;;AAEN;AACA,KAAI;;AAEJ;AACA;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA,KAAI;;AAEJ;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA,SAAQ,mCAAmC;AAC3C;AACA;AACA,WAAU,6BAA6B;AACvC;AACA;AACA,aAAY,2BAA2B;AACvC;AACA;AACA,eAAc,+CAA+C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU,0BAA0B;AACpC;AACA;AACA,aAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA,eAAc,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA,eAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY,SAAS,sBAAsB,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,6CAA6C,0CAA0C,EAAE;AACzG;AACA;AACA,mBAAkB,4KAA4K;AAC9L,+CAA8C,qBAAqB;AACnE;AACA;AACA;AACA,mBAAkB,oEAAoE;AACtF;AACA;AACA;AACA;AACA;AACA,uBAAsB,YAAY;AAClC,oDAAmD,4GAA4G;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA,wCAAuC,wCAAwC;AAC/E;AACA;AACA;AACA,iBAAgB,wEAAwE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,+CAA8C;;AAE9C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR,OAAM;AACN,KAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,uDAAsD;AACtD;;AAEA,oCAAmC;;AAEnC;AACA;AACA;;AAEA,8BAA6B;AAC7B,WAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;;AAEA;AACA;AACA,WAAU;AACV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;;AAEA;AACA,mCAAkC;;AAElC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA,WAAU;AACV;AACA;;AAEA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAQ;AACR;AACA;;AAEA,sBAAqB;AACrB;AACA,WAAU;AACV;AACA;AACA;AACA,OAAM;;AAEN;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA,SAAQ,2BAA2B;AACnC;AACA;AACA,WAAU,kDAAkD;AAC5D;AACA;AACA,aAAY,mBAAmB;AAC/B;AACA;AACA,eAAc,4CAA4C;AAC1D,iEAAgE;AAChE,uCAAsC;AACtC;AACA;AACA;AACA;AACA,aAAY,mBAAmB;AAC/B;AACA;AACA,eAAc,kDAAkD;AAChE,8DAA6D,wBAAwB;AACrF;AACA;AACA;AACA,eAAc,gDAAgD;AAC9D,0DAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA,WAAU,wCAAwC;AAClD,2CAA0C;AAC1C,2CAA0C;AAC1C;AACA;AACA;AACA,WAAU,yCAAyC;AACnD,0DAAyD;AACzD;AACA,iDAAgD;AAChD;AACA;AACA;;AAEA,GAAE;;AAEF;AACA;AACA;AACA,6CAA4C,WAAW;AACvD;;AAEA;AACA,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,+CAA8C;;AAE9C;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA,uCAAsC;AACtC,OAAM;AACN;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;AACA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;AACA;AACA,KAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA,SAAQ,0BAA0B;AAClC;AACA;AACA,WAAU,oDAAoD;AAC9D;AACA;AACA,aAAY,uCAAuC;AACnD,sCAAqC,0BAA0B;AAC/D;AACA;AACA,eAAc,4BAA4B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAY,yCAAyC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,iCAAiC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,4FAA4F;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAE;;AAEF;AACA;AACA;AACA,oDAAmD,yCAAyC;AAC5F;;AAEA;AACA;AACA,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,kDAAiD;;AAEjD;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA,KAAI;;AAEJ;AACA;AACA,KAAI;;AAEJ;AACA;AACA,KAAI;;AAEJ;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA,OAAM;AACN;AACA;AACA,SAAQ;AACR;AACA,KAAI;;AAEJ;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAQ;;AAER,uBAAsB,wBAAwB;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,yBAAwB,0BAA0B;;AAElD;AACA;AACA;AACA,aAAY;;AAEZ;;AAEA,sDAAqD,8BAA8B;AACnF;AACA;;AAEA;AACA;AACA,SAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC;AACtC,uCAAsC;AACtC,uCAAsC;;AAEtC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;AACA;AACA,SAAQ,yBAAyB;AACjC;AACA;AACA,WAAU,0BAA0B;AACpC;AACA;AACA,aAAY,+BAA+B;AAC3C;AACA;AACA,eAAc,uCAAuC;AACrD,wCAAuC,8DAA8D;AACrG;AACA;AACA;AACA;AACA,eAAc,qGAAqG,GAAG;AACtH,4CAA2C,8BAA8B;AACzE,4CAA2C,4BAA4B;AACvE;AACA;AACA;AACA;AACA;;AAEA,GAAE;;AAEF;AACA;AACA;AACA,iDAAgD,aAAa;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,+CAA8C;;AAE9C;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA,KAAI;;AAEJ;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;AACA;AACA,SAAQ,0BAA0B;AAClC;AACA;AACA,WAAU,+BAA+B;AACzC;AACA;AACA,aAAY,uCAAuC;AACnD,sCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA;AACA,aAAY,sEAAsE;AAClF,0CAAyC,4BAA4B;AACrE,0CAAyC,2BAA2B;AACpE;AACA;AACA;AACA;;AAEA,GAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,mDAAkD,aAAa;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,kDAAiD;;AAEjD;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA,WAAU;;AAEV;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,eAAc;;AAEd;AACA;AACA,eAAc;AACd;AACA,eAAc;AACd;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,OAAM;;AAEN;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,eAAc;;AAEd;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;AACA,WAAU;;AAEV;;AAEA;AACA,WAAU;;AAEV;AACA;AACA,WAAU;;AAEV;AACA;AACA,WAAU;;AAEV;AACA;AACA,WAAU;;AAEV;AACA,2DAA0D;AAC1D;AACA,+DAA8D;AAC9D;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA,eAAc;;AAEd;AACA,WAAU;;AAEV;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA,WAAU;;AAEV;;AAEA;AACA;AACA;AACA,WAAU;;AAEV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAU;;AAEV;AACA,OAAM;;AAEN;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;;AAEA;;AAEA;;AAEA;AACA;AACA,WAAU;AACV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAc;;AAEd;;AAEA;AACA;AACA,eAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA,eAAc;;AAEd;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAkB;AAClB;AACA;AACA,eAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;AACA;AACA,WAAU;AACV,OAAM;;AA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;AAEA;AACA;AACA,WAAU;;AAEV;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,mDAAmD,EAAE;;AAEtG;AACA,OAAM;;AAEN;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA,WAAU;AACV,OAAM;AACN;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,WAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;AACA;;AAEA;AACA;AACA,eAAc,8DAA8D;AAC5E;AACA;AACA,mBAAkB,6BAA6B;AAC/C;AACA;AACA,uBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,yBAAyB;AAC/C;AACA;AACA,2BAA0B,4EAA4E;AACtG,uDAAsD,+CAA+C;AACrG;AACA;AACA;AACA;AACA,2BAA0B,4EAA4E;AACtG,uDAAsD,+CAA+C;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB,0BAA0B;AAC5C,8CAA6C,kBAAkB;AAC/D;AACA;AACA;AACA,GAAE;;AAEF;AACA,0DAAyD,uDAAuD;AAChH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA;;AAEA;;;AAGA,QAAO;;AAEP;AACA;;AAEA,+CAA8C;;AAE9C;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;;AAEA;;AAEA,oCAAmC;AACnC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,iBAAgB,wBAAwB;;AAExC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAwB,OAAO;AAC/B;AACA;AACA,WAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA,OAAM;AACN;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA,OAAM;AACN,kBAAiB;AACjB,OAAM;;AAEN;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,OAAM;AACN,kBAAiB;AACjB,OAAM;;AAEN;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA,OAAM;;AAEN,uEAAsE;AACtE;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA,WAAU;AACV;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA;;AAEA,QAAO;;AAEP;AACA;;AAEA;;AAEA,QAAO;;AAEP;AACA;;AAEA,kDAAiD;;AAEjD;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA4B;AAC5B;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR,OAAM;AACN,KAAI;;AAEJ;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAoB,0BAA0B;AAC9C,kBAAiB,mDAAmD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;;AAEA;AACA,mCAAkC;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAkC;AAClC;AACA,iBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,gBAAe;AACf,OAAM;;AAEN;AACA,KAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,uBAAsB;AACtB;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA;AACA,SAAQ,2BAA2B;AACnC;AACA;AACA,WAAU,kDAAkD;AAC5D;AACA;AACA,aAAY,iDAAiD;AAC7D;AACA;AACA,eAAc,yBAAyB;AACvC;AACA;AACA,iBAAgB,0BAA0B;AAC1C;AACA;AACA,mBAAkB,oDAAoD;AACtE;AACA;AACA,qBAAoB,uCAAuC;AAC3D,8CAA6C,2DAA2D;AACxG;AACA;AACA,uBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,iDAAiD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY,mBAAmB;AAC/B;AACA;AACA,eAAc,iDAAiD;AAC/D,0DAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA,aAAY,oGAAoG;AAChH,yCAAwC,+CAA+C;AACvF;AACA;AACA;AACA;AACA,aAAY,oGAAoG;AAChH,yCAAwC,+CAA+C;AACvF;AACA;AACA;AACA;AACA,aAAY,2CAA2C;AACvD;AACA;AACA,eAAc,wCAAwC;AACtD;AACA;AACA;AACA;AACA;AACA,0CAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA,aAAY,8BAA8B;AAC1C;AACA;AACA,eAAc,yBAAyB;AACvC;AACA;AACA,iBAAgB,sBAAsB;AACtC;AACA;AACA,mBAAkB,0BAA0B;AAC5C;AACA;AACA,qBAAoB,oCAAoC;AACxD;AACA;AACA,gDAA+C,0HAA0H;AACzK;AACA;AACA;AACA,mBAAkB,0BAA0B;AAC5C;AACA;AACA,qBAAoB,uCAAuC;AAC3D;AACA;AACA,gDAA+C,sHAAsH;AACrK;AACA;AACA;AACA;AACA,iBAAgB,2GAA2G;AAC3H,6CAA4C,+CAA+C;AAC3F;AACA;AACA;AACA;AACA,iBAAgB,iHAAiH;AACjI;AACA;AACA;AACA;AACA,iBAAgB,sDAAsD;AACtE;AACA;AACA;AACA;AACA;AACA,qBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU,wCAAwC;AAClD;AACA;AACA,aAAY,yBAAyB;AACrC,6CAA4C;AAC5C,kDAAiD;AACjD;AACA;AACA;AACA,aAAY,yBAAyB;AACrC;AACA;AACA,eAAc,oDAAoD;AAClE,0DAAyD;AACzD,sDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA,iDAAgD,WAAW;AAC3D;;AAEA;AACA,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,+CAA8C;;AAE9C;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR,OAAM;AACN,KAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,SAAQ;AACR;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;AACA,KAAI;;AAEJ;;AAEA;;AAEA;AACA,mCAAkC;;AAElC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA,WAAU;AACV;AACA;;AAEA;AACA;AACA,OAAM;AACN,KAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAe;AACf,OAAM;;AAEN;AACA,KAAI;;AAEJ,wCAAuC;;AAEvC;;AAEA;;AAEA;AACA;AACA,SAAQ,2BAA2B;AACnC;AACA;AACA,WAAU,mEAAmE;AAC7E;AACA;AACA,aAAY,8CAA8C;AAC1D;AACA;AACA,eAAc,yBAAyB;AACvC;AACA;AACA,iBAAgB,0BAA0B;AAC1C;AACA;AACA,mBAAkB,oDAAoD;AACtE;AACA;AACA,qBAAoB,uCAAuC;AAC3D,8CAA6C,6DAA6D;AAC1G;AACA;AACA,uBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,wEAAwE,IAAI;AAChG;AACA;AACA;AACA,uBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA;AACA,uBAAsB,kCAAkC;AACxD;AACA;AACA;AACA;AACA;AACA,uBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA,uBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA,uBAAsB,uBAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA,uBAAsB,sCAAsC;AAC5D;AACA;AACA;AACA;AACA;AACA,uBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,iDAAiD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY,2CAA2C;AACvD,wDAAuD,wBAAwB;AAC/E;AACA;AACA;AACA,aAAY,4CAA4C;AACxD,6DAA4D,wBAAwB;AACpF;AACA;AACA;AACA;AACA,WAAU,wCAAwC;AAClD,2CAA0C;AAC1C,2CAA0C;AAC1C;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA,6CAA4C,WAAW;AACvD;;AAEA;AACA,8BAA6B;;AAE7B,QAAO;;AAEP;AACA;;AAEA,4CAA2C;;AAE3C;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,2BAA0B,0BAA0B;AACpD,wBAAuB,mDAAmD;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA,WAAU;;AAEV;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA,WAAU;;AAEV;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA,OAAM;AACN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA,eAAc;AACd;AACA,eAAc;AACd;AACA,eAAc;AACd;AACA,eAAc;AACd,WAAU;AACV;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA,WAAU;AACV,OAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA,WAAU;AACV,OAAM;AACN;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,WAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAc,wBAAwB;AACtC;AACA;AACA,mBAAkB,4CAA4C;AAC9D;AACA;AACA,uBAAsB,6BAA6B;AACnD;AACA;AACA,2BAA0B,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,0BAA0B;AAC5D;AACA;AACA;AACA;AACA;AACA,mCAAkC,yBAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,yBAAyB;AACnD;AACA;AACA,+BAA8B,4EAA4E;AAC1G,2DAA0D,+CAA+C;AACzG;AACA;AACA;AACA;AACA,+BAA8B,4EAA4E;AAC1G,2DAA0D,+CAA+C;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,0BAA0B;AAChD,kDAAiD,kBAAkB;AACnE;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA;;;AAGA;AACA,kBAAiB;AACjB,OAAM;;AAEN;;AAEA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA,WAAU;;AAEV;AACA,OAAM;;AAEN;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA8B,0BAA0B;AACxD,4BAA2B,mDAAmD;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAoD,uDAAuD;AAC3G,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAE;;AAEF;AACA;AACA,8BAA6B;;AAE7B;;AAEA,EAAC;AACD,wC;;;;;;;;;ACj9KsB;;;;AACqB;;AACC;;AAClB;;;;AAE1B,KAAI,OAAO,oBAAQ;AACnB,KAAI,UAAU,oBAAQ;;AAEtB,QAAO,QAAyB;AAChC,QAAO,QAAuB;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","file":"hivtrace.js","sourcesContent":["window.jQuery = window.$ = $; \n\nrequire(\"font-awesome/css/font-awesome.css\");\nrequire('./hivtrace.css');\nrequire('bootstrap');\n\nvar hyphyvision = require('hyphy-vision');\nvar hivtrace = require('./hivtrace.js');\n\n// Create new hyphy-vision export\nwindow.hivtrace = hivtrace;\nwindow.hyphyvision = hyphyvision;\n\n\n\n// WEBPACK FOOTER //\n// ./src/entry.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/font-awesome/css/font-awesome.css\n// module id = 5\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/hivtrace.css\n// module id = 15\n// module chunks = 0","webpackJsonp([0],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function($) {'use strict';\n\t\n\tvar _bootstrap = __webpack_require__(5);\n\t\n\tvar _bootstrap2 = _interopRequireDefault(_bootstrap);\n\t\n\tfunction _interopRequireDefault(obj) {\n\t  return obj && obj.__esModule ? obj : { default: obj };\n\t}\n\t\n\twindow.$ = window.JQuery = $;\n\t\n\t__webpack_require__(14);\n\t__webpack_require__(22);\n\t\n\t__webpack_require__(24);\n\t__webpack_require__(37);\n\t\n\t// Bundle exports under hyphyvision\n\t__webpack_require__(42);\n\t\n\tvar absrel = __webpack_require__(203);\n\tvar busted = __webpack_require__(221);\n\tvar relax = __webpack_require__(222);\n\t\n\t// Create new hyphy-vision export\n\twindow.absrel = absrel;\n\twindow.busted = busted;\n\twindow.relax = relax;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n\n/***/ 5:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 14:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 22:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 37:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function($, d3, _, jQuery) {'use strict';\n\t\n\tvar root = undefined;\n\tvar datamonkey = function datamonkey() {};\n\t\n\tif (true) {\n\t  if (typeof module !== 'undefined' && module.exports) {\n\t    exports = module.exports = datamonkey;\n\t  }\n\t  exports.datamonkey = datamonkey;\n\t} else {\n\t  root.datamonkey = datamonkey;\n\t}\n\t\n\tdatamonkey.errorModal = function (msg) {\n\t  $('#modal-error-msg').text(msg);\n\t  $('#errorModal').modal();\n\t};\n\t\n\tdatamonkey.export_csv_button = function (data) {\n\t  data = d3.csv.format(data);\n\t  if (data !== null) {\n\t    var pom = document.createElement('a');\n\t    pom.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));\n\t    pom.setAttribute('download', 'export.csv');\n\t    pom.className = 'btn btn-default btn-sm';\n\t    pom.innerHTML = '<span class=\"glyphicon glyphicon-floppy-save\"></span> Download CSV';\n\t    $(\"body\").append(pom);\n\t    pom.click();\n\t    pom.remove();\n\t  }\n\t};\n\t\n\tdatamonkey.save_image = function (type, container) {\n\t\n\t  var prefix = {\n\t    xmlns: \"http://www.w3.org/2000/xmlns/\",\n\t    xlink: \"http://www.w3.org/1999/xlink\",\n\t    svg: \"http://www.w3.org/2000/svg\"\n\t  };\n\t\n\t  function get_styles(doc) {\n\t\n\t    function process_stylesheet(ss) {\n\t      try {\n\t        if (ss.cssRules) {\n\t          for (var i = 0; i < ss.cssRules.length; i++) {\n\t            var rule = ss.cssRules[i];\n\t            if (rule.type === 3) {\n\t              // Import Rule\n\t              process_stylesheet(rule.styleSheet);\n\t            } else {\n\t              // hack for illustrator crashing on descendent selectors\n\t              if (rule.selectorText) {\n\t                if (rule.selectorText.indexOf(\">\") === -1) {\n\t                  styles += \"\\n\" + rule.cssText;\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\t      } catch (e) {\n\t        console.log('Could not process stylesheet : ' + ss);\n\t      }\n\t    }\n\t\n\t    var styles = \"\",\n\t        styleSheets = doc.styleSheets;\n\t\n\t    if (styleSheets) {\n\t      for (var i = 0; i < styleSheets.length; i++) {\n\t        process_stylesheet(styleSheets[i]);\n\t      }\n\t    }\n\t\n\t    return styles;\n\t  }\n\t\n\t  var convert_svg_to_png = function convert_svg_to_png(image_string) {\n\t\n\t    var image = document.getElementById(\"hyphy-chart-image\");\n\t\n\t    image.onload = function () {\n\t\n\t      var canvas = document.getElementById(\"hyphy-chart-canvas\");\n\t      canvas.width = image.width;\n\t      canvas.height = image.height;\n\t      var context = canvas.getContext(\"2d\");\n\t      context.fillStyle = \"#FFFFFF\";\n\t      context.fillRect(0, 0, image.width, image.height);\n\t      context.drawImage(image, 0, 0);\n\t      var img = canvas.toDataURL(\"image/png\");\n\t      var pom = document.createElement('a');\n\t      pom.setAttribute('download', 'image.png');\n\t      pom.href = canvas.toDataURL(\"image/png\");\n\t      $(\"body\").append(pom);\n\t      pom.click();\n\t      pom.remove();\n\t    };\n\t\n\t    image.src = image_string;\n\t  };\n\t\n\t  var svg = $(container).find(\"svg\")[0];\n\t  if (!svg) {\n\t    svg = $(container)[0];\n\t  }\n\t\n\t  var styles = get_styles(window.document);\n\t\n\t  svg.setAttribute(\"version\", \"1.1\");\n\t\n\t  var defsEl = document.createElement(\"defs\");\n\t  svg.insertBefore(defsEl, svg.firstChild);\n\t\n\t  var styleEl = document.createElement(\"style\");\n\t  defsEl.appendChild(styleEl);\n\t  styleEl.setAttribute(\"type\", \"text/css\");\n\t\n\t  // removing attributes so they aren't doubled up\n\t  svg.removeAttribute(\"xmlns\");\n\t  svg.removeAttribute(\"xlink\");\n\t\n\t  // These are needed for the svg\n\t  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n\t    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n\t  }\n\t\n\t  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n\t    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n\t  }\n\t\n\t  var source = new XMLSerializer().serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n\t  var rect = svg.getBoundingClientRect();\n\t  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n\t  var to_download = [doctype + source];\n\t  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\t\n\t  if (type == \"png\") {\n\t    convert_svg_to_png(image_string);\n\t  } else {\n\t    var pom = document.createElement('a');\n\t    pom.setAttribute('download', 'image.svg');\n\t    pom.setAttribute('href', image_string);\n\t    $(\"body\").append(pom);\n\t    pom.click();\n\t    pom.remove();\n\t  }\n\t};\n\t\n\tdatamonkey.jobQueue = function (container) {\n\t\n\t  // Load template\n\t  _.templateSettings = {\n\t    evaluate: /\\{\\%(.+?)\\%\\}/g,\n\t    interpolate: /\\{\\{(.+?)\\}\\}/g,\n\t    variable: \"rc\"\n\t  };\n\t\n\t  d3.json('/jobqueue', function (data) {\n\t\n\t    var job_queue = _.template($(\"script.job-queue\").html());\n\t\n\t    var job_queue_html = job_queue(data);\n\t    $(\"#job-queue-panel\").find('table').remove();\n\t    $(container).append(job_queue_html);\n\t  });\n\t};\n\t\n\tdatamonkey.status_check = function () {\n\t\n\t  // Check if there are any status checkers on the page\n\t  if ($(\".status-checker\").length) {\n\t    // Check health status and report back to element\n\t    var url = \"/clusterhealth\";\n\t    d3.json(url, function (data) {\n\t      // Add appropriate class based on result\n\t      if (data.successful_connection) {\n\t        d3.select('.status-checker').classed({ 'status-healthy': true, 'status-troubled': false });\n\t        $(\".status-checker\").attr(\"title\", 'Cluster Status : Healthy');\n\t      } else {\n\t        d3.select('.status-checker').classed({ 'status-healthy': false, 'status-troubled': true });\n\t        $(\".status-checker\").attr(\"title\", 'Cluster Status : Troubled; ' + data.msg.description);\n\t      }\n\t    });\n\t  }\n\t};\n\t\n\tdatamonkey.validate_date = function () {\n\t\n\t  // Check that it is not empty\n\t  if ($(this).val().length === 0) {\n\t    $(this).next('.help-block').remove();\n\t    $(this).parent().removeClass('has-success');\n\t    $(this).parent().addClass('has-error');\n\t\n\t    jQuery('<span/>', {\n\t      class: 'help-block',\n\t      text: 'Field is empty'\n\t    }).insertAfter($(this));\n\t  } else if (isNaN(Date.parse($(this).val()))) {\n\t    $(this).next('.help-block').remove();\n\t    $(this).parent().removeClass('has-success');\n\t    $(this).parent().addClass('has-error');\n\t\n\t    jQuery('<span/>', {\n\t      class: 'help-block',\n\t      text: 'Date format should be in the format YYYY-mm-dd'\n\t    }).insertAfter($(this));\n\t  } else {\n\t    $(this).parent().removeClass('has-error');\n\t    $(this).parent().addClass('has-success');\n\t    $(this).next('.help-block').remove();\n\t  }\n\t};\n\t\n\t$(document).ready(function () {\n\t  $(function () {\n\t    $('[data-toggle=\"tooltip\"]').tooltip();\n\t  });\n\t  $('#datamonkey-header').collapse();\n\t\n\t  var initial_padding = $(\"body\").css(\"padding-top\");\n\t\n\t  $(\"#collapse_nav_bar\").on(\"click\", function (e) {\n\t    $('#datamonkey-header').collapse('toggle');\n\t    $(this).find(\"i\").toggleClass(\"fa-times-circle fa-eye\");\n\t    var new_padding = $(\"body\").css(\"padding-top\") == initial_padding ? \"5px\" : initial_padding;\n\t    d3.select(\"body\").transition().style(\"padding-top\", new_padding);\n\t  });\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(38), __webpack_require__(41), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 42:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $, _) {\"use strict\";\n\t\n\t__webpack_require__(43);\n\t__webpack_require__(201);\n\t__webpack_require__(202);\n\t\n\tvar React = __webpack_require__(44);\n\tvar datamonkey = __webpack_require__(37);\n\t\n\tvar SLAC = React.createClass({\n\t    displayName: \"SLAC\",\n\t\n\t\n\t    float_format: d3.format(\".2f\"),\n\t\n\t    dm_loadFromServer: function dm_loadFromServer() {\n\t        /* 20160721 SLKP: prefixing all custom (i.e. not defined by REACT) with dm_\n\t           to make it easier to recognize scoping immediately */\n\t\n\t        var self = this;\n\t\n\t        d3.json(self.props.url, function (request_error, data) {\n\t\n\t            if (!data) {\n\t                var error_message_text = request_error.status == 404 ? self.props.url + \" could not be loaded\" : request_error.statusText;\n\t                self.setState({ error_message: error_message_text });\n\t            } else {\n\t                self.dm_initializeFromJSON(data);\n\t            }\n\t        });\n\t    },\n\t\n\t    dm_initializeFromJSON: function dm_initializeFromJSON(data) {\n\t        this.setState({ analysis_results: data });\n\t    },\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        /* default properties for the component */\n\t\n\t        return {\n\t            url: \"#\"\n\t        };\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t\n\t        return {\n\t            analysis_results: null,\n\t            error_message: null,\n\t            pValue: 0.1\n\t        };\n\t    },\n\t\n\t    componentWillMount: function componentWillMount() {\n\t        this.dm_loadFromServer();\n\t        this.dm_setEvents();\n\t    },\n\t\n\t    dm_setEvents: function dm_setEvents() {\n\t\n\t        var self = this;\n\t\n\t        $(\"#datamonkey-json-file\").on(\"change\", function (e) {\n\t\n\t            var files = e.target.files; // FileList object\n\t\n\t            if (files.length == 1) {\n\t                var f = files[0];\n\t                var reader = new FileReader();\n\t\n\t                reader.onload = function (theFile) {\n\t                    return function (e) {\n\t                        try {\n\t                            self.dm_initializeFromJSON(JSON.parse(this.result));\n\t                        } catch (error) {\n\t                            self.setState({ error_message: error.toString() });\n\t                        }\n\t                    };\n\t                }(f);\n\t\n\t                reader.readAsText(f);\n\t            }\n\t\n\t            $(\"#datamonkey-json-file-toggle\").dropdown(\"toggle\");\n\t        });\n\t    },\n\t\n\t    dm_adjustPvalue: function dm_adjustPvalue(event) {\n\t        this.setState({ pValue: parseFloat(event.target.value) });\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        var self = this;\n\t\n\t        if (self.state.error_message) {\n\t            return React.createElement(\n\t                \"div\",\n\t                { id: \"datamonkey-error\", className: \"alert alert-danger alert-dismissible\", role: \"alert\" },\n\t                React.createElement(\n\t                    \"button\",\n\t                    { type: \"button\", className: \"close\", \"data-dismiss\": \"alert\", \"aria-label\": \"Close\" },\n\t                    React.createElement(\n\t                        \"span\",\n\t                        { \"aria-hidden\": \"true\" },\n\t                        \"\\xD7\"\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    \"strong\",\n\t                    null,\n\t                    self.state.error_message\n\t                ),\n\t                \" \",\n\t                React.createElement(\"span\", { id: \"datamonkey-error-text\" })\n\t            );\n\t        }\n\t\n\t        if (self.state.analysis_results) {\n\t\n\t            return React.createElement(\n\t                \"div\",\n\t                { className: \"tab-content\" },\n\t                React.createElement(\n\t                    \"div\",\n\t                    { className: \"tab-pane\", id: \"summary_tab\" },\n\t                    React.createElement(\n\t                        \"div\",\n\t                        { className: \"row\" },\n\t                        React.createElement(\n\t                            \"div\",\n\t                            { id: \"summary-div\", className: \"col-md-12\" },\n\t                            React.createElement(SLACBanner, { analysis_results: self.state.analysis_results, pValue: self.state.pValue, pAdjuster: _.bind(self.dm_adjustPvalue, self) })\n\t                        )\n\t                    ),\n\t                    React.createElement(\n\t                        \"div\",\n\t                        { className: \"row hidden-print\" },\n\t                        React.createElement(\n\t                            \"div\",\n\t                            { id: \"datamonkey-slac-tree-summary\", className: \"col-lg-4 col-md-6 col-sm-12\" },\n\t                            React.createElement(\n\t                                \"div\",\n\t                                { className: \"panel panel-default\" },\n\t                                React.createElement(\n\t                                    \"div\",\n\t                                    { className: \"panel-heading\" },\n\t                                    React.createElement(\n\t                                        \"h3\",\n\t                                        { className: \"panel-title\" },\n\t                                        React.createElement(\"i\", { className: \"fa fa-puzzle-piece\" }),\n\t                                        \" Partition information\"\n\t                                    )\n\t                                ),\n\t                                React.createElement(\n\t                                    \"div\",\n\t                                    { className: \"panel-body\" },\n\t                                    React.createElement(\n\t                                        \"small\",\n\t                                        null,\n\t                                        React.createElement(DatamonkeyPartitionTable, {\n\t                                            pValue: self.state.pValue,\n\t                                            trees: self.state.analysis_results.trees,\n\t                                            partitions: self.state.analysis_results.partitions,\n\t                                            branchAttributes: self.state.analysis_results['branch attributes'],\n\t                                            siteResults: self.state.analysis_results.MLE,\n\t                                            accessorPositive: function accessorPositive(json, partition) {\n\t                                                return _.map(json[\"content\"][partition][\"by-site\"][\"AVERAGED\"], function (v) {\n\t                                                    return v[8];\n\t                                                });\n\t                                            },\n\t                                            accessorNegative: function accessorNegative(json, partition) {\n\t                                                return _.map(json[\"content\"][partition][\"by-site\"][\"AVERAGED\"], function (v) {\n\t                                                    return v[9];\n\t                                                });\n\t                                            }\n\t                                        })\n\t                                    )\n\t                                )\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            \"div\",\n\t                            { id: \"datamonkey-slac-model-fits\", className: \"col-lg-5 col-md-6 col-sm-12\" },\n\t                            React.createElement(\n\t                                \"div\",\n\t                                { className: \"panel panel-default\" },\n\t                                React.createElement(\n\t                                    \"div\",\n\t                                    { className: \"panel-heading\" },\n\t                                    React.createElement(\n\t                                        \"h3\",\n\t                                        { className: \"panel-title\" },\n\t                                        React.createElement(\"i\", { className: \"fa fa-table\" }),\n\t                                        \" Model fits\"\n\t                                    )\n\t                                ),\n\t                                React.createElement(\n\t                                    \"div\",\n\t                                    { className: \"panel-body\" },\n\t                                    React.createElement(\n\t                                        \"small\",\n\t                                        null,\n\t                                        React.createElement(DatamonkeyModelTable, { fits: self.state.analysis_results.fits })\n\t                                    )\n\t                                )\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            \"div\",\n\t                            { id: \"datamonkey-slac-timers\", className: \"col-lg-3 col-md-3 col-sm-12\" },\n\t                            React.createElement(\n\t                                \"div\",\n\t                                { className: \"panel panel-default\" },\n\t                                React.createElement(\n\t                                    \"div\",\n\t                                    { className: \"panel-heading\" },\n\t                                    React.createElement(\n\t                                        \"h3\",\n\t                                        { className: \"panel-title\" },\n\t                                        React.createElement(\"i\", { className: \"fa fa-clock-o\" }),\n\t                                        \" Execution time\"\n\t                                    )\n\t                                ),\n\t                                React.createElement(\n\t                                    \"div\",\n\t                                    { className: \"panel-body\" },\n\t                                    React.createElement(\n\t                                        \"small\",\n\t                                        null,\n\t                                        React.createElement(DatamonkeyTimersTable, { timers: self.state.analysis_results.timers, totalTime: \"Total time\" })\n\t                                    )\n\t                                )\n\t                            )\n\t                        )\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    \"div\",\n\t                    { className: \"tab-pane active\", id: \"sites_tab\" },\n\t                    React.createElement(\n\t                        \"div\",\n\t                        { className: \"row\" },\n\t                        React.createElement(\n\t                            \"div\",\n\t                            { id: \"summary-div\", className: \"col-md-12\" },\n\t                            React.createElement(SLACSites, {\n\t                                headers: self.state.analysis_results.MLE.headers,\n\t                                mle: datamonkey.helpers.map(datamonkey.helpers.filter(self.state.analysis_results.MLE.content, function (value, key) {\n\t                                    return _.has(value, \"by-site\");\n\t                                }), function (value, key) {\n\t                                    return value[\"by-site\"];\n\t                                }),\n\t                                sample25: self.state.analysis_results[\"sample-2.5\"],\n\t                                sampleMedian: self.state.analysis_results[\"sample-median\"],\n\t                                sample975: self.state.analysis_results[\"sample-97.5\"],\n\t                                partitionSites: self.state.analysis_results.partitions\n\t                            })\n\t                        )\n\t                    )\n\t                ),\n\t                React.createElement(\"div\", { className: \"tab-pane\", id: \"tree_tab\" })\n\t            );\n\t        }\n\t        return null;\n\t    }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_slac(url, element) {\n\t    ReactDOM.render(React.createElement(SLAC, { url: url }), document.getElementById(element));\n\t}\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(2), __webpack_require__(41)))\n\n/***/ },\n\n/***/ 43:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_, d3) {'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar React = __webpack_require__(44);\n\tvar datamonkey = __webpack_require__(37);\n\t\n\tvar DatamonkeyTableRow = React.createClass({\n\t    displayName: 'DatamonkeyTableRow',\n\t\n\t    /**\n\t        A single table row\n\t    \n\t        *rowData* is an array of cells\n\t            each cell can be one of\n\t                1. string: simply render the text as shown\n\t                2. object: a polymorphic case; can be rendered directly (if the object is a valid react.js element)\n\t                   or via a transformation of the value associated with the key 'value'\n\t    \n\t                   supported keys\n\t                    2.1. 'value' : the value to use to generate cell context\n\t                    2.2. 'format' : the function (returning something react.js can render directly) that will be called\n\t                    to transform 'value' into the object to be rendered\n\t                    2.3. 'span' : colSpan attribute\n\t                    2.4. 'style': CSS style attributes (JSX specification, i.e. {margin-top: '1em'} and not a string)\n\t                    2.5. 'classes': CSS classes to apply to the cell\n\t                    2.6. 'abbr': wrap cell value in <abbr> tags\n\t    \n\t                3. array: directly render array elements in the cell (must be renderable to react.js; note that plain\n\t                text elements will be wrapped in \"span\" which is not allowed to nest in <th/td>\n\t    \n\t    \n\t        *header* is a bool indicating whether the header is a header row (th cells) or a regular row (td cells)\n\t    */\n\t\n\t    /*propTypes: {\n\t     rowData: React.PropTypes.arrayOf (React.PropTypes.oneOfType ([React.PropTypes.string,React.PropTypes.number,React.PropTypes.object,React.PropTypes.array])).isRequired,\n\t     header:  React.PropTypes.bool,\n\t    },*/\n\t\n\t    dm_compareTwoValues: function dm_compareTwoValues(a, b) {\n\t        /**\n\t            compare objects by iterating over keys\n\t        */\n\t\n\t        var myType = typeof a === 'undefined' ? 'undefined' : _typeof(a),\n\t            self = this;\n\t\n\t        if (myType == (typeof b === 'undefined' ? 'undefined' : _typeof(b))) {\n\t            if (myType == \"string\" || myType == \"number\") {\n\t                return a == b ? 1 : 0;\n\t            }\n\t\n\t            if (_.isArray(a) && _.isArray(b)) {\n\t\n\t                if (a.length != b.length) {\n\t                    return 0;\n\t                }\n\t\n\t                var not_compared = 0;\n\t                var result = _.every(a, function (c, i) {\n\t                    var comp = self.dm_compareTwoValues(c, b[i]);if (comp < 0) {\n\t                        not_compared = comp;return false;\n\t                    }return comp == 1;\n\t                });\n\t\n\t                if (not_compared < 0) {\n\t                    return not_compared;\n\t                }\n\t\n\t                return result ? 1 : 0;\n\t            }\n\t\n\t            return -2;\n\t        }\n\t        return -1;\n\t    },\n\t\n\t    dm_log100times: _.before(100, function (v) {\n\t        console.log(v);\n\t        return 0;\n\t    }),\n\t\n\t    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {\n\t\n\t        var self = this;\n\t\n\t        if (this.props.header !== nextProps.header) {\n\t            return true;\n\t        }\n\t\n\t        var result = _.some(this.props.rowData, function (value, index) {\n\t            /** TO DO\n\t                check for format and other field equality\n\t            */\n\t            if (value === nextProps.rowData[index]) {\n\t                return false;\n\t            }\n\t\n\t            var compare = self.dm_compareTwoValues(value, nextProps.rowData[index]);\n\t            if (compare >= 0) {\n\t                return compare == 0;\n\t            }\n\t\n\t            if (compare == -2) {\n\t                if (_.has(value, \"value\") && _.has(nextProps.rowData[index], \"value\")) {\n\t                    return self.dm_compareTwoValues(value.value, nextProps.rowData[index].value) != 1;\n\t                }\n\t            }\n\t\n\t            return true;\n\t        });\n\t\n\t        if (result) {\n\t            this.dm_log100times([\"Old\", this.props.rowData, \"New\", nextProps.rowData]);\n\t        }\n\t\n\t        return result;\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(\n\t            'tr',\n\t            null,\n\t            this.props.rowData.map(_.bind(function (cell, index) {\n\t\n\t                var value = _.has(cell, \"value\") ? cell.value : cell;\n\t\n\t                if (_.isArray(value)) {\n\t                    if (!_.has(cell, \"format\")) {\n\t                        return value;\n\t                    }\n\t                } else {\n\t                    if (_.isObject(value)) {\n\t                        if (!React.isValidElement(value)) {\n\t                            return null;\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (_.has(cell, \"format\")) {\n\t                    value = cell.format(value);\n\t                }\n\t\n\t                if (_.has(cell, \"abbr\")) {\n\t                    value = React.createElement(\n\t                        'abbr',\n\t                        { title: cell.abbr },\n\t                        value\n\t                    );\n\t                }\n\t\n\t                var cellProps = { key: index };\n\t\n\t                if (_.has(cell, \"span\")) {\n\t                    cellProps[\"colSpan\"] = cell.span;\n\t                }\n\t\n\t                if (_.has(cell, \"style\")) {\n\t                    cellProps[\"style\"] = cell.style;\n\t                }\n\t\n\t                if (_.has(cell, \"classes\")) {\n\t                    cellProps[\"className\"] = cell.classes;\n\t                }\n\t\n\t                return React.createElement(this.props.header ? \"th\" : \"td\", cellProps, value);\n\t            }, this))\n\t        );\n\t    }\n\t});\n\t\n\tvar DatamonkeyTable = React.createClass({\n\t    displayName: 'DatamonkeyTable',\n\t\n\t    /**\n\t        A table composed of rows\n\t            *headerData* -- an array of cells (see DatamonkeyTableRow) to render as the header\n\t            *bodyData* -- an array of arrays of cells (rows) to render\n\t            *classes* -- CSS classes to apply to the table element\n\t    */\n\t\n\t    /*propTypes: {\n\t        headerData: React.PropTypes.array,\n\t        bodyData: React.PropTypes.arrayOf (React.PropTypes.array),\n\t    },*/\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        return { classes: \"table table-condensed table-hover\",\n\t            rowHash: null,\n\t            sortableColumns: new Object(null),\n\t            initialSort: null\n\t        };\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        return { sortedOn: this.props.initialSort };\n\t    },\n\t\n\t    render: function render() {\n\t        var children = [];\n\t\n\t        if (this.props.headerData) {\n\t            if (_.isArray(this.props.headerData[0])) {\n\t                // multiple rows\n\t                children.push(React.createElement(\n\t                    'thead',\n\t                    { key: 0 },\n\t                    _.map(this.props.headerData, function (row, index) {\n\t                        return React.createElement(DatamonkeyTableRow, { rowData: row, header: true, key: index });\n\t                    })\n\t                ));\n\t            } else {\n\t                children.push(React.createElement(\n\t                    'thead',\n\t                    { key: 0 },\n\t                    React.createElement(DatamonkeyTableRow, { rowData: this.props.headerData, header: true })\n\t                ));\n\t            }\n\t        }\n\t\n\t        children.push(React.createElement(\"tbody\", { key: 1 }, _.map(this.props.bodyData, _.bind(function (componentData, index) {\n\t            return React.createElement(DatamonkeyTableRow, { rowData: componentData, key: this.props.rowHash ? this.props.rowHash(componentData) : index, header: false });\n\t        }, this))));\n\t\n\t        return React.createElement(\"table\", { className: this.props.classes }, children);\n\t    }\n\t});\n\t\n\tvar DatamonkeyRateDistributionTable = React.createClass({\n\t    displayName: 'DatamonkeyRateDistributionTable',\n\t\n\t\n\t    /** render a rate distribution table from JSON formatted like this\n\t    {\n\t         \"non-synonymous/synonymous rate ratio for *background*\":[ // name of distribution\n\t          [0.1701428265961598, 1] // distribution points (rate, weight)\n\t          ],\n\t         \"non-synonymous/synonymous rate ratio for *test*\":[\n\t          [0.1452686330406915, 1]\n\t          ]\n\t    }\n\t     */\n\t\n\t    propTypes: {\n\t        distribution: React.PropTypes.object.isRequired\n\t    },\n\t\n\t    dm_formatterRate: d3.format(\".3r\"),\n\t    dm_formatterProp: d3.format(\".3p\"),\n\t\n\t    dm_createDistributionTable: function dm_createDistributionTable(jsonRates) {\n\t        var rowData = [];\n\t        var self = this;\n\t        _.each(jsonRates, function (value, key) {\n\t            rowData.push([{ value: key, span: 3, classes: \"info\" }]);\n\t            _.each(value, function (rate, index) {\n\t                rowData.push([{ value: rate[1], format: self.dm_formatterProp }, '@', { value: rate[0], format: self.dm_formatterRate }]);\n\t            });\n\t        });\n\t        return rowData;\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(DatamonkeyTable, { bodyData: this.dm_createDistributionTable(this.props.distribution), classes: \"table table-condensed\" });\n\t    }\n\t\n\t});\n\t\n\tvar DatamonkeyPartitionTable = React.createClass({\n\t    displayName: 'DatamonkeyPartitionTable',\n\t\n\t\n\t    dm_formatterFloat: d3.format(\".3r\"),\n\t    dm_formatterProp: d3.format(\".3p\"),\n\t\n\t    propTypes: {\n\t        trees: React.PropTypes.object.isRequired,\n\t        partitions: React.PropTypes.object.isRequired,\n\t        branchAttributes: React.PropTypes.object.isRequired,\n\t        siteResults: React.PropTypes.object.isRequired,\n\t        accessorNegative: React.PropTypes.func.isRequired,\n\t        accessorPositive: React.PropTypes.func.isRequired,\n\t        pValue: React.PropTypes.number.isRequired\n\t    },\n\t\n\t    dm_computePartitionInformation: function dm_computePartitionInformation(trees, partitions, attributes, pValue) {\n\t\n\t        var partitionKeys = _.sortBy(_.keys(partitions), function (v) {\n\t            return v;\n\t        }),\n\t            matchingKey = null,\n\t            self = this;\n\t\n\t        var extractBranchLength = this.props.extractOn || _.find(attributes.attributes, function (value, key) {\n\t            matchingKey = key;return value[\"attribute type\"] == \"branch length\";\n\t        });\n\t        if (matchingKey) {\n\t            extractBranchLength = matchingKey;\n\t        }\n\t\n\t        return _.map(partitionKeys, function (key, index) {\n\t            var treeBranches = trees.tested[key],\n\t                tested = {};\n\t\n\t            _.each(treeBranches, function (value, key) {\n\t                if (value == \"test\") tested[key] = 1;\n\t            });\n\t\n\t            var testedLength = extractBranchLength ? datamonkey.helpers.sum(attributes[key], function (v, k) {\n\t                if (tested[k.toUpperCase()]) {\n\t                    return v[extractBranchLength];\n\t                }return 0;\n\t            }) : 0;\n\t            var totalLength = extractBranchLength ? datamonkey.helpers.sum(attributes[key], function (v) {\n\t                return v[extractBranchLength] || 0;\n\t            }) : 0; // || 0 is to resolve root node missing length\n\t\n\t\n\t            return _.map([index + 1, // 1-based partition index\n\t            partitions[key].coverage[0].length, // number of sites in the partition\n\t            _.size(tested), // tested branches\n\t            _.keys(treeBranches).length, // total branches\n\t            testedLength, testedLength / totalLength, totalLength, _.filter(self.props.accessorPositive(self.props.siteResults, key), function (p) {\n\t                return p <= pValue;\n\t            }).length, _.filter(self.props.accessorNegative(self.props.siteResults, key), function (p) {\n\t                return p <= pValue;\n\t            }).length], function (cell, index) {\n\t                if (index > 1) {\n\t                    var attributedCell = { value: cell,\n\t                        style: { textAlign: 'center' } };\n\t\n\t                    if (index == 4 || index == 6) {\n\t                        _.extend(attributedCell, { 'format': self.dm_formatterFloat });\n\t                    }\n\t                    if (index == 5) {\n\t                        _.extend(attributedCell, { 'format': self.dm_formatterProp });\n\t                    }\n\t\n\t                    return attributedCell;\n\t                }\n\t                return cell;\n\t            });\n\t        });\n\t    },\n\t\n\t    dm_makeHeaderRow: function dm_makeHeaderRow(pValue) {\n\t        return [_.map([\"Partition\", \"Sites\", \"Branches\", \"Branch Length\", \"Selected at p\" + String.fromCharCode(parseInt(\"2264\", 16)) + pValue], function (d, i) {\n\t            return _.extend({ value: d, style: { borderBottom: 0, textAlign: i > 1 ? 'center' : 'left' } }, i > 1 ? { 'span': i == 3 ? 3 : 2 } : {});\n\t        }), _.map([\"\", \"\", \"Tested\", \"Total\", \"Tested\", \"% of total\", \"Total\", \"Positive\", \"Negative\"], function (d, i) {\n\t            return { value: d, style: { borderTop: 0, textAlign: i > 1 ? 'center' : 'left' } };\n\t        })];\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        return {\n\t            header: this.dm_makeHeaderRow(this.props.pValue),\n\t            rows: this.dm_computePartitionInformation(this.props.trees, this.props.partitions, this.props.branchAttributes, this.props.pValue)\n\t        };\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t        this.setState({\n\t            header: this.dm_makeHeaderRow(nextProps.pValue),\n\t            rows: this.dm_computePartitionInformation(nextProps.trees, nextProps.partitions, nextProps.branchAttributes, nextProps.pValue)\n\t        });\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(\n\t            'div',\n\t            { className: 'table-responsive' },\n\t            React.createElement(DatamonkeyTable, { headerData: this.state.header, bodyData: this.state.rows })\n\t        );\n\t    }\n\t});\n\t\n\tvar DatamonkeyModelTable = React.createClass({\n\t    displayName: 'DatamonkeyModelTable',\n\t\n\t\n\t    /** render a model fit table from a JSON object with entries like this\n\t            \"Global MG94xREV\":{ // model name\n\t               \"log likelihood\":-5453.527975908821,\n\t               \"parameters\":131,\n\t               \"AIC-c\":11172.05569160427,\n\t               \"rate distributions\":{\n\t                 \"non-synonymous/synonymous rate ratio for *background*\":[\n\t                  [0.1701428265961598, 1]\n\t                  ],\n\t                 \"non-synonymous/synonymous rate ratio for *test*\":[\n\t                  [0.1452686330406915, 1]\n\t                  ]\n\t                },\n\t               \"display order\":0\n\t              }\n\t       dm_supportedColumns controls which keys from model specification will be consumed;\n\t          * 'value' is the cell specification to be consumed by DatamonkeyTableRow\n\t          * 'order' is the column order in the resulting table (relative; doesn't have to be sequential)\n\t          * 'display_format' is a formatting function for cell entries\n\t          * 'transform' is a data trasformation function for cell entries\n\t     */\n\t\n\t    dm_numberFormatter: d3.format(\".2f\"),\n\t\n\t    dm_supportedColumns: { 'log likelihood': { order: 2,\n\t            value: { \"value\": \"log L\", \"abbr\": \"log likelihood\" },\n\t            display_format: d3.format(\".2f\") },\n\t        'parameters': { order: 3,\n\t            value: \"Parameters\" },\n\t        'AIC-c': { order: 1,\n\t            value: { value: React.createElement('span', null, ['AIC', React.createElement(\n\t                    'sub',\n\t                    { key: '0' },\n\t                    'C'\n\t                )]),\n\t                abbr: \"Small-sample corrected Akaike Information Score\" },\n\t            display_format: d3.format(\".2f\") },\n\t        'rate distributions': { order: 4,\n\t            value: \"Rate distributions\",\n\t            transform: function transform(value) {\n\t                return React.createElement(DatamonkeyRateDistributionTable, { distribution: value });\n\t            } }\n\t    },\n\t\n\t    propTypes: {\n\t        fits: React.PropTypes.object.isRequired\n\t    },\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        return {\n\t            orderOn: \"display order\"\n\t        };\n\t    },\n\t\n\t    dm_extractFitsTable: function dm_extractFitsTable(jsonTable) {\n\t        var modelList = [];\n\t        var columnMap = null;\n\t        var columnMapIterator = [];\n\t        var valueFormat = {};\n\t        var valueTransform = {};\n\t        var rowData = [];\n\t        var self = this;\n\t\n\t        _.each(jsonTable, function (value, key) {\n\t            if (!columnMap) {\n\t                columnMap = {};\n\t                _.each(value, function (cellValue, cellName) {\n\t                    if (self.dm_supportedColumns[cellName]) {\n\t                        columnMap[cellName] = self.dm_supportedColumns[cellName];\n\t                        columnMapIterator[columnMap[cellName].order] = cellName;\n\t                        valueFormat[cellName] = self.dm_supportedColumns[cellName][\"display_format\"];\n\t                        if (_.isFunction(self.dm_supportedColumns[cellName][\"transform\"])) {\n\t                            valueTransform[cellName] = self.dm_supportedColumns[cellName][\"transform\"];\n\t                        }\n\t                    }\n\t                });\n\t                columnMapIterator = _.filter(columnMapIterator, function (v) {\n\t                    return v;\n\t                });\n\t            }\n\t\n\t            var thisRow = [{ value: key, style: { fontVariant: \"small-caps\" } }];\n\t\n\t            _.each(columnMapIterator, function (tag) {\n\t\n\t                var myValue = valueTransform[tag] ? valueTransform[tag](value[tag]) : value[tag];\n\t\n\t                if (valueFormat[tag]) {\n\t                    thisRow.push({ 'value': myValue, 'format': valueFormat[tag] });\n\t                } else {\n\t                    thisRow.push(myValue);\n\t                }\n\t            });\n\t\n\t            rowData.push([thisRow, _.isNumber(value[self.props.orderOn]) ? value[self.props.orderOn] : rowData.length]);\n\t        });\n\t\n\t        return { 'data': _.map(_.sortBy(rowData, function (value) {\n\t                return value[1];\n\t            }), function (r) {\n\t                return r[0];\n\t            }),\n\t            'columns': _.map(columnMapIterator, function (tag) {\n\t                return columnMap[tag].value;\n\t            }) };\n\t    },\n\t\n\t    dm_makeHeaderRow: function dm_makeHeaderRow(columnMap) {\n\t        var headerRow = ['Model'];\n\t        _.each(columnMap, function (v) {\n\t            headerRow.push(v);\n\t        });\n\t        return headerRow;\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t\n\t        var tableInfo = this.dm_extractFitsTable(this.props.fits);\n\t\n\t        return {\n\t            header: this.dm_makeHeaderRow(tableInfo.columns),\n\t            rows: tableInfo.data,\n\t            caption: null\n\t        };\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(\n\t            'div',\n\t            { className: 'table-responsive' },\n\t            React.createElement(DatamonkeyTable, { headerData: this.state.header, bodyData: this.state.rows })\n\t        );\n\t    }\n\t});\n\t\n\tvar DatamonkeyTimersTable = React.createClass({\n\t    displayName: 'DatamonkeyTimersTable',\n\t\n\t\n\t    dm_percentageFormatter: d3.format(\".2%\"),\n\t\n\t    propTypes: {\n\t        timers: React.PropTypes.object.isRequired\n\t    },\n\t\n\t    dm_formatSeconds: function dm_formatSeconds(seconds) {\n\t\n\t        var fields = [~~(seconds / 3600), ~~(seconds % 3600 / 60), seconds % 60];\n\t\n\t        return _.map(fields, function (d) {\n\t            return d < 10 ? \"0\" + d : \"\" + d;\n\t        }).join(':');\n\t    },\n\t\n\t    dm_extractTimerTable: function dm_extractTimerTable(jsonTable) {\n\t        var totalTime = 0.,\n\t            formattedRows = _.map(jsonTable, _.bind(function (value, key) {\n\t            if (this.props.totalTime) {\n\t                if (key == this.props.totalTime) {\n\t                    totalTime = value['timer'];\n\t                }\n\t            } else {\n\t                totalTime += value['timer'];\n\t            }\n\t            return [key, value['timer'], value['order']];\n\t        }, this));\n\t\n\t        formattedRows = _.sortBy(formattedRows, function (row) {\n\t            return row[2];\n\t        });\n\t\n\t        formattedRows = _.map(formattedRows, _.bind(function (row) {\n\t            var fraction = null;\n\t            if (this.props.totalTime === null || this.props.totalTime != row[0]) {\n\t                row[2] = { \"value\": row[1] / totalTime, \"format\": this.dm_percentageFormatter };\n\t            } else {\n\t                row[2] = \"\";\n\t            }\n\t            row[1] = this.dm_formatSeconds(row[1]);\n\t            return row;\n\t        }, this));\n\t\n\t        return formattedRows;\n\t    },\n\t\n\t    dm_makeHeaderRow: function dm_makeHeaderRow() {\n\t        return ['Task', 'Time', '%'];\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t\n\t        return {\n\t            header: this.dm_makeHeaderRow(),\n\t            rows: this.dm_extractTimerTable(this.props.timers),\n\t            caption: null\n\t        };\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(DatamonkeyTable, { headerData: this.state.header, bodyData: this.state.rows });\n\t    }\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41), __webpack_require__(38)))\n\n/***/ },\n\n/***/ 201:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _) {'use strict';\n\t\n\tvar React = __webpack_require__(44);\n\tvar datamonkey = __webpack_require__(37);\n\t\n\tvar SLACSites = React.createClass({\n\t    displayName: 'SLACSites',\n\t\n\t    propTypes: {\n\t        headers: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.string)).isRequired,\n\t        mle: React.PropTypes.object.isRequired,\n\t        sample25: React.PropTypes.object,\n\t        sampleMedian: React.PropTypes.object,\n\t        sample975: React.PropTypes.object,\n\t        initialAmbigHandling: React.PropTypes.string.isRequired,\n\t        partitionSites: React.PropTypes.object.isRequired\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        var canDoCI = this.props.sample25 && this.props.sampleMedian && this.props.sample975;\n\t\n\t        return {\n\t\n\t            ambigOptions: this.dm_AmbigOptions(this.props),\n\t            ambigHandling: this.props.initialAmbigHandling,\n\t            filters: new Object(null),\n\t            showIntervals: canDoCI,\n\t            hasCI: canDoCI\n\t        };\n\t    },\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t\n\t        return {\n\t            sample25: null,\n\t            sampleMedian: null,\n\t            sample975: null,\n\t            initialAmbigHandling: \"RESOLVED\"\n\t        };\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t        this.setState({\n\t\n\t            ambigOptions: this.dm_AmbigOptions(nextProps),\n\t            ambigHandling: nextProps.initialAmbigHandling\n\t        });\n\t    },\n\t\n\t    dm_formatNumber: d3.format(\".3r\"),\n\t    dm_formatNumberShort: d3.format(\".2r\"),\n\t\n\t    dm_log10times: _.before(10, function (v) {\n\t        console.log(v);\n\t        return 0;\n\t    }),\n\t\n\t    dm_formatInterval: function dm_formatInterval(values) {\n\t        //this.dm_log10times (values);\n\t\n\t        return this.dm_formatNumber(values[0]) + \" / \" + this.dm_formatNumber(values[2]) + \" [\" + this.dm_formatNumber(values[1]) + \" : \" + this.dm_formatNumber(values[3]) + \"]\";\n\t    },\n\t\n\t    dm_AmbigOptions: function dm_AmbigOptions(theseProps) {\n\t        return _.keys(theseProps.mle[0]);\n\t    },\n\t\n\t    dm_changeAmbig: function dm_changeAmbig(event) {\n\t\n\t        this.setState({\n\t            ambigHandling: event.target.value\n\t        });\n\t    },\n\t\n\t    dm_toggleIntervals: function dm_toggleIntervals(event) {\n\t        this.setState({\n\t            showIntervals: !this.state.showIntervals\n\t        });\n\t    },\n\t\n\t    dm_toggleVariableFilter: function dm_toggleVariableFilter(event) {\n\t\n\t        var filterState = new Object(null);\n\t        _.extend(filterState, this.state.filters);\n\t        filterState[\"variable\"] = this.state.filters[\"variable\"] == \"on\" ? \"off\" : \"on\";\n\t        this.setState({ filters: filterState });\n\t    },\n\t\n\t    dm_makeFilterFunction: function dm_makeFilterFunction() {\n\t\n\t        var filterFunction = null;\n\t\n\t        _.each(this.state.filters, function (value, key) {\n\t            var composeFunction = null;\n\t\n\t            switch (key) {\n\t                case \"variable\":\n\t                    {\n\t                        if (value == \"on\") {\n\t                            composeFunction = function composeFunction(f, partitionIndex, index, site, siteData) {\n\t                                return (!f || f(partitionIndex, index, site, siteData)) && siteData[2] + siteData[3] > 0;\n\t                            };\n\t                        }\n\t                        break;\n\t                    }\n\t            }\n\t\n\t            if (composeFunction) {\n\t                filterFunction = _.wrap(filterFunction, composeFunction);\n\t            }\n\t        });\n\t\n\t        return filterFunction;\n\t    },\n\t\n\t    dm_makeHeaderRow: function dm_makeHeaderRow() {\n\t\n\t        var headers = ['Partition', 'Site'],\n\t            doCI = this.state.showIntervals;\n\t\n\t        if (doCI) {\n\t            var secondRow = ['', ''];\n\t\n\t            _.each(this.props.headers, function (value) {\n\t                headers.push({ value: value[0], abbr: value[1], span: 4, style: { textAlign: 'center' } });\n\t                secondRow.push('MLE');\n\t                secondRow.push('Med');\n\t                secondRow.push('2.5%');\n\t                secondRow.push('97.5%');\n\t            });\n\t            return [headers, secondRow];\n\t        } else {\n\t\n\t            _.each(this.props.headers, function (value) {\n\t                headers.push({ value: value[0], abbr: value[1] });\n\t            });\n\t        }\n\t        return headers;\n\t    },\n\t\n\t    dm_makeDataRows: function dm_makeDataRows(filter) {\n\t\n\t        var rows = [],\n\t            partitionCount = datamonkey.helpers.countPartitionsJSON(this.props.partitionSites),\n\t            partitionIndex = 0,\n\t            self = this,\n\t            doCI = this.state.showIntervals;\n\t\n\t        while (partitionIndex < partitionCount) {\n\t\n\t            _.each(self.props.partitionSites[partitionIndex].coverage[0], function (site, index) {\n\t                var siteData = self.props.mle[partitionIndex][self.state.ambigHandling][index];\n\t                if (!filter || filter(partitionIndex, index, site, siteData)) {\n\t                    var thisRow = [partitionIndex + 1, site + 1];\n\t                    //secondRow = doCI ? ['',''] : null;\n\t\n\t                    _.each(siteData, function (estimate, colIndex) {\n\t\n\t                        if (doCI) {\n\t                            thisRow.push({ value: estimate, format: self.dm_formatNumber });\n\t                            thisRow.push({ value: self.props.sample25[partitionIndex][self.state.ambigHandling][index][colIndex], format: self.dm_formatNumberShort });\n\t                            thisRow.push({ value: self.props.sampleMedian[partitionIndex][self.state.ambigHandling][index][colIndex], format: self.dm_formatNumberShort });\n\t                            thisRow.push({ value: self.props.sample975[partitionIndex][self.state.ambigHandling][index][colIndex], format: self.dm_formatNumberShort });\n\t\n\t                            /*thisRow.push ({value: [estimate, self.props.sample25[partitionIndex][self.state.ambigHandling][index][colIndex],\n\t                                                             self.props.sampleMedian[partitionIndex][self.state.ambigHandling][index][colIndex],\n\t                                                             self.props.sample975[partitionIndex][self.state.ambigHandling][index][colIndex]],\n\t                                           format: self.dm_formatInterval,\n\t                                            }); */\n\t                        } else {\n\t                            thisRow.push({ value: estimate, format: self.dm_formatNumber });\n\t                        }\n\t                    });\n\t                    rows.push(thisRow);\n\t                    //if (secondRow) {\n\t                    //    rows.push (secondRow);\n\t                    //}\n\t                }\n\t            });\n\t\n\t            partitionIndex++;\n\t        }\n\t\n\t        return rows;\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        var self = this;\n\t\n\t        var result = React.createElement(\n\t            'div',\n\t            { className: 'table-responsive' },\n\t            React.createElement(\n\t                'form',\n\t                { className: 'form-inline navbar-form navbar-left' },\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'form-group' },\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'btn-group' },\n\t                        React.createElement(\n\t                            'button',\n\t                            { className: 'btn btn-default btn-sm dropdown-toggle', type: 'button', 'data-toggle': 'dropdown', 'aria-haspopup': 'true', 'aria-expanded': 'false' },\n\t                            'Display Options ',\n\t                            React.createElement('span', { className: 'caret' })\n\t                        ),\n\t                        React.createElement(\n\t                            'ul',\n\t                            { className: 'dropdown-menu' },\n\t                            React.createElement(\n\t                                'li',\n\t                                { key: 'variable' },\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'checkbox' },\n\t                                    React.createElement('input', { type: 'checkbox', checked: self.state.filters[\"variable\"] == \"on\" ? true : false, defaultChecked: self.state.filters[\"variable\"] == \"on\" ? true : false, onChange: self.dm_toggleVariableFilter }),\n\t                                    ' Variable sites only'\n\t                                )\n\t                            ),\n\t                            self.state.hasCI ? React.createElement(\n\t                                'li',\n\t                                { key: 'intervals' },\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'checkbox' },\n\t                                    React.createElement('input', { type: 'checkbox', checked: self.state.showIntervals, defaultChecked: self.state.showIntervals, onChange: self.dm_toggleIntervals }),\n\t                                    ' Show sampling confidence intervals'\n\t                                )\n\t                            ) : null\n\t                        )\n\t                    ),\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'input-group' },\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-addon' },\n\t                            'Ambiguities are '\n\t                        ),\n\t                        React.createElement(\n\t                            'select',\n\t                            { className: 'form-control input-sm', defaultValue: self.state.ambigHandling, onChange: self.dm_changeAmbig },\n\t                            _.map(this.state.ambigOptions, function (value, index) {\n\t                                return React.createElement(\n\t                                    'option',\n\t                                    { key: index, value: value },\n\t                                    value\n\t                                );\n\t                            })\n\t                        )\n\t                    )\n\t                )\n\t            ),\n\t            React.createElement(DatamonkeyTable, { headerData: this.dm_makeHeaderRow(), bodyData: this.dm_makeDataRows(this.dm_makeFilterFunction()) })\n\t        );\n\t\n\t        return result;\n\t    }\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(41)))\n\n/***/ },\n\n/***/ 202:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_, d3) {'use strict';\n\t\n\tvar React = __webpack_require__(44);\n\tvar datamonkey = __webpack_require__(37);\n\t\n\tvar SLACBanner = React.createClass({\n\t  displayName: 'SLACBanner',\n\t\n\t\n\t  dm_countSites: function dm_countSites(json, cutoff) {\n\t\n\t    var result = { all: 0,\n\t      positive: 0,\n\t      negative: 0 };\n\t\n\t    result.all = datamonkey.helpers.countSitesFromPartitionsJSON(json);\n\t\n\t    result.positive = datamonkey.helpers.sum(json[\"MLE\"][\"content\"], function (partition) {\n\t      return _.reduce(partition[\"by-site\"][\"RESOLVED\"], function (sum, row) {\n\t        return sum + (row[8] <= cutoff ? 1 : 0);\n\t      }, 0);\n\t    });\n\t\n\t    result.negative = datamonkey.helpers.sum(json[\"MLE\"][\"content\"], function (partition) {\n\t      return _.reduce(partition[\"by-site\"][\"RESOLVED\"], function (sum, row) {\n\t        return sum + (row[9] <= cutoff ? 1 : 0);\n\t      }, 0);\n\t    });\n\t\n\t    return result;\n\t  },\n\t\n\t  dm_computeState: function dm_computeState(state, pvalue) {\n\t    return {\n\t      sites: this.dm_countSites(state, pvalue)\n\t    };\n\t  },\n\t\n\t  dm_formatP: d3.format(\".3f\"),\n\t\n\t  getInitialState: function getInitialState() {\n\t    return this.dm_computeState(this.props.analysis_results, this.props.pValue);\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    this.setState(this.dm_computeState(nextProps.analysis_results, nextProps.pValue));\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'panel panel-primary' },\n\t      React.createElement(\n\t        'div',\n\t        { className: 'panel-heading' },\n\t        React.createElement(\n\t          'h3',\n\t          { className: 'panel-title' },\n\t          React.createElement(\n\t            'abbr',\n\t            { title: 'Single Likelihood Ancestor Counting' },\n\t            'SLAC'\n\t          ),\n\t          ' analysis summary'\n\t        )\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'panel-body' },\n\t        React.createElement(\n\t          'span',\n\t          { className: 'lead' },\n\t          'Evidence',\n\t          React.createElement(\n\t            'sup',\n\t            null,\n\t            '\\u2020'\n\t          ),\n\t          ' of pervasive ',\n\t          React.createElement(\n\t            'span',\n\t            { className: 'hyphy-red' },\n\t            'diversifying'\n\t          ),\n\t          ' / ',\n\t          React.createElement(\n\t            'span',\n\t            { className: 'hyphy-navy' },\n\t            'purifying'\n\t          ),\n\t          ' selection was found at',\n\t          React.createElement(\n\t            'strong',\n\t            { className: 'hyphy-red' },\n\t            ' ',\n\t            this.state.sites.positive\n\t          ),\n\t          ' / ',\n\t          React.createElement(\n\t            'strong',\n\t            { className: 'hyphy-navy' },\n\t            this.state.sites.negative\n\t          ),\n\t          ' sites among ',\n\t          this.state.sites.all,\n\t          ' tested sites'\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { style: { marginBottom: '0em' } },\n\t          React.createElement(\n\t            'small',\n\t            null,\n\t            React.createElement(\n\t              'sup',\n\t              null,\n\t              '\\u2020'\n\t            ),\n\t            'Extended binomial test, p \\u2264 ',\n\t            this.dm_formatP(this.props.pValue),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'dropdown hidden-print', style: { display: 'inline', marginLeft: '0.25em' } },\n\t              React.createElement(\n\t                'button',\n\t                { id: 'dm.pvalue.slider', type: 'button', className: 'btn btn-primary btn-xs dropdown-toggle', 'data-toggle': 'dropdown', 'aria-haspopup': 'true', 'aria-expanded': 'false' },\n\t                React.createElement('span', { className: 'caret' })\n\t              ),\n\t              React.createElement(\n\t                'ul',\n\t                { className: 'dropdown-menu', 'aria-labelledby': 'dm.pvalue.slider' },\n\t                React.createElement(\n\t                  'li',\n\t                  null,\n\t                  React.createElement(\n\t                    'a',\n\t                    { href: '#' },\n\t                    React.createElement('input', { type: 'range', min: '0', max: '1', value: this.props.pValue, step: '0.01', onChange: this.props.pAdjuster })\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'emph',\n\t              null,\n\t              ' not'\n\t            ),\n\t            ' corrected for multiple testing; ambiguous characters resolved to minimize substitution counts.',\n\t            React.createElement('br', null),\n\t            React.createElement('i', { className: 'fa fa-exclamation-circle' }),\n\t            ' Please cite ',\n\t            React.createElement(\n\t              'a',\n\t              { href: 'http://www.ncbi.nlm.nih.gov/pubmed/15703242', target: '_blank' },\n\t              'PMID 15703242'\n\t            ),\n\t            ' if you use this result in a publication, presentation, or other scientific work.'\n\t          )\n\t        )\n\t      )\n\t    );\n\t  }\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41), __webpack_require__(38)))\n\n/***/ },\n\n/***/ 203:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {'use strict';\n\t\n\tvar _absrel_summary = __webpack_require__(204);\n\t\n\tvar _model_fits = __webpack_require__(205);\n\t\n\tvar _tree_summary = __webpack_require__(206);\n\t\n\tvar _tree = __webpack_require__(207);\n\t\n\tvar _branch_table = __webpack_require__(209);\n\t\n\tvar React = __webpack_require__(44),\n\t    ReactDOM = __webpack_require__(211);\n\t\n\tvar datamonkey = __webpack_require__(37),\n\t    _ = __webpack_require__(41),\n\t    busted = __webpack_require__(212);\n\t\n\t__webpack_require__(208);\n\t__webpack_require__(219);\n\t\n\t\n\tvar React = __webpack_require__(44);\n\t\n\tvar BSREL = React.createClass({\n\t  displayName: 'BSREL',\n\t\n\t\n\t  float_format: d3.format(\".2f\"),\n\t\n\t  loadFromServer: function loadFromServer() {\n\t\n\t    var self = this;\n\t    d3.json(this.props.url, function (data) {\n\t\n\t      data[\"fits\"][\"MG94\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"MG94\");\n\t      data[\"fits\"][\"Full model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Full model\");\n\t\n\t      // GH-#18 Add omega annotation tag\n\t      data[\"fits\"][\"MG94\"][\"annotation-tag\"] = \"ω\";\n\t      data[\"fits\"][\"Full model\"][\"annotation-tag\"] = \"ω\";\n\t\n\t      var annotations = data[\"fits\"][\"Full model\"][\"branch-annotations\"],\n\t          json = data,\n\t          pmid = data[\"PMID\"],\n\t          test_results = data[\"test results\"];\n\t\n\t      self.setState({\n\t        annotations: annotations,\n\t        json: json,\n\t        pmid: pmid,\n\t        test_results: test_results\n\t      });\n\t    });\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t\n\t    var edgeColorizer = function edgeColorizer(element, data) {\n\t\n\t      var self = this;\n\t\n\t      var svg = d3.select(\"#tree_container svg\"),\n\t          svg_defs = d3.select(\".phylotree-definitions\");\n\t\n\t      if (svg_defs.empty()) {\n\t        svg_defs = svg.append(\"defs\").attr(\"class\", \"phylotree-definitions\");\n\t      }\n\t\n\t      // clear existing linearGradients\n\t\n\t      var scaling_exponent = 1.0 / 3,\n\t          omega_format = d3.format(\".3r\"),\n\t          prop_format = d3.format(\".2p\"),\n\t          fit_format = d3.format(\".2f\"),\n\t          p_value_format = d3.format(\".4f\");\n\t\n\t      self.omega_color = d3.scale.pow().exponent(scaling_exponent).domain([0, 0.25, 1, 5, 10]).range(self.options()[\"color-fill\"] ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"] : [\"#6e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"]).clamp(true);\n\t\n\t      var createBranchGradient = function createBranchGradient(node) {\n\t\n\t        function generateGradient(svg_defs, grad_id, annotations, already_cumulative) {\n\t\n\t          var current_weight = 0;\n\t          var this_grad = svg_defs.append(\"linearGradient\").attr(\"id\", grad_id);\n\t\n\t          annotations.forEach(function (d, i) {\n\t\n\t            if (d.prop) {\n\t              var new_weight = current_weight + d.prop;\n\t              this_grad.append(\"stop\").attr(\"offset\", \"\" + current_weight * 100 + \"%\").style(\"stop-color\", self.omega_color(d.omega));\n\t              this_grad.append(\"stop\").attr(\"offset\", \"\" + new_weight * 100 + \"%\").style(\"stop-color\", self.omega_color(d.omega));\n\t              current_weight = new_weight;\n\t            }\n\t          });\n\t        }\n\t\n\t        // Create svg definitions\n\t        if (self.gradient_count == undefined) {\n\t          self.gradient_count = 0;\n\t        }\n\t\n\t        if (node.annotations) {\n\t\n\t          if (node.annotations.length == 1) {\n\t            node['color'] = self.omega_color(node.annotations[0][\"omega\"]);\n\t          } else {\n\t            self.gradient_count++;\n\t            var grad_id = \"branch_gradient_\" + self.gradient_count;\n\t            generateGradient(svg_defs, grad_id, node.annotations.omegas);\n\t            node['grad'] = grad_id;\n\t          }\n\t        }\n\t      };\n\t\n\t      var annotations = data.target.annotations,\n\t          alpha_level = 0.05,\n\t          tooltip = \"<b>\" + data.target.name + \"</b>\",\n\t          reference_omega_weight = prop_format(0),\n\t          distro = '';\n\t\n\t      if (annotations) {\n\t\n\t        reference_omega_weight = annotations.omegas[0].prop;\n\t\n\t        annotations.omegas.forEach(function (d, i) {\n\t\n\t          var omega_value = d.omega > 1e20 ? \"&infin;\" : omega_format(d.omega),\n\t              omega_weight = prop_format(d.prop);\n\t\n\t          tooltip += \"<br/>&omega;<sub>\" + (i + 1) + \"</sub> = \" + omega_value + \" (\" + omega_weight + \")\";\n\t\n\t          if (i) {\n\t            distro += \"<br/>\";\n\t          }\n\t\n\t          distro += \"&omega;<sub>\" + (i + 1) + \"</sub> = \" + omega_value + \" (\" + omega_weight + \")\";\n\t        });\n\t\n\t        tooltip += \"<br/><i>p = \" + omega_format(annotations[\"p\"]) + \"</i>\";\n\t\n\t        $(element[0][0]).tooltip({\n\t          'title': tooltip,\n\t          'html': true,\n\t          'trigger': 'hover',\n\t          'container': 'body',\n\t          'placement': 'auto'\n\t        });\n\t\n\t        createBranchGradient(data.target);\n\t\n\t        if (data.target.grad) {\n\t          element.style('stroke', 'url(#' + data.target.grad + ')');\n\t        } else {\n\t          element.style('stroke', data.target.color);\n\t        }\n\t\n\t        element.style('stroke-width', annotations[\"p\"] <= alpha_level ? '12' : '5').style('stroke-linejoin', 'round').style('stroke-linecap', 'round');\n\t      }\n\t    };\n\t\n\t    return {\n\t      edgeColorizer: edgeColorizer\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    var tree_settings = {\n\t      'omegaPlot': {},\n\t      'tree-options': {\n\t        /* value arrays have the following meaning\n\t            [0] - the value of the attribute\n\t            [1] - does the change in attribute value trigger tree re-layout?\n\t        */\n\t        'hyphy-tree-model': ['Full model', true],\n\t        'hyphy-tree-highlight': [null, false],\n\t        'hyphy-tree-branch-lengths': [true, true],\n\t        'hyphy-tree-hide-legend': [false, true],\n\t        'hyphy-tree-fill-color': [false, true]\n\t      },\n\t      'suppress-tree-render': false,\n\t      'chart-append-html': true,\n\t      'edgeColorizer': this.props.edgeColorizer\n\t    };\n\t\n\t    return {\n\t      annotations: null,\n\t      json: null,\n\t      pmid: null,\n\t      settings: tree_settings,\n\t      test_results: null,\n\t      tree: null\n\t    };\n\t  },\n\t\n\t  componentWillMount: function componentWillMount() {\n\t    this.loadFromServer();\n\t    this.setEvents();\n\t  },\n\t\n\t  setEvents: function setEvents() {\n\t\n\t    var self = this;\n\t\n\t    $(\"#datamonkey-absrel-json-file\").on(\"change\", function (e) {\n\t      var files = e.target.files; // FileList object\n\t\n\t      if (files.length == 1) {\n\t        var f = files[0];\n\t        var reader = new FileReader();\n\t\n\t        reader.onload = function (theFile) {\n\t          return function (e) {\n\t            var data = JSON.parse(this.result);\n\t            data[\"fits\"][\"MG94\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"MG94\");\n\t            data[\"fits\"][\"Full model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Full model\");\n\t\n\t            var annotations = data[\"fits\"][\"Full model\"][\"branch-annotations\"],\n\t                json = data,\n\t                pmid = data[\"PMID\"],\n\t                test_results = data[\"test results\"];\n\t\n\t            self.setState({\n\t              annotations: annotations,\n\t              json: json,\n\t              pmid: pmid,\n\t              test_results: test_results\n\t            });\n\t          };\n\t        }(f);\n\t        reader.readAsText(f);\n\t      }\n\t\n\t      $(\"#datamonkey-absrel-toggle-here\").dropdown(\"toggle\");\n\t      e.preventDefault();\n\t    });\n\t  },\n\t\n\t  formatBranchAnnotations: function formatBranchAnnotations(json, key) {\n\t\n\t    var initial_branch_annotations = json[\"fits\"][key][\"branch-annotations\"];\n\t\n\t    if (!initial_branch_annotations) {\n\t      initial_branch_annotations = json[\"fits\"][key][\"rate distributions\"];\n\t    }\n\t\n\t    // Iterate over objects\n\t    var branch_annotations = _.mapObject(initial_branch_annotations, function (val, key) {\n\t\n\t      var vals = [];\n\t      try {\n\t        vals = JSON.parse(val);\n\t      } catch (e) {\n\t        vals = val;\n\t      }\n\t\n\t      var omegas = { \"omegas\": _.map(vals, function (d) {\n\t          return _.object([\"omega\", \"prop\"], d);\n\t        }) };\n\t      var test_results = _.clone(json[\"test results\"][key]);\n\t      _.extend(test_results, omegas);\n\t      return test_results;\n\t    });\n\t\n\t    return branch_annotations;\n\t  },\n\t\n\t  initialize: function initialize() {\n\t\n\t    var model_fits_id = \"#hyphy-model-fits\",\n\t        omega_plots_id = \"#hyphy-omega-plots\",\n\t        summary_id = \"#hyphy-relax-summary\",\n\t        tree_id = \"#tree-tab\";\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'tab-content' },\n\t      React.createElement(\n\t        'div',\n\t        { className: 'tab-pane active', id: 'summary-tab' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { id: 'summary-div', className: 'col-md-12' },\n\t            React.createElement(_absrel_summary.BSRELSummary, { test_results: self.state.test_results,\n\t              pmid: self.state.pmid })\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { id: 'hyphy-tree-summary', className: 'col-md-6' },\n\t            React.createElement(_tree_summary.TreeSummary, { json: self.state.json })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { id: 'hyphy-model-fits', className: 'col-md-6' },\n\t            React.createElement(_model_fits.ModelFits, { json: self.state.json })\n\t          )\n\t        )\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'tab-pane', id: 'tree-tab' },\n\t        React.createElement(_tree.Tree, { json: self.state.json,\n\t          settings: self.state.settings })\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'tab-pane', id: 'table_tab' },\n\t        React.createElement(_branch_table.BranchTable, { tree: self.state.tree,\n\t          test_results: self.state.test_results,\n\t          annotations: self.state.annotations })\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_absrel(url, element) {\n\t  React.render(React.createElement(BSREL, { url: url }), document.getElementById(element));\n\t}\n\t\n\tmodule.exports = render_absrel;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 204:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _) {'use strict';\n\t\n\tvar React = __webpack_require__(44);\n\t\n\tvar BSRELSummary = React.createClass({\n\t  displayName: 'BSRELSummary',\n\t\n\t\n\t  float_format: d3.format(\".2f\"),\n\t\n\t  countBranchesTested: function countBranchesTested(branches_tested) {\n\t\n\t    if (branches_tested) {\n\t      return branches_tested.split(';').length;\n\t    } else {\n\t      return 0;\n\t    }\n\t  },\n\t\n\t  getBranchesWithEvidence: function getBranchesWithEvidence(test_results) {\n\t\n\t    var self = this;\n\t    return _.filter(test_results, function (d) {\n\t      return d.p <= 0.05;\n\t    }).length;\n\t  },\n\t\n\t  getTestBranches: function getTestBranches(test_results) {\n\t\n\t    var self = this;\n\t    return _.filter(test_results, function (d) {\n\t      return d.tested > 0;\n\t    }).length;\n\t  },\n\t\n\t  getTotalBranches: function getTotalBranches(test_results) {\n\t\n\t    var self = this;\n\t    return _.keys(test_results).length;\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    var self = this;\n\t\n\t    return {\n\t      branches_with_evidence: this.getBranchesWithEvidence(self.props.test_results),\n\t      test_branches: this.getTestBranches(self.props.test_results),\n\t      total_branches: this.getTotalBranches(self.props.test_results)\n\t    };\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t    this.setState({\n\t      branches_with_evidence: this.getBranchesWithEvidence(nextProps.test_results),\n\t      test_branches: this.getTestBranches(nextProps.test_results),\n\t      total_branches: this.getTotalBranches(nextProps.test_results)\n\t    });\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t\n\t    return React.createElement(\n\t      'ul',\n\t      { className: 'list-group' },\n\t      React.createElement(\n\t        'li',\n\t        { className: 'list-group-item list-group-item-info' },\n\t        React.createElement(\n\t          'h3',\n\t          { className: 'list-group-item-heading' },\n\t          React.createElement('i', { className: 'fa fa-list' }),\n\t          React.createElement(\n\t            'span',\n\t            { id: 'summary-method-name' },\n\t            'Adaptive branch site REL'\n\t          ),\n\t          ' summary'\n\t        ),\n\t        React.createElement(\n\t          'p',\n\t          { className: 'list-group-item-text lead' },\n\t          'Evidence',\n\t          React.createElement(\n\t            'sup',\n\t            null,\n\t            '\\u2020'\n\t          ),\n\t          ' of episodic diversifying selection was found on',\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            ' ',\n\t            self.state.branches_with_evidence\n\t          ),\n\t          ' out of',\n\t          React.createElement(\n\t            'span',\n\t            null,\n\t            ' ',\n\t            self.state.test_branches\n\t          ),\n\t          ' tested branches (',\n\t          React.createElement(\n\t            'span',\n\t            null,\n\t            self.state.total_branches\n\t          ),\n\t          ' total branches).'\n\t        ),\n\t        React.createElement(\n\t          'p',\n\t          null,\n\t          React.createElement(\n\t            'small',\n\t            null,\n\t            React.createElement(\n\t              'sup',\n\t              null,\n\t              '\\u2020'\n\t            ),\n\t            React.createElement(\n\t              'abbr',\n\t              { title: 'Likelihood Ratio Test' },\n\t              'LRT'\n\t            ),\n\t            ' p \\u2264 0.05, corrected for multiple testing.'\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'p',\n\t          null,\n\t          React.createElement(\n\t            'small',\n\t            null,\n\t            'Please cite ',\n\t            React.createElement(\n\t              'a',\n\t              { href: 'http://www.ncbi.nlm.nih.gov/pubmed/25697341', id: 'summary-pmid', target: '_blank' },\n\t              'PMID 25697341'\n\t            ),\n\t            ' if you use this result in a publication, presentation, or other scientific work.'\n\t          )\n\t        )\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_absrel_summary(test_results, pmid, element) {\n\t  React.render(React.createElement(BSRELSummary, { test_results: test_results, pmid: pmid }), document.getElementById(element));\n\t}\n\t\n\tmodule.exports.BSRELSummary = BSRELSummary;\n\tmodule.exports.render_absrel_summary = render_absrel_summary;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(41)))\n\n/***/ },\n\n/***/ 205:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _, $) {\"use strict\";\n\t\n\tvar React = __webpack_require__(44);\n\t\n\tvar ModelFits = React.createClass({\n\t  displayName: \"ModelFits\",\n\t\n\t\n\t  getInitialState: function getInitialState() {\n\t    var table_row_data = this.getModelRows(this.props.json),\n\t        table_columns = this.getModelColumns(table_row_data);\n\t\n\t    return {\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns\n\t    };\n\t  },\n\t\n\t  formatRuntime: function formatRuntime(seconds) {\n\t    var duration_string = \"\",\n\t        seconds = parseFloat(seconds);\n\t\n\t    var split_array = [Math.floor(seconds / (24 * 3600)), Math.floor(seconds / 3600) % 24, Math.floor(seconds / 60) % 60, seconds % 60],\n\t        quals = [\"d.\", \"hrs.\", \"min.\", \"sec.\"];\n\t\n\t    split_array.forEach(function (d, i) {\n\t      if (d) {\n\t        duration_string += \" \" + d + \" \" + quals[i];\n\t      }\n\t    });\n\t\n\t    return duration_string;\n\t  },\n\t\n\t  getLogLikelihood: function getLogLikelihood(this_model) {\n\t    return d3.format(\".2f\")(this_model['log-likelihood']);\n\t  },\n\t\n\t  getAIC: function getAIC(this_model) {\n\t    return d3.format(\".2f\")(this_model['AIC-c']);\n\t  },\n\t\n\t  getNumParameters: function getNumParameters(this_model) {\n\t    return this_model['parameters'];\n\t  },\n\t\n\t  getBranchLengths: function getBranchLengths(this_model) {\n\t\n\t    if (this_model[\"tree length\"]) {\n\t      return d3.format(\".2f\")(this_model[\"tree length\"]);\n\t    } else {\n\t      return d3.format(\".2f\")(d3.values(this_model[\"branch-lengths\"]).reduce(function (p, c) {\n\t        return p + c;\n\t      }, 0));\n\t    }\n\t  },\n\t\n\t  getRuntime: function getRuntime(this_model) {\n\t    //return this.formatRuntime(this_model['runtime']);\n\t    return this.formatRuntime(this_model['runtime']);\n\t  },\n\t\n\t  getDistributions: function getDistributions(m, this_model) {\n\t\n\t    var omega_distributions = {};\n\t    omega_distributions[m] = {};\n\t\n\t    var omega_format = d3.format(\".3r\"),\n\t        prop_format = d3.format(\".2p\"),\n\t        p_value_format = d3.format(\".4f\");\n\t\n\t    var distributions = [];\n\t\n\t    for (var d in this_model[\"rate-distributions\"]) {\n\t\n\t      var this_distro = this_model[\"rate-distributions\"][d];\n\t      var this_distro_entry = [d, \"\", \"\", \"\"];\n\t\n\t      omega_distributions[m][d] = this_distro.map(function (d) {\n\t        return {\n\t          'omega': d[0],\n\t          'weight': d[1]\n\t        };\n\t      });\n\t\n\t      for (var k = 0; k < this_distro.length; k++) {\n\t        this_distro_entry[k + 1] = omega_format(this_distro[k][0]) + \" (\" + prop_format(this_distro[k][1]) + \")\";\n\t      }\n\t\n\t      distributions.push(this_distro_entry);\n\t    }\n\t\n\t    distributions.sort(function (a, b) {\n\t      return a[0] < b[0] ? -1 : a[0] == b[0] ? 0 : 1;\n\t    });\n\t\n\t    return distributions;\n\t  },\n\t\n\t  getModelRows: function getModelRows(json) {\n\t\n\t    if (!json) {\n\t      return [];\n\t    }\n\t\n\t    var table_row_data = [];\n\t    var omega_format = d3.format(\".3r\");\n\t    var prop_format = d3.format(\".2p\");\n\t    var p_value_format = d3.format(\".4f\");\n\t\n\t    for (var m in json[\"fits\"]) {\n\t\n\t      var this_model_row = [],\n\t          this_model = json[\"fits\"][m];\n\t\n\t      this_model_row = [this_model['display-order'], \"\", m, this.getLogLikelihood(this_model), this.getNumParameters(this_model), this.getAIC(this_model), this.getRuntime(this_model), this.getBranchLengths(this_model)];\n\t\n\t      var distributions = this.getDistributions(m, this_model);\n\t\n\t      if (distributions.length) {\n\t\n\t        this_model_row = this_model_row.concat(distributions[0]);\n\t        this_model_row[1] = distributions[0][0];\n\t\n\t        table_row_data.push(this_model_row);\n\t\n\t        for (var d = 1; d < distributions.length; d++) {\n\t\n\t          var this_distro_entry = this_model_row.map(function (d, i) {\n\t            if (i) return \"\";\n\t            return d;\n\t          });\n\t\n\t          this_distro_entry[1] = distributions[d][0];\n\t\n\t          for (var k = this_distro_entry.length - 4; k < this_distro_entry.length; k++) {\n\t            this_distro_entry[k] = distributions[d][k - this_distro_entry.length + 4];\n\t          }\n\t\n\t          table_row_data.push(this_distro_entry);\n\t        }\n\t      } else {\n\t        table_row_data.push(this_model_row);\n\t      }\n\t    }\n\t\n\t    table_row_data.sort(function (a, b) {\n\t      if (a[0] == b[0]) {\n\t        return a[1] < b[1] ? -1 : a[1] == b[1] ? 0 : 1;\n\t      }\n\t      return a[0] - b[0];\n\t    });\n\t\n\t    table_row_data = table_row_data.map(function (r) {\n\t      return r.slice(2);\n\t    });\n\t\n\t    return table_row_data;\n\t  },\n\t\n\t  getModelColumns: function getModelColumns(table_row_data) {\n\t\n\t    var model_header = '<th>Model</th>',\n\t        logl_header = '<th><em> log </em>L</th>',\n\t        num_params_header = '<th><abbr title=\"Number of estimated model parameters\"># par.</abbr></th>',\n\t        aic_header = '<th><abbr title=\"Small Sample AIC\">AIC<sub>c</sub></abbr></th>',\n\t        runtime_header = '<th>Time to fit</th>',\n\t        branch_lengths_header = '<th><abbr title=\"Total tree length, expected substitutions/site\">L<sub>tree</sub></abbr></th>',\n\t        branch_set_header = '<th>Branch set</th>',\n\t        omega_1_header = '<th>&omega;<sub>1</sub></th>',\n\t        omega_2_header = '<th>&omega;<sub>2</sub></th>',\n\t        omega_3_header = '<th>&omega;<sub>3</sub></th>';\n\t\n\t    // inspect table_row_data and return header\n\t    var all_columns = [model_header, logl_header, num_params_header, aic_header, runtime_header, branch_lengths_header, branch_set_header, omega_1_header, omega_2_header, omega_3_header];\n\t\n\t    // validate each table row with its associated header\n\t    if (table_row_data.length == 0) {\n\t      return [];\n\t    }\n\t\n\t    // trim columns to length of table_row_data\n\t    var column_headers = _.take(all_columns, table_row_data[0].length);\n\t\n\t    // remove all columns that have 0, null, or undefined rows\n\t    var items = d3.transpose(table_row_data);\n\t\n\t    return column_headers;\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate() {\n\t\n\t    var model_columns = d3.select('#summary-model-header1');\n\t    model_columns = model_columns.selectAll(\"th\").data(this.state.table_columns);\n\t    model_columns.enter().append(\"th\");\n\t    model_columns.html(function (d) {\n\t      return d;\n\t    });\n\t\n\t    var model_rows = d3.select('#summary-model-table').selectAll(\"tr\").data(this.state.table_row_data);\n\t    model_rows.enter().append('tr');\n\t    model_rows.exit().remove();\n\t    model_rows = model_rows.selectAll(\"td\").data(function (d) {\n\t      return d;\n\t    });\n\t    model_rows.enter().append(\"td\");\n\t    model_rows.html(function (d) {\n\t      return d;\n\t    });\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t    var table_row_data = this.getModelRows(nextProps.json),\n\t        table_columns = this.getModelColumns(table_row_data);\n\t\n\t    this.setState({\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns\n\t    });\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    return React.createElement(\n\t      \"div\",\n\t      { className: \"col-lg-12\" },\n\t      React.createElement(\n\t        \"ul\",\n\t        { className: \"list-group\" },\n\t        React.createElement(\n\t          \"li\",\n\t          { className: \"list-group-item\" },\n\t          React.createElement(\n\t            \"h4\",\n\t            { className: \"list-group-item-heading\" },\n\t            React.createElement(\"i\", { className: \"fa fa-cubes\", styleFormat: \"margin-right: 10px\" }),\n\t            \"Model fits\"\n\t          ),\n\t          React.createElement(\n\t            \"table\",\n\t            { className: \"table table-hover table-condensed list-group-item-text\", styleFormat: \"margin-top:0.5em;\" },\n\t            React.createElement(\"thead\", { id: \"summary-model-header1\" }),\n\t            React.createElement(\"tbody\", { id: \"summary-model-table\" })\n\t          )\n\t        )\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_model_fits(json, element) {\n\t  React.render(React.createElement(ModelFits, { json: json }), $(element)[0]);\n\t}\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction rerender_model_fits(json, element) {\n\t  $(element).empty();\n\t  render_model_fits(json, element);\n\t}\n\t\n\tmodule.exports.ModelFits = ModelFits;\n\tmodule.exports.render_model_fits = render_model_fits;\n\tmodule.exports.rerender_model_fits = rerender_model_fits;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(41), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 206:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {'use strict';\n\t\n\tvar React = __webpack_require__(44),\n\t    _ = __webpack_require__(41);\n\t\n\tvar TreeSummary = React.createClass({\n\t  displayName: 'TreeSummary',\n\t\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    var table_row_data = this.getSummaryRows(this.props.json),\n\t        table_columns = this.getTreeSummaryColumns(table_row_data);\n\t\n\t    return {\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns\n\t    };\n\t  },\n\t\n\t  getRateClasses: function getRateClasses(branch_annotations) {\n\t\n\t    // Get count of all rate classes\n\t    var all_branches = _.values(branch_annotations);\n\t\n\t    return _.countBy(all_branches, function (branch) {\n\t      return branch.omegas.length;\n\t    });\n\t  },\n\t\n\t  getBranchProportion: function getBranchProportion(rate_classes) {\n\t    var sum = _.reduce(_.values(rate_classes), function (memo, num) {\n\t      return memo + num;\n\t    });\n\t    return _.mapObject(rate_classes, function (val, key) {\n\t      return d3.format(\".2p\")(val / sum);\n\t    });\n\t  },\n\t\n\t  getBranchLengthProportion: function getBranchLengthProportion(rate_classes, branch_annotations, total_branch_length) {\n\t\n\t    var self = this;\n\t\n\t    // get branch lengths of each rate distribution\n\t    //return prop_format(d[2] / total_tree_length\n\t\n\t    // Get count of all rate classes\n\t    var branch_lengths = _.mapObject(rate_classes, function (d) {\n\t      return 0;\n\t    });\n\t\n\t    for (var key in branch_annotations) {\n\t      var node = self.tree.get_node_by_name(key);\n\t      branch_lengths[branch_annotations[key].omegas.length] += self.tree.branch_length()(node);\n\t    };\n\t\n\t    return _.mapObject(branch_lengths, function (val, key) {\n\t      return d3.format(\".2p\")(val / total_branch_length);\n\t    });\n\t  },\n\t\n\t  getNumUnderSelection: function getNumUnderSelection(rate_classes, branch_annotations, test_results) {\n\t\n\t    var num_under_selection = _.mapObject(rate_classes, function (d) {\n\t      return 0;\n\t    });\n\t\n\t    for (var key in branch_annotations) {\n\t      num_under_selection[branch_annotations[key].omegas.length] += test_results[key][\"p\"] <= 0.05;\n\t    };\n\t\n\t    return num_under_selection;\n\t  },\n\t\n\t  getSummaryRows: function getSummaryRows(json) {\n\t\n\t    var self = this;\n\t\n\t    // Will need to create a tree for each fits\n\t    var analysis_data = json;\n\t\n\t    if (!analysis_data) {\n\t      return [];\n\t    }\n\t\n\t    // Create an array of phylotrees from fits\n\t    var trees = _.map(analysis_data[\"fits\"], function (d) {\n\t      return d3.layout.phylotree(\"body\")(d[\"tree string\"]);\n\t    });\n\t    var tree = trees[0];\n\t\n\t    self.tree = tree;\n\t\n\t    //TODO : Do not hard code model here\n\t    var tree_length = analysis_data[\"fits\"][\"Full model\"][\"tree length\"];\n\t    var branch_annotations = analysis_data[\"fits\"][\"Full model\"][\"branch-annotations\"];\n\t    var test_results = analysis_data[\"test results\"];\n\t\n\t    var rate_classes = this.getRateClasses(branch_annotations),\n\t        proportions = this.getBranchProportion(rate_classes),\n\t        length_proportions = this.getBranchLengthProportion(rate_classes, branch_annotations, tree_length),\n\t        num_under_selection = this.getNumUnderSelection(rate_classes, branch_annotations, test_results);\n\t\n\t    // zip objects into matrix\n\t    var keys = _.keys(rate_classes);\n\t\n\t    var summary_rows = _.zip(keys, _.values(rate_classes), _.values(proportions), _.values(length_proportions), _.values(num_under_selection));\n\t\n\t    summary_rows.sort(function (a, b) {\n\t      if (a[0] == b[0]) {\n\t        return a[1] < b[1] ? -1 : a[1] == b[1] ? 0 : 1;\n\t      }\n\t      return a[0] - b[0];\n\t    });\n\t\n\t    return summary_rows;\n\t  },\n\t\n\t  getTreeSummaryColumns: function getTreeSummaryColumns(table_row_data) {\n\t\n\t    var omega_header = '<th>ω rate<br>classes</th>',\n\t        branch_num_header = '<th># of <br>branches</th>',\n\t        branch_prop_header = '<th>% of <br>branches</th>',\n\t        branch_prop_length_header = '<th>% of tree <br>length</th>',\n\t        under_selection_header = '<th># under <br>selection</th>';\n\t\n\t    // inspect table_row_data and return header\n\t    var all_columns = [omega_header, branch_num_header, branch_prop_header, branch_prop_length_header, under_selection_header];\n\t\n\t    // validate each table row with its associated header\n\t    if (table_row_data.length == 0) {\n\t      return [];\n\t    }\n\t\n\t    // trim columns to length of table_row_data\n\t    var column_headers = _.take(all_columns, table_row_data[0].length);\n\t\n\t    return column_headers;\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t    var table_row_data = this.getSummaryRows(nextProps.json),\n\t        table_columns = this.getTreeSummaryColumns(table_row_data);\n\t\n\t    this.setState({\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns\n\t    });\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate() {\n\t\n\t    d3.select('#summary-tree-header').empty();\n\t\n\t    var tree_summary_columns = d3.select('#summary-tree-header');\n\t\n\t    tree_summary_columns = tree_summary_columns.selectAll(\"th\").data(this.state.table_columns);\n\t    tree_summary_columns.enter().append(\"th\");\n\t    tree_summary_columns.html(function (d) {\n\t      return d;\n\t    });\n\t\n\t    var tree_summary_rows = d3.select('#summary-tree-table').selectAll(\"tr\").data(this.state.table_row_data);\n\t    tree_summary_rows.enter().append('tr');\n\t    tree_summary_rows.exit().remove();\n\t    tree_summary_rows = tree_summary_rows.selectAll(\"td\").data(function (d) {\n\t      return d;\n\t    });\n\t\n\t    tree_summary_rows.enter().append(\"td\");\n\t    tree_summary_rows.html(function (d) {\n\t      return d;\n\t    });\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    return React.createElement(\n\t      'ul',\n\t      { className: 'list-group' },\n\t      React.createElement(\n\t        'li',\n\t        { className: 'list-group-item' },\n\t        React.createElement(\n\t          'h4',\n\t          { className: 'list-group-item-heading' },\n\t          React.createElement('i', { className: 'fa fa-tree' }),\n\t          'Tree'\n\t        ),\n\t        React.createElement(\n\t          'table',\n\t          { className: 'table table-hover table-condensed list-group-item-text' },\n\t          React.createElement('thead', { id: 'summary-tree-header' }),\n\t          React.createElement('tbody', { id: 'summary-tree-table' })\n\t        )\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t//TODO\n\t//<caption>\n\t//<p className=\"list-group-item-text text-muted\">\n\t//    Total tree length under the branch-site model is <strong id=\"summary-tree-length\">2.30</strong> expected substitutions per nucleotide site, and <strong id=\"summary-tree-length-mg94\">1.74</strong> under the MG94 model.\n\t//</p>\n\t//</caption>\n\t\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_tree_summary(json, element) {\n\t  React.render(React.createElement(TreeSummary, { json: json }), $(element)[0]);\n\t}\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction rerender_tree_summary(tree, element) {\n\t  $(element).empty();\n\t  render_tree_summary(tree, element);\n\t}\n\t\n\tmodule.exports.TreeSummary = TreeSummary;\n\tmodule.exports.render_tree_summary = render_tree_summary;\n\tmodule.exports.rerender_tree_summary = rerender_tree_summary;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 207:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _, $) {'use strict';\n\t\n\tvar React = __webpack_require__(44);\n\tvar datamonkey = __webpack_require__(37);\n\t__webpack_require__(208);\n\t\n\tvar Tree = React.createClass({\n\t    displayName: 'Tree',\n\t\n\t\n\t    getInitialState: function getInitialState() {\n\t        return {\n\t            json: this.props.json,\n\t            settings: this.props.settings\n\t        };\n\t    },\n\t\n\t    sortNodes: function sortNodes(asc) {\n\t\n\t        var self = this;\n\t\n\t        self.tree.traverse_and_compute(function (n) {\n\t            var d = 1;\n\t            if (n.children && n.children.length) {\n\t                d += d3.max(n.children, function (d) {\n\t                    return d[\"count_depth\"];\n\t                });\n\t            }\n\t            n[\"count_depth\"] = d;\n\t        });\n\t\n\t        self.tree.resort_children(function (a, b) {\n\t            return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n\t        });\n\t    },\n\t\n\t    getBranchLengths: function getBranchLengths() {\n\t\n\t        var self = this;\n\t\n\t        if (!this.state.json) {\n\t            return [];\n\t        }\n\t\n\t        var branch_lengths = self.settings[\"tree-options\"][\"hyphy-tree-branch-lengths\"][0] ? this.state.json[\"fits\"][this.which_model][\"branch-lengths\"] : null;\n\t\n\t        if (!branch_lengths) {\n\t\n\t            var nodes = _.filter(self.tree.get_nodes(), function (d) {\n\t                return d.parent;\n\t            });\n\t\n\t            branch_lengths = _.object(_.map(nodes, function (d) {\n\t                return d.name;\n\t            }), _.map(nodes, function (d) {\n\t                return parseFloat(d.attribute);\n\t            }));\n\t        }\n\t\n\t        return branch_lengths;\n\t    },\n\t\n\t    assignBranchAnnotations: function assignBranchAnnotations() {\n\t        if (this.state.json && this.state.json[\"fits\"][this.which_model]) {\n\t            this.tree.assign_attributes(this.state.json[\"fits\"][this.which_model][\"branch-annotations\"]);\n\t        }\n\t    },\n\t\n\t    renderDiscreteLegendColorScheme: function renderDiscreteLegendColorScheme(svg_container) {\n\t\n\t        var self = this,\n\t            svg = self.svg;\n\t\n\t        var color_fill = self.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0] ? \"black\" : \"red\";\n\t\n\t        var margins = {\n\t            'bottom': 30,\n\t            'top': 15,\n\t            'left': 40,\n\t            'right': 2\n\t        };\n\t\n\t        d3.selectAll(\"#color-legend\").remove();\n\t\n\t        var dc_legend = svg.append(\"g\").attr(\"id\", \"color-legend\").attr(\"class\", \"dc-legend\").attr(\"transform\", \"translate(\" + margins[\"left\"] + \",\" + margins[\"top\"] + \")\");\n\t\n\t        var fg_item = dc_legend.append(\"g\").attr(\"class\", \"dc-legend-item\").attr(\"transform\", \"translate(0,0)\");\n\t\n\t        fg_item.append(\"rect\").attr(\"width\", \"13\").attr(\"height\", \"13\").attr(\"fill\", color_fill);\n\t\n\t        fg_item.append(\"text\").attr(\"x\", \"15\").attr(\"y\", \"11\").text(\"Foreground\");\n\t\n\t        var bg_item = dc_legend.append(\"g\").attr(\"class\", \"dc-legend-item\").attr(\"transform\", \"translate(0,18)\");\n\t\n\t        bg_item.append(\"rect\").attr(\"width\", \"13\").attr(\"height\", \"13\").attr(\"fill\", \"gray\");\n\t\n\t        bg_item.append(\"text\").attr(\"x\", \"15\").attr(\"y\", \"11\").text(\"Background\");\n\t    },\n\t\n\t    renderLegendColorScheme: function renderLegendColorScheme(svg_container, attr_name, do_not_render) {\n\t\n\t        var self = this;\n\t\n\t        var branch_annotations = this.state.json[\"fits\"][this.which_model][\"branch-annotations\"];\n\t\n\t        var svg = self.svg;\n\t\n\t        // clear existing linearGradients\n\t        d3.selectAll(\".legend-definitions\").selectAll(\"linearGradient\").remove();\n\t        d3.selectAll(\"#color-legend\").remove();\n\t\n\t        if (branch_annotations && !do_not_render) {\n\t            var bar_width = 70,\n\t                bar_height = 300,\n\t                margins = {\n\t                'bottom': 30,\n\t                'top': 15,\n\t                'left': 40,\n\t                'right': 2\n\t            };\n\t\n\t            var this_grad = svg.append(\"defs\").attr(\"class\", \"legend-definitions\").append(\"linearGradient\").attr(\"id\", \"_omega_bar\").attr(\"x1\", \"0%\").attr(\"y1\", \"0%\").attr(\"x2\", \"0%\").attr(\"y2\", \"100%\");\n\t\n\t            var omega_scale = d3.scale.pow().exponent(this.scaling_exponent).domain(d3.extent(self.omega_color.domain())).range([0, 1]),\n\t                axis_scale = d3.scale.pow().exponent(this.scaling_exponent).domain(d3.extent(self.omega_color.domain())).range([0, bar_height - margins['top'] - margins['bottom']]);\n\t\n\t            self.omega_color.domain().forEach(function (d) {\n\t                this_grad.append(\"stop\").attr(\"offset\", \"\" + omega_scale(d) * 100 + \"%\").style(\"stop-color\", self.omega_color(d));\n\t            });\n\t\n\t            var g_container = svg.append(\"g\").attr(\"id\", \"color-legend\").attr(\"transform\", \"translate(\" + margins[\"left\"] + \",\" + margins[\"top\"] + \")\");\n\t\n\t            g_container.append(\"rect\").attr(\"x\", 0).attr(\"width\", bar_width - margins['left'] - margins['right']).attr(\"y\", 0).attr(\"height\", bar_height - margins['top'] - margins['bottom']).style(\"fill\", \"url(#_omega_bar)\");\n\t\n\t            var draw_omega_bar = d3.svg.axis().scale(axis_scale).orient(\"left\").tickFormat(d3.format(\".1r\")).tickValues([0, 0.01, 0.1, 0.5, 1, 2, 5, 10]);\n\t\n\t            var scale_bar = g_container.append(\"g\");\n\t\n\t            scale_bar.style(\"font-size\", \"14\").attr(\"class\", \"hyphy-omega-bar\").call(draw_omega_bar);\n\t\n\t            scale_bar.selectAll(\"text\").style(\"text-anchor\", \"right\");\n\t\n\t            var _label = '';\n\t            var x_label = _label = scale_bar.append(\"g\").attr(\"class\", \"hyphy-omega-bar\");\n\t            x_label = x_label.selectAll(\"text\").data([attr_name]);\n\t            x_label.enter().append(\"text\");\n\t            x_label.text(function (d) {\n\t                return $('<textarea />').html(d).text();\n\t            }).attr(\"transform\", \"translate(\" + (bar_width - margins['left'] - margins['right']) * 0.5 + \",\" + (bar_height - margins['bottom']) + \")\").style(\"text-anchor\", \"middle\").style(\"font-size\", \"18\").attr(\"dx\", \"0.0em\").attr(\"dy\", \"0.1em\");\n\t        }\n\t    },\n\t\n\t    setHandlers: function setHandlers() {\n\t\n\t        var self = this;\n\t\n\t        $(\"#hyphy-error-hide\").on(\"click\", function (e) {\n\t            d3.select(\"#hyphy-error\").style(\"display\", \"none\");\n\t            e.preventDefault();\n\t        });\n\t\n\t        $(\".hyphy-tree-trigger\").on(\"click\", function (e) {\n\t\n\t            self.renderTree();\n\t        });\n\t\n\t        $(\".tree-tab-btn\").on('click', function (e) {\n\t            self.tree.placenodes().update();\n\t        });\n\t\n\t        $(\"#export-phylo-svg\").on('click', function (e) {\n\t            datamonkey.save_image(\"svg\", \"#tree_container\");\n\t        });\n\t\n\t        $(\"#export-phylo-png\").on('click', function (e) {\n\t            datamonkey.save_image(\"png\", \"#tree_container\");\n\t        });\n\t\n\t        $(\"#export-phylo-nwk\").on('click', function (e) {\n\t            var nwk = self.tree.get_newick(function () {});\n\t            var pom = document.createElement('a');\n\t            pom.setAttribute('href', 'data:text/octet-stream;charset=utf-8,' + encodeURIComponent(nwk));\n\t            pom.setAttribute('download', 'nwk.txt');\n\t            $(\"body\").append(pom);\n\t            pom.click();\n\t            pom.remove();\n\t        });\n\t    },\n\t\n\t    setTreeHandlers: function setTreeHandlers() {\n\t\n\t        var self = this;\n\t        var tree_object = self.tree;\n\t\n\t        $(\"[data-direction]\").on(\"click\", function (e) {\n\t            var which_function = $(this).data(\"direction\") == 'vertical' ? tree_object.spacing_x : tree_object.spacing_y;\n\t            which_function(which_function() + +$(this).data(\"amount\")).update();\n\t        });\n\t\n\t        $(\".phylotree-layout-mode\").on(\"change\", function (e) {\n\t            if ($(this).is(':checked')) {\n\t                if (tree_object.radial() != ($(this).data(\"mode\") == \"radial\")) {\n\t                    tree_object.radial(!tree_object.radial()).placenodes().update();\n\t                }\n\t            }\n\t        });\n\t\n\t        $(\".phylotree-align-toggler\").on(\"change\", function (e) {\n\t            if ($(this).is(':checked')) {\n\t                if (tree_object.align_tips($(this).data(\"align\") == \"right\")) {\n\t                    tree_object.placenodes().update();\n\t                }\n\t            }\n\t        });\n\t\n\t        $(\"#sort_original\").on(\"click\", function (e) {\n\t            tree_object.resort_children(function (a, b) {\n\t                return a[\"original_child_order\"] - b[\"original_child_order\"];\n\t            });\n\t\n\t            e.preventDefault();\n\t        });\n\t\n\t        $(\"#sort_ascending\").on(\"click\", function (e) {\n\t            self.sortNodes(true);\n\t            e.preventDefault();\n\t        });\n\t\n\t        $(\"#sort_descending\").on(\"click\", function (e) {\n\t            self.sortNodes(false);\n\t            e.preventDefault();\n\t        });\n\t    },\n\t\n\t    setPartitionList: function setPartitionList() {\n\t\n\t        var self = this;\n\t\n\t        // Check if partition list exists\n\t        if (!self.props.json[\"partition\"]) {\n\t            d3.select(\"#hyphy-tree-highlight-div\").style(\"display\", \"none\");\n\t            d3.select(\"#hyphy-tree-highlight\").style(\"display\", \"none\");\n\t            return;\n\t        }\n\t\n\t        // set tree partitions\n\t        self.tree.set_partitions(self.props.json[\"partition\"]);\n\t\n\t        var partition_list = d3.select(\"#hyphy-tree-highlight-branches\").selectAll(\"li\").data([['None']].concat(d3.keys(self.props.json[\"partition\"]).map(function (d) {\n\t            return [d];\n\t        }).sort()));\n\t\n\t        partition_list.enter().append(\"li\");\n\t        partition_list.exit().remove();\n\t        partition_list = partition_list.selectAll(\"a\").data(function (d) {\n\t            return d;\n\t        });\n\t\n\t        partition_list.enter().append(\"a\");\n\t        partition_list.attr(\"href\", \"#\").on(\"click\", function (d, i) {\n\t            d3.select(\"#hyphy-tree-highlight\").attr(\"value\", d);\n\t            self.renderTree();\n\t        });\n\t\n\t        // set default to passed setting\n\t        partition_list.text(function (d) {\n\t            if (d == \"RELAX.test\") {\n\t                this.click();\n\t            }\n\t            return d;\n\t        });\n\t    },\n\t\n\t    setModelList: function setModelList() {\n\t\n\t        var self = this;\n\t\n\t        if (!this.state.json) {\n\t            return [];\n\t        }\n\t\n\t        this.state.settings['suppress-tree-render'] = true;\n\t\n\t        var def_displayed = false;\n\t\n\t        var model_list = d3.select(\"#hyphy-tree-model-list\").selectAll(\"li\").data(d3.keys(this.state.json[\"fits\"]).map(function (d) {\n\t            return [d];\n\t        }).sort());\n\t\n\t        model_list.enter().append(\"li\");\n\t        model_list.exit().remove();\n\t        model_list = model_list.selectAll(\"a\").data(function (d) {\n\t            return d;\n\t        });\n\t\n\t        model_list.enter().append(\"a\");\n\t\n\t        model_list.attr(\"href\", \"#\").on(\"click\", function (d, i) {\n\t            d3.select(\"#hyphy-tree-model\").attr(\"value\", d);\n\t            self.renderTree();\n\t        });\n\t\n\t        model_list.text(function (d) {\n\t\n\t            if (d == \"General Descriptive\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            if (!def_displayed && d == \"Alternative\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            if (!def_displayed && d == \"Partitioned MG94xREV\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            if (!def_displayed && d == \"MG94\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            if (!def_displayed && d == \"Full model\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            return d;\n\t        });\n\t\n\t        this.settings['suppress-tree-render'] = false;\n\t    },\n\t\n\t    initialize: function initialize() {\n\t\n\t        var self = this;\n\t\n\t        this.settings = this.state.settings;\n\t\n\t        if (!this.settings) {\n\t            return null;\n\t        }\n\t\n\t        if (!this.state.json) {\n\t            return null;\n\t        }\n\t\n\t        $(\"#hyphy-tree-branch-lengths\").click();\n\t\n\t        this.scaling_exponent = 0.33;\n\t        this.omega_format = d3.format(\".3r\");\n\t        this.prop_format = d3.format(\".2p\");\n\t        this.fit_format = d3.format(\".2f\");\n\t        this.p_value_format = d3.format(\".4f\");\n\t\n\t        var json = this.state.json;\n\t        var analysis_data = json;\n\t\n\t        this.width = 800;\n\t        this.height = 600;\n\t\n\t        this.which_model = this.settings[\"tree-options\"][\"hyphy-tree-model\"][0];\n\t        this.legend_type = this.settings[\"hyphy-tree-legend-type\"];\n\t\n\t        this.setHandlers();\n\t        this.setModelList();\n\t        this.initializeTree();\n\t        this.setPartitionList();\n\t    },\n\t\n\t    initializeTree: function initializeTree() {\n\t\n\t        var self = this;\n\t\n\t        var analysis_data = self.state.json;\n\t\n\t        var width = this.width,\n\t            height = this.height,\n\t            alpha_level = 0.05,\n\t            branch_lengths = [];\n\t\n\t        if (!this.tree) {\n\t            this.tree = d3.layout.phylotree(\"body\").size([height, width]).separation(function (a, b) {\n\t                return 0;\n\t            });\n\t        }\n\t\n\t        this.setTreeHandlers();\n\t\n\t        // clear any existing svg\n\t        d3.select(\"#tree_container\").html(\"\");\n\t\n\t        this.svg = d3.select(\"#tree_container\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\t\n\t        this.tree.branch_name(null);\n\t        this.tree.node_span('equal');\n\t        this.tree.options({\n\t            'draw-size-bubbles': false,\n\t            'selectable': false,\n\t            'left-right-spacing': 'fit-to-size',\n\t            'left-offset': 100,\n\t            'color-fill': this.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0]\n\t        }, false);\n\t\n\t        this.assignBranchAnnotations();\n\t\n\t        self.omega_color = d3.scale.pow().exponent(this.scaling_exponent).domain([0, 0.25, 1, 5, 10]).range(this.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0] ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"] : [\"#5e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"]).clamp(true);\n\t\n\t        self.renderTree();\n\t\n\t        if (self.legend_type == 'discrete') {\n\t            self.renderDiscreteLegendColorScheme(\"tree_container\");\n\t        } else {\n\t            self.renderLegendColorScheme(\"tree_container\", analysis_data[\"fits\"][this.which_model][\"annotation-tag\"]);\n\t        }\n\t\n\t        if (this.settings.edgeColorizer) {\n\t            this.edgeColorizer = this.settings.edgeColorizer;\n\t        }\n\t\n\t        this.tree.style_edges(this.edgeColorizer);\n\t        this.tree.style_nodes(this.nodeColorizer);\n\t\n\t        this.tree.spacing_x(30, true);\n\t        this.tree.layout();\n\t        this.tree.placenodes().update();\n\t        this.tree.layout();\n\t    },\n\t\n\t    renderTree: function renderTree(skip_render) {\n\t\n\t        var self = this;\n\t        var analysis_data = this.state.json;\n\t        var svg = self.svg;\n\t\n\t        if (!this.settings['suppress-tree-render']) {\n\t\n\t            var do_layout = false;\n\t\n\t            for (var k in this.settings[\"tree-options\"]) {\n\t\n\t                //TODO : Check to make sure settings has a matching field\n\t                if (k == 'hyphy-tree-model') {\n\t\n\t                    var controller = d3.select(\"#\" + k),\n\t                        controller_value = controller.attr(\"value\") || controller.property(\"checked\");\n\t\n\t                    if (controller_value != this.settings[\"tree-options\"][k][0] && controller_value != false) {\n\t                        this.settings[\"tree-options\"][k][0] = controller_value;\n\t                        do_layout = do_layout || this.settings[\"tree-options\"][k][1];\n\t                    }\n\t                } else {\n\t                    var controller = d3.select(\"#\" + k),\n\t                        controller_value = controller.attr(\"value\") || controller.property(\"checked\");\n\t\n\t                    if (controller_value != this.settings[\"tree-options\"][k][0]) {\n\t                        this.settings[\"tree-options\"][k][0] = controller_value;\n\t                        do_layout = do_layout || this.settings[\"tree-options\"][k][1];\n\t                    }\n\t                }\n\t            }\n\t\n\t            // Update which_model\n\t            if (self.which_model != this.settings[\"tree-options\"][\"hyphy-tree-model\"][0]) {\n\t                self.which_model = this.settings[\"tree-options\"][\"hyphy-tree-model\"][0];\n\t                self.initializeTree();\n\t                return;\n\t            }\n\t\n\t            if (_.indexOf(_.keys(analysis_data), \"tree\") > -1) {\n\t                this.tree(analysis_data[\"tree\"]).svg(svg);\n\t            } else {\n\t                this.tree(analysis_data[\"fits\"][self.which_model][\"tree string\"]).svg(svg);\n\t            }\n\t\n\t            this.branch_lengths = this.getBranchLengths();\n\t\n\t            this.tree.font_size(18);\n\t            this.tree.scale_bar_font_size(14);\n\t            this.tree.node_circle_size(0);\n\t\n\t            this.tree.branch_length(function (n) {\n\t                if (self.branch_lengths) {\n\t                    return self.branch_lengths[n.name] || 0;\n\t                }\n\t                return undefined;\n\t            });\n\t\n\t            this.assignBranchAnnotations();\n\t\n\t            if (_.findKey(analysis_data, \"partition\")) {\n\t                this.partition = (this.settings[\"tree-options\"][\"hyphy-tree-highlight\"] ? analysis_data[\"partition\"][this.settings[\"tree-options\"][\"hyphy-tree-highlight\"][0]] : null) || null;\n\t            } else {\n\t                this.partition = null;\n\t            }\n\t\n\t            self.omega_color = d3.scale.pow().exponent(self.scaling_exponent).domain([0, 0.25, 1, 5, 10]).range(self.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0] ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"] : [\"#5e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"]).clamp(true);\n\t\n\t            self.tree.options({\n\t                'color-fill': self.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0]\n\t            }, false);\n\t\n\t            d3.select(\".phylotree-definitions\").selectAll(\"linearGradient\").remove();\n\t\n\t            // TODO: Should be a prop. Hide or show legend.\n\t            if (!this.settings[\"tree-options\"][\"hyphy-tree-hide-legend\"][0]) {\n\t                d3.select(\"#color-legend\").style(\"visibility\", \"visible\");\n\t\n\t                if (self.legend_type) {\n\t                    self.renderDiscreteLegendColorScheme(\"tree_container\");\n\t                } else {\n\t                    self.renderLegendColorScheme(\"tree_container\", self.state.json[\"fits\"][self.which_model][\"annotation-tag\"]);\n\t                }\n\t            } else {\n\t                d3.select(\"#color-legend\").style(\"visibility\", \"hidden\");\n\t            }\n\t\n\t            if (!skip_render) {\n\t                if (do_layout) {\n\t                    this.tree.update_layout();\n\t                }\n\t                //d3_phylotree_trigger_refresh(this.tree);\n\t                //this.tree.trigger_refresh();\n\t            }\n\t        }\n\t    },\n\t\n\t    componentDidMount: function componentDidMount() {\n\t        this.initialize();\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t        this.setState({\n\t            json: nextProps.json,\n\t            settings: nextProps.settings\n\t        });\n\t    },\n\t\n\t    componentDidUpdate: function componentDidUpdate() {\n\t        this.initialize();\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        return React.createElement(\n\t            'div',\n\t            null,\n\t            React.createElement(\n\t                'div',\n\t                { className: 'row' },\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'cold-md-12' },\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'input-group input-group-sm' },\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-btn' },\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default dropdown-toggle', 'data-toggle': 'dropdown' },\n\t                                'Export',\n\t                                React.createElement('span', { className: 'caret' })\n\t                            ),\n\t                            React.createElement(\n\t                                'ul',\n\t                                { className: 'dropdown-menu' },\n\t                                React.createElement(\n\t                                    'li',\n\t                                    { id: 'export-phylo-png' },\n\t                                    React.createElement(\n\t                                        'a',\n\t                                        { href: '#' },\n\t                                        React.createElement('i', { className: 'fa fa-image' }),\n\t                                        ' Image'\n\t                                    )\n\t                                ),\n\t                                React.createElement(\n\t                                    'li',\n\t                                    { id: 'export-phylo-nwk' },\n\t                                    React.createElement(\n\t                                        'a',\n\t                                        { href: '#' },\n\t                                        React.createElement('i', { className: 'fa fa-file-o' }),\n\t                                        ' Newick File'\n\t                                    )\n\t                                )\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', 'data-direction': 'vertical', 'data-amount': '1', title: 'Expand vertical spacing' },\n\t                                React.createElement('i', { className: 'fa fa-arrows-v' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', 'data-direction': 'vertical', 'data-amount': '-1', title: 'Compress vertical spacing' },\n\t                                React.createElement('i', { className: 'fa  fa-compress fa-rotate-135' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', 'data-direction': 'horizontal', 'data-amount': '1', title: 'Expand horizonal spacing' },\n\t                                React.createElement('i', { className: 'fa fa-arrows-h' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', 'data-direction': 'horizontal', 'data-amount': '-1', title: 'Compress horizonal spacing' },\n\t                                React.createElement('i', { className: 'fa  fa-compress fa-rotate-45' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', id: 'sort_ascending', title: 'Sort deepest clades to the bototm' },\n\t                                React.createElement('i', { className: 'fa fa-sort-amount-asc' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', id: 'sort_descending', title: 'Sort deepsest clades to the top' },\n\t                                React.createElement('i', { className: 'fa fa-sort-amount-desc' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', id: 'sort_original', title: 'Restore original order' },\n\t                                React.createElement('i', { className: 'fa fa-sort' })\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-btn', 'data-toggle': 'buttons' },\n\t                            React.createElement(\n\t                                'label',\n\t                                { className: 'btn btn-default active btn-sm' },\n\t                                React.createElement('input', { type: 'radio', name: 'options', className: 'phylotree-layout-mode', 'data-mode': 'linear', autoComplete: 'off', checked: '', title: 'Layout left-to-right' }),\n\t                                'Linear'\n\t                            ),\n\t                            React.createElement(\n\t                                'label',\n\t                                { className: 'btn btn-default  btn-sm' },\n\t                                React.createElement('input', { type: 'radio', name: 'options', className: 'phylotree-layout-mode', 'data-mode': 'radial', autoComplete: 'off', title: 'Layout radially' }),\n\t                                ' Radial'\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-btn', 'data-toggle': 'buttons' },\n\t                            React.createElement(\n\t                                'label',\n\t                                { className: 'btn btn-default active btn-sm' },\n\t                                React.createElement('input', { type: 'radio', className: 'phylotree-align-toggler', 'data-align': 'left', name: 'options-align', autoComplete: 'off', checked: '', title: 'Align tips labels to branches' }),\n\t                                React.createElement('i', { className: 'fa fa-align-left' })\n\t                            ),\n\t                            React.createElement(\n\t                                'label',\n\t                                { className: 'btn btn-default btn-sm' },\n\t                                React.createElement('input', { type: 'radio', className: 'phylotree-align-toggler', 'data-align': 'right', name: 'options-align', autoComplete: 'off', title: 'Align tips labels to the edge of the plot' }),\n\t                                React.createElement('i', { className: 'fa fa-align-right' })\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-btn' },\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default dropdown-toggle', 'data-toggle': 'dropdown' },\n\t                                'Model',\n\t                                React.createElement('span', { className: 'caret' })\n\t                            ),\n\t                            React.createElement('ul', { className: 'dropdown-menu', id: 'hyphy-tree-model-list' })\n\t                        ),\n\t                        React.createElement('input', { type: 'text', className: 'form-control disabled', id: 'hyphy-tree-model', disabled: true }),\n\t                        React.createElement(\n\t                            'div',\n\t                            { id: 'hyphy-tree-highlight-div', className: 'input-group-btn' },\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default dropdown-toggle', 'data-toggle': 'dropdown' },\n\t                                'Highlight branch set',\n\t                                React.createElement('span', { className: 'caret' })\n\t                            ),\n\t                            React.createElement('ul', { className: 'dropdown-menu', id: 'hyphy-tree-highlight-branches' })\n\t                        ),\n\t                        React.createElement('input', { type: 'text', className: 'form-control disabled', id: 'hyphy-tree-highlight', disabled: true }),\n\t                        React.createElement(\n\t                            'span',\n\t                            { className: 'input-group-addon' },\n\t                            'Use model branch lengths',\n\t                            React.createElement('input', { type: 'checkbox', id: 'hyphy-tree-branch-lengths', className: 'hyphy-tree-trigger' })\n\t                        ),\n\t                        React.createElement(\n\t                            'span',\n\t                            { className: 'input-group-addon' },\n\t                            'Hide legend',\n\t                            React.createElement('input', { type: 'checkbox', id: 'hyphy-tree-hide-legend', className: 'hyphy-tree-trigger' })\n\t                        ),\n\t                        React.createElement(\n\t                            'span',\n\t                            { className: 'input-group-addon' },\n\t                            'Grayscale',\n\t                            React.createElement('input', { type: 'checkbox', id: 'hyphy-tree-fill-color', className: 'hyphy-tree-trigger' })\n\t                        )\n\t                    )\n\t                )\n\t            ),\n\t            React.createElement(\n\t                'div',\n\t                { className: 'row' },\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'col-md-12' },\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'row' },\n\t                        React.createElement('div', { id: 'tree_container', className: 'tree-widget' })\n\t                    )\n\t                )\n\t            )\n\t        );\n\t    }\n\t\n\t});\n\t\n\tfunction render_tree(json, element, settings) {\n\t    return React.render(React.createElement(Tree, { json: json, settings: settings }), $(element)[0]);\n\t}\n\t\n\tfunction rerender_tree(json, element, settings) {\n\t    $(element).empty();\n\t    return render_tree(json, settings);\n\t}\n\t\n\tmodule.exports.Tree = Tree;\n\tmodule.exports.render_tree = render_tree;\n\tmodule.exports.rerender_tree = rerender_tree;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(41), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 209:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_, d3, $) {'use strict';\n\t\n\tvar _prop_chart = __webpack_require__(210);\n\t\n\tvar React = __webpack_require__(44);\n\t\n\t\n\tvar BranchTable = React.createClass({\n\t  displayName: 'BranchTable',\n\t\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    // add the following\n\t    var table_row_data = this.getBranchRows(this.props.tree, this.props.test_results, this.props.annotations),\n\t        table_columns = this.getBranchColumns(table_row_data),\n\t        initial_model_name = _.take(_.keys(this.props.annotations)),\n\t        initial_omegas = this.props.annotations ? this.props.annotations[initial_model_name][\"omegas\"] : null;\n\t\n\t    var distro_settings = {\n\t      dimensions: { width: 600, height: 400 },\n\t      margins: { 'left': 50, 'right': 15, 'bottom': 15, 'top': 35 },\n\t      legend: false,\n\t      domain: [0.00001, 10000],\n\t      do_log_plot: true,\n\t      k_p: null,\n\t      plot: null,\n\t      svg_id: \"prop-chart\"\n\t    };\n\t\n\t    return {\n\t      tree: this.props.tree,\n\t      test_results: this.props.test_results,\n\t      annotations: this.props.annotations,\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns,\n\t      current_model_name: initial_model_name,\n\t      current_omegas: initial_omegas,\n\t      distro_settings: distro_settings\n\t    };\n\t  },\n\t\n\t  getBranchLength: function getBranchLength(m) {\n\t\n\t    if (!this.state.tree) {\n\t      return '';\n\t    }\n\t\n\t    return d3.format(\".4f\")(this.state.tree.get_node_by_name(m).attribute);\n\t  },\n\t\n\t  getLRT: function getLRT(branch) {\n\t    var formatted = d3.format(\".4f\")(branch[\"LRT\"]);\n\t    if (formatted == \"NaN\") {\n\t      return branch[\"LRT\"];\n\t    } else {\n\t      return formatted;\n\t    }\n\t  },\n\t\n\t  getPVal: function getPVal(branch) {\n\t    return d3.format(\".4f\")(branch[\"p\"]);\n\t  },\n\t\n\t  getUncorrectedPVal: function getUncorrectedPVal(branch) {\n\t    return d3.format(\".4f\")(branch[\"uncorrected p\"]);\n\t  },\n\t\n\t  getOmegaDistribution: function getOmegaDistribution(m, annotations) {\n\t\n\t    if (!annotations) {\n\t      return '';\n\t    }\n\t\n\t    var omega_string = \"\";\n\t\n\t    for (var i in annotations[m][\"omegas\"]) {\n\t      var omega = parseFloat(annotations[m][\"omegas\"][i][\"omega\"]);\n\t      var formatted_omega = \"∞\";\n\t      if (omega < 1e+20) {\n\t        formatted_omega = d3.format(\".3r\")(omega);\n\t      }\n\t      omega_string += \"&omega;<sub>\" + (parseInt(i) + 1) + \"</sub> = \" + formatted_omega + \" (\" + d3.format(\".2p\")(annotations[m][\"omegas\"][i][\"prop\"]) + \")<br/>\";\n\t    }\n\t\n\t    return omega_string;\n\t  },\n\t\n\t  getBranchRows: function getBranchRows(tree, test_results, annotations) {\n\t\n\t    var self = this;\n\t\n\t    var table_row_data = [],\n\t        omega_format = d3.format(\".3r\"),\n\t        prop_format = d3.format(\".2p\");\n\t\n\t    for (var m in test_results) {\n\t\n\t      var branch_row = [];\n\t      var branch = test_results[m];\n\t\n\t      branch_row = [m, this.getBranchLength(m), this.getLRT(branch), this.getPVal(branch), this.getUncorrectedPVal(branch), this.getOmegaDistribution(m, annotations)];\n\t\n\t      table_row_data.push(branch_row);\n\t    }\n\t\n\t    table_row_data.sort(function (a, b) {\n\t\n\t      if (a[0] == b[0]) {\n\t        return a[1] < b[1] ? -1 : a[1] == b[1] ? 0 : 1;\n\t      }\n\t\n\t      return a[3] - b[3];\n\t    });\n\t\n\t    return table_row_data;\n\t  },\n\t\n\t  setEvents: function setEvents() {\n\t\n\t    var self = this;\n\t\n\t    if (self.state.annotations) {\n\t      var branch_table = d3.select('#table-branch-table').selectAll(\"tr\");\n\t\n\t      branch_table.on(\"click\", function (d) {\n\t        var label = d[0];\n\t        self.setState({\n\t          current_model_name: label,\n\t          current_omegas: self.state.annotations[label][\"omegas\"]\n\t        });\n\t      });\n\t    }\n\t  },\n\t\n\t  createDistroChart: function createDistroChart() {\n\t\n\t    var self = this;\n\t\n\t    this.settings = {\n\t      dimensions: { width: 600, height: 400 },\n\t      margins: { 'left': 50, 'right': 15, 'bottom': 15, 'top': 15 },\n\t      has_zeros: true,\n\t      legend_id: null,\n\t      do_log_plot: true,\n\t      k_p: null,\n\t      plot: null,\n\t      svg_id: \"prop-chart\"\n\t    };\n\t  },\n\t\n\t  getBranchColumns: function getBranchColumns(table_row_data) {\n\t\n\t    if (table_row_data.length <= 0) {\n\t      return null;\n\t    }\n\t\n\t    var name_header = '<th>Name</th>',\n\t        length_header = '<th><abbr title=\"Branch Length\">B</abbr></th>',\n\t        lrt_header = '<th><abbr title=\"Likelihood ratio test statistic\">LRT</abbr></th>',\n\t        pvalue_header = '<th>Test p-value</th>',\n\t        uncorrected_pvalue_header = '<th>Uncorrected p-value</th>',\n\t        omega_header = '<th>ω distribution over sites</th>';\n\t\n\t    // inspect table_row_data and return header\n\t    var all_columns = [name_header, length_header, lrt_header, pvalue_header, uncorrected_pvalue_header, omega_header];\n\t\n\t    // validate each table row with its associated header\n\t\n\t    // trim columns to length of table_row_data\n\t    var column_headers = _.take(all_columns, table_row_data[0].length);\n\t\n\t    // remove all columns that have 0, null, or undefined rows\n\t    var items = d3.transpose(table_row_data);\n\t\n\t    return column_headers;\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t    var table_row_data = this.getBranchRows(nextProps.tree, nextProps.test_results, nextProps.annotations),\n\t        table_columns = this.getBranchColumns(table_row_data),\n\t        initial_model_name = _.take(_.keys(nextProps.annotations)),\n\t        initial_omegas = nextProps.annotations ? nextProps.annotations[initial_model_name][\"omegas\"] : null;\n\t\n\t    var distro_settings = {\n\t      dimensions: { width: 600, height: 400 },\n\t      margins: { 'left': 50, 'right': 15, 'bottom': 15, 'top': 15 },\n\t      legend: false,\n\t      domain: [0.00001, 10000],\n\t      do_log_plot: true,\n\t      k_p: null,\n\t      plot: null,\n\t      svg_id: \"prop-chart\"\n\t    };\n\t\n\t    if (nextProps.test_results && nextProps.annotations) {\n\t      this.setState({\n\t        tree: nextProps.tree,\n\t        test_results: nextProps.test_results,\n\t        annotations: nextProps.annotations,\n\t        table_row_data: table_row_data,\n\t        table_columns: table_columns,\n\t        current_model_name: initial_model_name,\n\t        current_omegas: initial_omegas,\n\t        distro_settings: distro_settings\n\t      });\n\t    }\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate() {\n\t\n\t    var branch_columns = d3.select('#table-branch-header');\n\t    branch_columns = branch_columns.selectAll(\"th\").data(this.state.table_columns);\n\t    branch_columns.enter().append(\"th\");\n\t\n\t    branch_columns.html(function (d) {\n\t      return d;\n\t    });\n\t\n\t    var branch_rows = d3.select('#table-branch-table').selectAll(\"tr\").data(this.state.table_row_data);\n\t\n\t    branch_rows.enter().append('tr');\n\t    branch_rows.exit().remove();\n\t    branch_rows.style('font-weight', function (d) {\n\t      return d[3] <= 0.05 ? 'bold' : 'normal';\n\t    });\n\t\n\t    branch_rows = branch_rows.selectAll(\"td\").data(function (d) {\n\t      return d;\n\t    });\n\t\n\t    branch_rows.enter().append(\"td\");\n\t    branch_rows.html(function (d) {\n\t      return d;\n\t    });\n\t\n\t    this.createDistroChart();\n\t    this.setEvents();\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'row' },\n\t      React.createElement(\n\t        'div',\n\t        { id: 'hyphy-branch-table', className: 'col-md-7' },\n\t        React.createElement(\n\t          'table',\n\t          { className: 'table table-hover table-condensed' },\n\t          React.createElement('thead', { id: 'table-branch-header' }),\n\t          React.createElement('tbody', { id: 'table-branch-table' })\n\t        )\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { id: 'primary-omega-tag', className: 'col-md-5' },\n\t        React.createElement(_prop_chart.PropChart, { name: self.state.current_model_name, omegas: self.state.current_omegas,\n\t          settings: self.state.distro_settings })\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_branch_table(tree, test_results, annotations, element) {\n\t  React.render(React.createElement(BranchTable, { tree: tree, test_results: test_results, annotations: annotations }), $(element)[0]);\n\t}\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction rerender_branch_table(tree, test_results, annotations, element) {\n\t  $(element).empty();\n\t  render_branch_table(tree, test_results, annotations, element);\n\t}\n\t\n\tmodule.exports.BranchTable = BranchTable;\n\tmodule.exports.render_branch_table = render_branch_table;\n\tmodule.exports.rerender_branch_table = rerender_branch_table;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41), __webpack_require__(38), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 210:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _, $) {'use strict';\n\t\n\tvar React = __webpack_require__(44);\n\tvar datamonkey = __webpack_require__(37);\n\t\n\tvar PropChart = React.createClass({\n\t    displayName: 'PropChart',\n\t\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        return {\n\t            svg_id: null,\n\t            dimensions: { width: 600, height: 400 },\n\t            margins: { 'left': 50, 'right': 15, 'bottom': 25, 'top': 35 },\n\t            has_zeros: false,\n\t            legend_id: null,\n\t            do_log_plot: true,\n\t            k_p: null,\n\t            plot: null\n\t        };\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        return {\n\t            model_name: this.props.name,\n\t            omegas: this.props.omegas,\n\t            settings: this.props.settings\n\t        };\n\t    },\n\t\n\t    setEvents: function setEvents() {\n\t        var self = this;\n\t\n\t        d3.select(\"#\" + this.save_svg_id).on('click', function (e) {\n\t            datamonkey.save_image(\"svg\", \"#\" + self.svg_id);\n\t        });\n\t\n\t        d3.select(\"#\" + this.save_png_id).on('click', function (e) {\n\t            datamonkey.save_image(\"png\", \"#\" + self.svg_id);\n\t        });\n\t    },\n\t\n\t    initialize: function initialize() {\n\t\n\t        // clear svg\n\t        d3.select(\"#prop-chart\").html(\"\");\n\t\n\t        this.data_to_plot = this.state.omegas;\n\t\n\t        // Set props from settings\n\t        this.svg_id = this.props.settings.svg_id;\n\t        this.dimensions = this.props.settings.dimensions || this.props.dimensions;\n\t        this.margins = this.props.settings.margins || this.props.margins;\n\t        this.legend_id = this.props.settings.legend || this.props.legend_id;\n\t        this.do_log_plot = this.props.settings.log || this.props.do_log_plot;\n\t        this.k_p = this.props.settings.k || this.props.k_p;\n\t\n\t        var dimensions = this.props.dimensions;\n\t        var margins = this.props.margins;\n\t\n\t        if (this.props.do_log_plot) {\n\t            this.has_zeros = this.data_to_plot.some(function (d) {\n\t                return d.omega <= 0;\n\t            });\n\t        }\n\t\n\t        this.plot_width = dimensions[\"width\"] - margins['left'] - margins['right'], this.plot_height = dimensions[\"height\"] - margins['top'] - margins['bottom'];\n\t\n\t        var domain = this.state.settings[\"domain\"];\n\t\n\t        this.omega_scale = (this.do_log_plot ? this.has_zeros ? d3.scale.pow().exponent(0.2) : d3.scale.log() : d3.scale.linear()).range([0, this.plot_width]).domain(domain).nice();\n\t\n\t        this.proportion_scale = d3.scale.linear().range([this.plot_height, 0]).domain([-0.05, 1]).clamp(true);\n\t\n\t        // compute margins -- circle AREA is proportional to the relative weight\n\t        // maximum diameter is (height - text margin)\n\t        this.svg = d3.select(\"#\" + this.svg_id).attr(\"width\", dimensions.width + margins['left'] + margins['right']).attr(\"height\", dimensions.height + margins['top'] + margins['bottom']);\n\t\n\t        this.plot = this.svg.selectAll(\".container\");\n\t\n\t        this.svg.selectAll(\"defs\").remove();\n\t\n\t        this.svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 10) /*must be smarter way to calculate shift*/\n\t        .attr(\"refY\", 4).attr(\"markerWidth\", 10).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").attr(\"stroke\", \"#000\").attr(\"fill\", \"#000\").append(\"path\").attr(\"d\", \"M 0,0 V8 L10,4 Z\");\n\t\n\t        if (this.plot.empty()) {\n\t            this.plot = this.svg.append(\"g\").attr(\"class\", \"container\");\n\t        }\n\t\n\t        this.plot.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \" , \" + this.margins[\"top\"] + \")\");\n\t        this.reference_omega_lines = this.plot.selectAll(\".hyphy-omega-line-reference\"), this.displacement_lines = this.plot.selectAll(\".hyphy-displacement-line\");\n\t\n\t        this.createNeutralLine();\n\t        this.createXAxis();\n\t        this.createYAxis();\n\t        this.setEvents();\n\t        this.createOmegaLine(this.state.omegas);\n\t        console.log('initialized everything');\n\t        //_.map(this.props.omegas, function(d) { return this.createOmegaLine(d[\"omega\"],d[\"prop\"]); });\n\t\n\t        console.log(this.svg);\n\t    },\n\t\n\t    createOmegaLine: function createOmegaLine(omegas) {\n\t\n\t        var self = this;\n\t        var data_to_plot = this.data_to_plot;\n\t\n\t        // generate color wheel from omegas\n\t        self.colores_g = _.shuffle([\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\"]);\n\t\n\t        // ** Omega Line (Red) ** //\n\t        var omega_lines = this.plot.selectAll(\".hyphy-omega-line\").data(omegas);\n\t        omega_lines.enter().append(\"line\");\n\t        omega_lines.exit().remove();\n\t\n\t        omega_lines.transition().attr(\"x1\", function (d) {\n\t            return self.omega_scale(d.omega);\n\t        }).attr(\"x2\", function (d) {\n\t            return self.omega_scale(d.omega);\n\t        }).attr(\"y1\", function (d) {\n\t            return self.proportion_scale(-0.05);\n\t        }).attr(\"y2\", function (d) {\n\t            return self.proportion_scale(d.prop);\n\t        }).style(\"stroke\", function (d) {\n\t            var color = _.take(self.colores_g);\n\t            self.colores_g = _.rest(self.colores_g);\n\t            return color;\n\t        }).attr(\"class\", \"hyphy-omega-line\");\n\t    },\n\t\n\t    createNeutralLine: function createNeutralLine() {\n\t        var self = this;\n\t\n\t        // ** Neutral Line (Blue) ** //\n\t        var neutral_line = this.plot.selectAll(\".hyphy-neutral-line\").data([1]);\n\t        neutral_line.enter().append(\"line\").attr(\"class\", \"hyphy-neutral-line\");\n\t        neutral_line.exit().remove();\n\t        neutral_line.transition().attr(\"x1\", function (d) {\n\t            return self.omega_scale(d);\n\t        }).attr(\"x2\", function (d) {\n\t            return self.omega_scale(d);\n\t        }).attr(\"y1\", 0).attr(\"y2\", this.plot_height);\n\t    },\n\t    createXAxis: function createXAxis() {\n\t\n\t        // *** X-AXIS *** //\n\t        var xAxis = d3.svg.axis().scale(this.omega_scale).orient(\"bottom\");\n\t\n\t        if (this.do_log_plot) {\n\t            xAxis.ticks(10, this.has_zeros ? \".2r\" : \".1r\");\n\t        }\n\t\n\t        var x_axis = this.svg.selectAll(\".x.axis\");\n\t        var x_label;\n\t\n\t        if (x_axis.empty()) {\n\t            x_axis = this.svg.append(\"g\").attr(\"class\", \"x hyphy-axis\");\n\t\n\t            x_label = x_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label x-label\");\n\t        } else {\n\t            x_label = x_axis.select(\".axis-label.x-label\");\n\t        }\n\t\n\t        x_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + (this.plot_height + this.margins[\"top\"]) + \")\").call(xAxis);\n\t        x_label = x_label.attr(\"transform\", \"translate(\" + this.plot_width + \",\" + this.margins[\"bottom\"] + \")\").selectAll(\"text\").data(['\\u03C9']);\n\t        x_label.enter().append(\"text\");\n\t        x_label.text(function (d) {\n\t            return d;\n\t        }).style(\"text-anchor\", \"end\").attr(\"dy\", \"0.0em\");\n\t    },\n\t    createYAxis: function createYAxis() {\n\t\n\t        // *** Y-AXIS *** //\n\t        var yAxis = d3.svg.axis().scale(this.proportion_scale).orient(\"left\").ticks(10, \".1p\");\n\t\n\t        var y_axis = this.svg.selectAll(\".y.hyphy-axis\");\n\t        var y_label;\n\t\n\t        if (y_axis.empty()) {\n\t            y_axis = this.svg.append(\"g\").attr(\"class\", \"y hyphy-axis\");\n\t            y_label = y_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label y-label\");\n\t        } else {\n\t            y_label = y_axis.select(\".hyphy-axis-label.y-label\");\n\t        }\n\t        y_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + this.margins[\"top\"] + \")\").call(yAxis);\n\t        y_label = y_label.attr(\"transform\", \"translate(\" + -this.margins[\"left\"] + \",\" + 0 + \")\").selectAll(\"text\").data([\"Proportion of sites\"]);\n\t        y_label.enter().append(\"text\");\n\t        y_label.text(function (d) {\n\t            return d;\n\t        }).style(\"text-anchor\", \"start\").attr(\"dy\", \"-1em\");\n\t    },\n\t\n\t    componentDidMount: function componentDidMount() {\n\t        try {\n\t            this.initialize();\n\t        } catch (e) {};\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t        this.setState({\n\t            model_name: nextProps.name,\n\t            omegas: nextProps.omegas\n\t        });\n\t    },\n\t\n\t    componentDidUpdate: function componentDidUpdate() {\n\t        try {\n\t            this.initialize();\n\t        } catch (e) {};\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        this.save_svg_id = \"export-\" + this.svg_id + \"-svg\";\n\t        this.save_png_id = \"export-\" + this.svg_id + \"-png\";\n\t\n\t        return React.createElement(\n\t            'div',\n\t            { className: 'panel panel-default', id: this.state.model_name },\n\t            React.createElement(\n\t                'div',\n\t                { className: 'panel-heading' },\n\t                React.createElement(\n\t                    'h3',\n\t                    { className: 'panel-title' },\n\t                    React.createElement(\n\t                        'strong',\n\t                        null,\n\t                        this.state.model_name\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'p',\n\t                    null,\n\t                    '\\u03C9 distribution'\n\t                ),\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'btn-group' },\n\t                    React.createElement(\n\t                        'button',\n\t                        { id: this.save_svg_id, type: 'button', className: 'btn btn-default btn-sm' },\n\t                        React.createElement('span', { className: 'glyphicon glyphicon-floppy-save' }),\n\t                        ' SVG'\n\t                    ),\n\t                    React.createElement(\n\t                        'button',\n\t                        { id: this.save_png_id, type: 'button', className: 'btn btn-default btn-sm' },\n\t                        React.createElement('span', { className: 'glyphicon glyphicon-floppy-save' }),\n\t                        ' PNG'\n\t                    )\n\t                )\n\t            ),\n\t            React.createElement(\n\t                'div',\n\t                { className: 'panel-body' },\n\t                React.createElement('svg', { id: this.svg_id })\n\t            )\n\t        );\n\t    }\n\t});\n\t\n\tfunction render_prop_chart(model_name, omegas, settings) {\n\t    return React.render(React.createElement(PropChart, { name: model_name, omegas: omegas, settings: settings }), document.getElementById(\"primary-omega-tag\"));\n\t}\n\t\n\tfunction rerender_prop_chart(model_name, omeags, settings) {\n\t\n\t    $(\"#primary-omega-tag\").empty();\n\t    return render_prop_chart(model_name, omeags, settings);\n\t}\n\t\n\tmodule.exports.render_prop_chart = render_prop_chart;\n\tmodule.exports.rerender_prop_chart = rerender_prop_chart;\n\tmodule.exports.PropChart = PropChart;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(41), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 211:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(46);\n\n\n/***/ },\n\n/***/ 212:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {'use strict';\n\t\n\t__webpack_require__(213);\n\t\n\tvar crossfilter = __webpack_require__(215),\n\t    dc = __webpack_require__(218),\n\t    datamonkey = __webpack_require__(37);\n\t\n\tfunction busted_render_summary(json) {\n\t\n\t    var fit_format = d3.format(\".2f\"),\n\t        prop_format = d3.format(\".2p\"),\n\t        omega_format = d3.format(\".3r\");\n\t\n\t    var format_run_time = function format_run_time(seconds) {\n\t\n\t        var duration_string = \"\";\n\t        seconds = parseFloat(seconds);\n\t        var split_array = [Math.floor(seconds / (24 * 3600)), Math.floor(seconds / 3600) % 24, Math.floor(seconds / 60) % 60, seconds % 60],\n\t            quals = [\"d.\", \"hrs.\", \"min.\", \"sec.\"];\n\t\n\t        split_array.forEach(function (d, i) {\n\t            if (d) {\n\t                duration_string += \" \" + d + \" \" + quals[i];\n\t            }\n\t        });\n\t\n\t        return duration_string;\n\t    };\n\t\n\t    var branch_p_values = {};\n\t\n\t    var rate_distro_by_branch = {},\n\t        branch_count = 1,\n\t        selected_count = 0,\n\t        tested_count = 0;\n\t\n\t    var for_branch_table = [];\n\t\n\t    //var tree_info = render_bs_rel_tree (json, \"Unconstrained model\");\n\t\n\t    //var branch_lengths   = tree_info[0],\n\t    //    tested_branches  = {};\n\t\n\t    for (var p in json[\"test results\"]) {\n\t        branch_p_values[p] = json[\"test results\"][\"p\"];\n\t        if (branch_p_values[p] <= 0.05) {\n\t            selected_count++;\n\t        }\n\t    }\n\t\n\t    var fitted_distributions = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"];\n\t\n\t    for (var b in fitted_distributions) {\n\t        //for_branch_table.push ([b + (tested_branches[b] ? \"\" : \"\"),branch_lengths[b],0,0,0]);\n\t        try {\n\t            for_branch_table[branch_count][2] = json[\"test results\"][b][\"LRT\"];\n\t            for_branch_table[branch_count][3] = json[\"test results\"][b][\"p\"];\n\t            for_branch_table[branch_count][4] = json[\"test results\"][b][\"uncorrected p\"];\n\t        } catch (e) {}\n\t\n\t        var rateD = fitted_distributions[b];\n\t        rate_distro_by_branch[b] = rateD;\n\t        //for_branch_table[branch_count].push (branch_omegas[b]['distro']);\n\t        branch_count += 1;\n\t    }\n\t\n\t    // render summary data\n\t    var total_tree_length = d3.format(\"g\")(json[\"fits\"][\"Unconstrained model\"][\"tree length\"]);\n\t\n\t    for_branch_table = for_branch_table.sort(function (a, b) {\n\t        return a[4] - b[4];\n\t    });\n\t\n\t    d3.select('#summary-test-result').text(json['test results']['p'] <= 0.05 ? \"evidence\" : \"no evidence\");\n\t    d3.select('#summary-test-pvalue').text(d3.format(\".3f\")(json['test results']['p']));\n\t    d3.select('#summary-pmid').text(\"PubMed ID \" + json['PMID']).attr(\"href\", \"http://www.ncbi.nlm.nih.gov/pubmed/\" + json['PMID']);\n\t    d3.select('#summary-total-runtime').text(format_run_time(json['timers']['overall']));\n\t    d3.select('#summary-total-branches').text(branch_count);\n\t    d3.select('#summary-tested-branches').text(tested_count);\n\t    d3.select('#summary-selected-branches').text(selected_count);\n\t\n\t    has_background = json['background'];\n\t\n\t    var model_rows = [[], []];\n\t\n\t    if (has_background) {\n\t        model_rows.push([]);\n\t    }\n\t\n\t    for (k = 0; k < 2 + has_background; k++) {\n\t\n\t        var access_key,\n\t            secondary_key,\n\t            only_distro = 0;\n\t\n\t        if (k === 0) {\n\t\n\t            access_key = 'Unconstrained model';\n\t            secondary_key = 'FG';\n\t            model_rows[k].push('Unconstrained Model');\n\t            only_distro = 0;\n\t        } else {\n\t\n\t            if (has_background && k == 1) {\n\t                model_rows[k].push('(background branches)');\n\t                secondary_key = 'BG';\n\t                only_distro = 1;\n\t            } else {\n\t                access_key = 'Constrained model';\n\t                if (!(access_key in json['fits'])) {\n\t                    break;\n\t                }\n\t                model_rows[k].push('Constrained Model');\n\t                secondary_key = 'FG';\n\t                only_distro = 0;\n\t            }\n\t        }\n\t\n\t        try {\n\t            model_rows[k].push(only_distro ? '' : fit_format(json['fits'][access_key]['log-likelihood']));\n\t            model_rows[k].push(only_distro ? '' : json['fits'][access_key]['parameters']);\n\t            model_rows[k].push(only_distro ? '' : fit_format(json['fits'][access_key]['AIC-c']));\n\t            model_rows[k].push(only_distro ? '' : format_run_time(json['fits'][access_key]['runtime']));\n\t            model_rows[k].push(only_distro ? '' : fit_format(json['fits'][access_key]['tree length']));\n\t\n\t            for (j = 0; j < 3; j++) {\n\t                model_rows[k].push(omega_format(json['fits'][access_key]['rate distributions'][secondary_key][j][0]) + \" (\" + prop_format(json['fits'][access_key]['rate distributions'][secondary_key][j][1]) + \")\");\n\t            }\n\t        } catch (e) {\n\t            datamonkey.errorModal(e);\n\t        }\n\t    }\n\t\n\t    model_rows = d3.select('#summary-model-table').selectAll(\"tr\").data(model_rows);\n\t    model_rows.enter().append('tr');\n\t    model_rows.exit().remove();\n\t    model_rows = model_rows.selectAll(\"td\").data(function (d) {\n\t        return d;\n\t    });\n\t    model_rows.enter().append(\"td\");\n\t    model_rows.html(function (d) {\n\t        return d;\n\t    });\n\t}\n\t\n\tfunction busted_render_histogram(c, json) {\n\t\n\t    var self = this;\n\t\n\t    // Massage data for use with crossfilter\n\t    if (d3.keys(json[\"evidence ratios\"]).length === 0) {\n\t        // no evidence ratios computed\n\t        d3.selectAll(c).style(\"display\", \"none\");\n\t        d3.selectAll(\".dc-data-table\").style(\"display\", \"none\");\n\t        //d3.selectAll ('[id^=\"export\"]').style (\"display\", \"none\");\n\t        d3.selectAll(\"#er-thresholds\").style(\"display\", \"none\");\n\t        d3.selectAll(\"#apply-thresholds\").style(\"display\", \"none\");\n\t        return;\n\t    } else {\n\t        d3.selectAll(c).style(\"display\", \"block\");\n\t        d3.selectAll(\".dc-data-table\").style(\"display\", \"table\");\n\t        //d3.selectAll ('[id^=\"export\"]').style (\"display\", \"block\");\n\t        d3.selectAll(\"#er-thresholds\").style(\"display\", \"block\");\n\t        d3.selectAll(\"#apply-thresholds\").style(\"display\", \"block\");\n\t    }\n\t\n\t    var erc = json[\"evidence ratios\"][\"constrained\"][0];\n\t    erc = erc.map(function (d) {\n\t        return Math.log(d);\n\t    });\n\t\n\t    var test_set = json[\"test set\"].split(\",\");\n\t    var model_results = [];\n\t\n\t    erc.forEach(function (elem, i) {\n\t        model_results.push({\n\t            \"site_index\": i + 1,\n\t            \"unconstrained\": json[\"profiles\"][\"unconstrained\"][0][i],\n\t            \"constrained\": json[\"profiles\"][\"constrained\"][0][i],\n\t            \"optimized_null\": json[\"profiles\"][\"optimized null\"][0][i],\n\t            \"er_constrained\": Math.log(json[\"evidence ratios\"][\"constrained\"][0][i]),\n\t            \"er_optimized_null\": Math.log(json[\"evidence ratios\"][\"optimized null\"][0][i])\n\t        });\n\t    });\n\t\n\t    var data = crossfilter(model_results);\n\t    var site_index = data.dimension(function (d) {\n\t        return d[\"site_index\"];\n\t    });\n\t\n\t    var sitesByConstrained = site_index.group().reduce(function (p, v) {\n\t        p.constrained_evidence += +v[\"er_constrained\"];\n\t        p.optimized_null_evidence += +v[\"er_optimized_null\"];\n\t        return p;\n\t    }, function (p, v) {\n\t        p.constrained_evidence -= +v[\"er_constrained\"];\n\t        p.optimized_null_evidence -= +v[\"er_optimized_null\"];\n\t        return p;\n\t    }, function () {\n\t        return { constrained_evidence: 0, optimized_null_evidence: 0 };\n\t    });\n\t\n\t    var sitesByON = site_index.group().reduce(function (p, v) {\n\t        p.optimized_null_evidence += +v[\"er_optimized_null\"];\n\t        return p;\n\t    }, function (p, v) {\n\t        p.optimized_null_evidence -= +v[\"er_optimized_null\"];\n\t        return p;\n\t    }, function () {\n\t        return { optimized_null_evidence: 0 };\n\t    });\n\t\n\t    // Set up new crossfilter dimensions to slice the table by constrained or ON evidence ratio.\n\t    var er_constrained = data.dimension(function (d) {\n\t        return d[\"er_constrained\"];\n\t    });\n\t    var er_optimized_null = data.dimension(function (d) {\n\t        return d[\"er_optimized_null\"];\n\t    });\n\t    self.er_constrained = er_constrained;\n\t    self.er_optimized_null = er_optimized_null;\n\t\n\t    var composite = dc.compositeChart(c);\n\t\n\t    composite.width($(window).width()).height(300).dimension(site_index).x(d3.scale.linear().domain([1, erc.length])).yAxisLabel(\"2 * Ln Evidence Ratio\").xAxisLabel(\"Site Location\").legend(dc.legend().x($(window).width() - 150).y(20).itemHeight(13).gap(5)).renderHorizontalGridLines(true).compose([dc.lineChart(composite).group(sitesByConstrained, \"Constrained\").colors(d3.scale.ordinal().range(['green'])).valueAccessor(function (d) {\n\t        return 2 * d.value.constrained_evidence;\n\t    }).keyAccessor(function (d) {\n\t        return d.key;\n\t    }), dc.lineChart(composite).group(sitesByON, \"Optimized Null\").valueAccessor(function (d) {\n\t        return 2 * d.value.optimized_null_evidence;\n\t    }).keyAccessor(function (d) {\n\t        return d.key;\n\t    }).colors(d3.scale.ordinal().range(['red']))]);\n\t\n\t    composite.xAxis().ticks(50);\n\t\n\t    var numberFormat = d3.format(\".4f\");\n\t\n\t    // Render the table\n\t    dc.dataTable(\".dc-data-table\").dimension(site_index)\n\t    // data table does not use crossfilter group but rather a closure\n\t    // as a grouping function\n\t    .group(function (d) {\n\t        return site_index.bottom(1)[0].site_index + \" - \" + site_index.top(1)[0].site_index;\n\t    }).size(site_index.groupAll().reduceCount().value()) // (optional) max number of records to be shown, :default = 25\n\t    // dynamic columns creation using an array of closures\n\t    .columns([function (d) {\n\t        return d.site_index;\n\t    }, function (d) {\n\t        return numberFormat(d[\"unconstrained\"]);\n\t    }, function (d) {\n\t        return numberFormat(d[\"constrained\"]);\n\t    }, function (d) {\n\t        return numberFormat(d[\"optimized_null\"]);\n\t    }, function (d) {\n\t        return numberFormat(d[\"er_constrained\"]);\n\t    }, function (d) {\n\t        return numberFormat(d[\"er_optimized_null\"]);\n\t    }])\n\t\n\t    // (optional) sort using the given field, :default = function(d){return d;}\n\t    .sortBy(function (d) {\n\t        return d.site_index;\n\t    })\n\t\n\t    // (optional) sort order, :default ascending\n\t    .order(d3.ascending)\n\t\n\t    // (optional) custom renderlet to post-process chart using D3\n\t    .renderlet(function (table) {\n\t        table.selectAll(\".dc-table-group\").classed(\"info\", true);\n\t    });\n\t\n\t    $(\"#export-csv\").on('click', function (e) {\n\t        datamonkey.export_csv_button(site_index.top(Infinity));\n\t    });\n\t\n\t    $(\"#export-chart-svg\").on('click', function (e) {\n\t        // class manipulation for the image to display correctly\n\t        $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"dc-chart\");\n\t        datamonkey.save_image(\"svg\", \"#chart-id\");\n\t        $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"\");\n\t    });\n\t\n\t    $(\"#export-chart-png\").on('click', function (e) {\n\t        // class manipulation for the image to display correctly\n\t        $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"dc-chart\");\n\t        datamonkey.save_image(\"png\", \"#chart-id\");\n\t        $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"\");\n\t    });\n\t    $(\"#apply-thresholds\").on('click', function (e) {\n\t        var erConstrainedThreshold = document.getElementById(\"er-constrained-threshold\").value;\n\t        var erOptimizedNullThreshold = document.getElementById(\"er-optimized-null-threshold\").value;\n\t        self.er_constrained.filter(function (d) {\n\t            return d >= erConstrainedThreshold;\n\t        });\n\t        self.er_optimized_null.filter(function (d) {\n\t            return d >= erOptimizedNullThreshold;\n\t        });\n\t        dc.renderAll();\n\t    });\n\t\n\t    dc.renderAll();\n\t}\n\t\n\tmodule.exports.render_summary = busted_render_summary;\n\tmodule.exports.render_histogram = busted_render_histogram;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 213:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 219:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 221:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _, $) {\"use strict\";\n\t\n\tvar _tree = __webpack_require__(207);\n\t\n\tvar _model_fits = __webpack_require__(205);\n\t\n\tvar _tree_summary = __webpack_require__(206);\n\t\n\tvar _prop_chart = __webpack_require__(210);\n\t\n\t__webpack_require__(208);\n\t__webpack_require__(219);\n\t\n\tvar React = __webpack_require__(44),\n\t    ReactDOM = __webpack_require__(211);\n\t\n\tvar datamonkey = __webpack_require__(37),\n\t    busted = __webpack_require__(212);\n\t\n\tvar BUSTED = React.createClass({\n\t  displayName: \"BUSTED\",\n\t\n\t\n\t  float_format: d3.format(\".2f\"),\n\t  p_value_format: d3.format(\".4f\"),\n\t  fit_format: d3.format(\".2f\"),\n\t\n\t  loadFromServer: function loadFromServer() {\n\t\n\t    var self = this;\n\t\n\t    d3.json(this.props.url, function (data) {\n\t\n\t      data[\"fits\"][\"Unconstrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Unconstrained model\");\n\t      data[\"fits\"][\"Constrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Constrained model\");\n\t\n\t      // rename rate distributions\n\t      data[\"fits\"][\"Unconstrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Unconstrained model\"][\"rate distributions\"];\n\t      data[\"fits\"][\"Constrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Constrained model\"][\"rate distributions\"];\n\t\n\t      // set display order\n\t      data[\"fits\"][\"Unconstrained model\"][\"display-order\"] = 0;\n\t      data[\"fits\"][\"Constrained model\"][\"display-order\"] = 1;\n\t\n\t      var json = data,\n\t          pmid = \"25701167\",\n\t          pmid_text = \"PubMed ID \" + pmid,\n\t          pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid,\n\t          p = json[\"test results\"][\"p\"],\n\t          test_result = p <= 0.05 ? \"evidence\" : \"no evidence\";\n\t\n\t      var fg_rate = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"][\"FG\"];\n\t      var mapped_omegas = { \"omegas\": _.map(fg_rate, function (d) {\n\t          return _.object([\"omega\", \"prop\"], d);\n\t        }) };\n\t\n\t      self.setState({\n\t        p: p,\n\t        test_result: test_result,\n\t        json: json,\n\t        omegas: mapped_omegas[\"omegas\"],\n\t        pmid_text: pmid_text,\n\t        pmid_href: pmid_href\n\t      });\n\t    });\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t\n\t    var edgeColorizer = function edgeColorizer(element, data) {\n\t\n\t      var is_foreground = data.target.annotations.is_foreground,\n\t          color_fill = this.options()[\"color-fill\"] ? \"black\" : \"red\";\n\t\n\t      element.style('stroke', is_foreground ? color_fill : 'gray').style('stroke-linejoin', 'round').style('stroke-linejoin', 'round').style('stroke-linecap', 'round');\n\t    };\n\t\n\t    var tree_settings = {\n\t      'omegaPlot': {},\n\t      'tree-options': {\n\t        /* value arrays have the following meaning\n\t            [0] - the value of the attribute\n\t            [1] - does the change in attribute value trigger tree re-layout?\n\t        */\n\t        'hyphy-tree-model': [\"Unconstrained model\", true],\n\t        'hyphy-tree-highlight': [\"RELAX.test\", false],\n\t        'hyphy-tree-branch-lengths': [true, true],\n\t        'hyphy-tree-hide-legend': [true, false],\n\t        'hyphy-tree-fill-color': [true, false]\n\t      },\n\t      'hyphy-tree-legend-type': 'discrete',\n\t      'suppress-tree-render': false,\n\t      'chart-append-html': true,\n\t      'edgeColorizer': edgeColorizer\n\t    };\n\t\n\t    var distro_settings = {\n\t      dimensions: { width: 600, height: 400 },\n\t      margins: { 'left': 50, 'right': 15, 'bottom': 35, 'top': 35 },\n\t      legend: false,\n\t      domain: [0.00001, 100],\n\t      do_log_plot: true,\n\t      k_p: null,\n\t      plot: null,\n\t      svg_id: \"prop-chart\"\n\t    };\n\t\n\t    return {\n\t      distro_settings: distro_settings,\n\t      tree_settings: tree_settings,\n\t      constrained_threshold: \"Infinity\",\n\t      null_threshold: \"-Infinity\",\n\t      model_name: \"FG\"\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      p: null,\n\t      test_result: null,\n\t      json: null,\n\t      omegas: null,\n\t      pmid_text: null,\n\t      pmid_href: null\n\t    };\n\t  },\n\t\n\t  setEvents: function setEvents() {\n\t\n\t    var self = this;\n\t\n\t    $(\"#json_file\").on(\"change\", function (e) {\n\t      var files = e.target.files; // FileList object\n\t      if (files.length == 1) {\n\t        var f = files[0];\n\t        var reader = new FileReader();\n\t        reader.onload = function (theFile) {\n\t          return function (e) {\n\t\n\t            var data = JSON.parse(this.result);\n\t            data[\"fits\"][\"Unconstrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Unconstrained model\");\n\t            data[\"fits\"][\"Constrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Constrained model\");\n\t\n\t            // rename rate distributions\n\t            data[\"fits\"][\"Unconstrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Unconstrained model\"][\"rate distributions\"];\n\t            data[\"fits\"][\"Constrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Constrained model\"][\"rate distributions\"];\n\t\n\t            var json = data,\n\t                pmid = \"25701167\",\n\t                pmid_text = \"PubMed ID \" + pmid,\n\t                pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid,\n\t                p = json[\"test results\"][\"p\"],\n\t                test_result = p <= 0.05 ? \"evidence\" : \"no evidence\";\n\t\n\t            var fg_rate = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"][\"FG\"];\n\t            var mapped_omegas = { \"omegas\": _.map(fg_rate, function (d) {\n\t                return _.object([\"omega\", \"prop\"], d);\n\t              }) };\n\t\n\t            self.setState({\n\t              p: p,\n\t              test_result: test_result,\n\t              json: json,\n\t              omegas: mapped_omegas[\"omegas\"],\n\t              pmid_text: pmid_text,\n\t              pmid_href: pmid_href\n\t            });\n\t          };\n\t        }(f);\n\t        reader.readAsText(f);\n\t      }\n\t      $(\"#datamonkey-absrel-toggle-here\").dropdown(\"toggle\");\n\t      e.preventDefault();\n\t    });\n\t  },\n\t\n\t  formatBranchAnnotations: function formatBranchAnnotations(json, key) {\n\t\n\t    // attach is_foreground to branch annotations\n\t    var foreground = json[\"test set\"].split(\",\");\n\t\n\t    var tree = d3.layout.phylotree(),\n\t        nodes = tree(json[\"fits\"][key][\"tree string\"]).get_nodes(),\n\t        node_names = _.map(nodes, function (d) {\n\t      return d.name;\n\t    });\n\t\n\t    // Iterate over objects\n\t    var branch_annotations = _.object(node_names, _.map(node_names, function (d) {\n\t      return { is_foreground: _.indexOf(foreground, d) > -1 };\n\t    }));\n\t\n\t    return branch_annotations;\n\t  },\n\t\n\t  initialize: function initialize() {\n\t\n\t    var json = this.state.json;\n\t\n\t    if (!json) {\n\t      return;\n\t    }\n\t\n\t    busted.render_histogram(\"#chart-id\", json);\n\t\n\t    // delete existing tree\n\t    d3.select('#tree_container').select(\"svg\").remove();\n\t\n\t    var fg_rate = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"][\"FG\"],\n\t        omegas = fg_rate.map(function (r) {\n\t      return r[0];\n\t    }),\n\t        weights = fg_rate.map(function (r) {\n\t      return r[1];\n\t    });\n\t\n\t    var dsettings = {\n\t      'log': true,\n\t      'legend': false,\n\t      'domain': [0.00001, 20],\n\t      'dimensions': { 'width': 325, 'height': 300 }\n\t    };\n\t\n\t    $(\"#export-dist-svg\").on('click', function (e) {\n\t      datamonkey.save_image(\"svg\", \"#primary-omega-dist\");\n\t    });\n\t\n\t    $(\"#export-dist-png\").on('click', function (e) {\n\t      datamonkey.save_image(\"png\", \"#primary-omega-dist\");\n\t    });\n\t  },\n\t\n\t  componentWillMount: function componentWillMount() {\n\t    this.loadFromServer();\n\t    this.setEvents();\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t    self.initialize();\n\t\n\t    return React.createElement(\n\t      \"div\",\n\t      { className: \"tab-content\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"tab-pane active\", id: \"summary_tab\" },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\", styleName: \"margin-top: 5px\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-md-12\" },\n\t            React.createElement(\n\t              \"ul\",\n\t              { className: \"list-group\" },\n\t              React.createElement(\n\t                \"li\",\n\t                { className: \"list-group-item list-group-item-info\" },\n\t                React.createElement(\n\t                  \"h3\",\n\t                  { className: \"list-group-item-heading\" },\n\t                  React.createElement(\"i\", { className: \"fa fa-list\", styleName: \"margin-right: 10px\" }),\n\t                  React.createElement(\n\t                    \"span\",\n\t                    { id: \"summary-method-name\" },\n\t                    \"BUSTED\"\n\t                  ),\n\t                  \" summary\"\n\t                ),\n\t                \"There is \",\n\t                React.createElement(\n\t                  \"strong\",\n\t                  null,\n\t                  this.state.test_result\n\t                ),\n\t                \" of episodic diversifying selection, with LRT p-value of \",\n\t                this.state.p,\n\t                \".\",\n\t                React.createElement(\n\t                  \"p\",\n\t                  null,\n\t                  React.createElement(\n\t                    \"small\",\n\t                    null,\n\t                    \"Please cite \",\n\t                    React.createElement(\n\t                      \"a\",\n\t                      { href: this.state.pmid_href, id: \"summary-pmid\" },\n\t                      this.state.pmid_text\n\t                    ),\n\t                    \" if you use this result in a publication, presentation, or other scientific work.\"\n\t                  )\n\t                )\n\t              )\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { id: \"hyphy-model-fits\", className: \"col-lg-12\" },\n\t            React.createElement(_model_fits.ModelFits, { json: self.state.json })\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"button\",\n\t          { id: \"export-chart-svg\", type: \"button\", className: \"btn btn-default btn-sm pull-right btn-export\" },\n\t          React.createElement(\"span\", { className: \"glyphicon glyphicon-floppy-save\" }),\n\t          \" Export Chart to SVG\"\n\t        ),\n\t        React.createElement(\n\t          \"button\",\n\t          { id: \"export-chart-png\", type: \"button\", className: \"btn btn-default btn-sm pull-right btn-export\" },\n\t          React.createElement(\"span\", { className: \"glyphicon glyphicon-floppy-save\" }),\n\t          \" Export Chart to PNG\"\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row hyphy-busted-site-table\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { id: \"chart-id\", className: \"col-lg-8\" },\n\t            React.createElement(\n\t              \"strong\",\n\t              null,\n\t              \"Model Evidence Ratios Per Site\"\n\t            ),\n\t            React.createElement(\"div\", { className: \"clearfix\" })\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row site-table\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-lg-12\" },\n\t            React.createElement(\n\t              \"form\",\n\t              { id: \"er-thresholds\" },\n\t              React.createElement(\n\t                \"div\",\n\t                { className: \"form-group\" },\n\t                React.createElement(\n\t                  \"label\",\n\t                  { \"for\": \"er-constrained-threshold\" },\n\t                  \"Constrained Evidence Ratio Threshold:\"\n\t                ),\n\t                React.createElement(\"input\", { type: \"text\", className: \"form-control\", id: \"er-constrained-threshold\", defaultValue: this.props.constrained_threshold })\n\t              ),\n\t              React.createElement(\n\t                \"div\",\n\t                { className: \"form-group\" },\n\t                React.createElement(\n\t                  \"label\",\n\t                  { \"for\": \"er-optimized-null-threshold\" },\n\t                  \"Optimized Null Evidence Ratio Threshold:\"\n\t                ),\n\t                React.createElement(\"input\", { type: \"text\", className: \"form-control\", id: \"er-optimized-null-threshold\", defaultValue: this.props.null_threshold })\n\t              )\n\t            ),\n\t            React.createElement(\n\t              \"button\",\n\t              { id: \"export-csv\", type: \"button\", className: \"btn btn-default btn-sm pull-right hyphy-busted-btn-export\" },\n\t              React.createElement(\"span\", { className: \"glyphicon glyphicon-floppy-save\" }),\n\t              \" Export Table to CSV\"\n\t            ),\n\t            React.createElement(\n\t              \"button\",\n\t              { id: \"apply-thresholds\", type: \"button\", className: \"btn btn-default btn-sm pull-right hyphy-busted-btn-export\" },\n\t              \"Apply Thresholds\"\n\t            ),\n\t            React.createElement(\n\t              \"table\",\n\t              { id: \"sites\", className: \"table sites dc-data-table\" },\n\t              React.createElement(\n\t                \"thead\",\n\t                null,\n\t                React.createElement(\n\t                  \"tr\",\n\t                  { className: \"header\" },\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Site Index\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Unconstrained Likelihood\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Constrained Likelihood\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Optimized Null Likelihood\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Constrained Evidence Ratio\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Optimized Null Evidence Ratio\"\n\t                  )\n\t                )\n\t              )\n\t            )\n\t          )\n\t        )\n\t      ),\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"tab-pane\", id: \"tree_tab\" },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"col-md-12\" },\n\t          React.createElement(_tree.Tree, { json: self.state.json,\n\t            settings: self.props.tree_settings })\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"col-md-12\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { id: \"primary-omega-dist\", className: \"panel-body\" },\n\t            React.createElement(_prop_chart.PropChart, { name: self.props.model_name, omegas: self.state.omegas,\n\t              settings: self.props.distro_settings })\n\t          )\n\t        )\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tvar render_busted = function render_busted(url, element) {\n\t  ReactDOM.render(React.createElement(BUSTED, { url: url }), document.getElementById(element));\n\t};\n\t\n\tmodule.exports = render_busted;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(41), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 222:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {\"use strict\";\n\t\n\tvar _model_fits = __webpack_require__(205);\n\t\n\tvar _tree_summary = __webpack_require__(206);\n\t\n\tvar _tree = __webpack_require__(207);\n\t\n\tvar _omega_plots = __webpack_require__(223);\n\t\n\tvar React = __webpack_require__(44);\n\tvar _ = __webpack_require__(41);\n\tvar RELAX = React.createClass({\n\t  displayName: \"RELAX\",\n\t\n\t\n\t  float_format: d3.format(\".2f\"),\n\t  p_value_format: d3.format(\".4f\"),\n\t  fit_format: d3.format(\".2f\"),\n\t\n\t  loadFromServer: function loadFromServer() {\n\t\n\t    var self = this;\n\t\n\t    d3.json(this.props.url, function (data) {\n\t\n\t      data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned MG94xREV\");\n\t      data[\"fits\"][\"General Descriptive\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"General Descriptive\");\n\t      data[\"fits\"][\"Null\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Null\");\n\t      data[\"fits\"][\"Alternative\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Alternative\");\n\t      data[\"fits\"][\"Partitioned Exploratory\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned Exploratory\");\n\t\n\t      var annotations = data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"],\n\t          json = data,\n\t          pmid = data[\"PMID\"],\n\t          test_results = data[\"relaxation_test\"];\n\t\n\t      var p = data[\"relaxation-test\"][\"p\"],\n\t          direction = data[\"fits\"][\"Alternative\"][\"K\"] > 1 ? 'intensification' : 'relaxation',\n\t          evidence = p <= self.props.alpha_level ? 'significant' : 'not significant',\n\t          pvalue = self.p_value_format(p),\n\t          lrt = self.fit_format(data[\"relaxation-test\"][\"LR\"]),\n\t          summary_k = self.fit_format(data[\"fits\"][\"Alternative\"][\"K\"]),\n\t          pmid_text = \"PubMed ID \" + pmid,\n\t          pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid;\n\t\n\t      self.setState({\n\t        annotations: annotations,\n\t        json: json,\n\t        pmid: pmid,\n\t        test_results: test_results,\n\t        p: p,\n\t        direction: direction,\n\t        evidence: evidence,\n\t        pvalue: pvalue,\n\t        lrt: lrt,\n\t        summary_k: summary_k,\n\t        pmid_text: pmid_text,\n\t        pmid_href: pmid_href\n\t      });\n\t    });\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t\n\t    var edgeColorizer = function edgeColorizer(element, data) {\n\t\n\t      var self = this,\n\t          scaling_exponent = 0.33,\n\t          omega_format = d3.format(\".3r\");\n\t\n\t      var omega_color = d3.scale.pow().exponent(scaling_exponent).domain([0, 0.25, 1, 5, 10]).range(self.options()[\"color-fill\"] ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"] : [\"#6e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"]).clamp(true);\n\t\n\t      if (data.target.annotations) {\n\t        element.style('stroke', omega_color(data.target.annotations.length) || null);\n\t        $(element[0][0]).tooltip('destroy');\n\t        $(element[0][0]).tooltip({\n\t          'title': omega_format(data.target.annotations.length),\n\t          'html': true,\n\t          'trigger': 'hover',\n\t          'container': 'body',\n\t          'placement': 'auto'\n\t        });\n\t      } else {\n\t        element.style('stroke', null);\n\t        $(element[0][0]).tooltip('destroy');\n\t      }\n\t\n\t      var selected_partition = $(\"#hyphy-tree-highlight\").attr(\"value\");\n\t\n\t      if (selected_partition && this.get_partitions()) {\n\t        var partitions = this.get_partitions()[selected_partition];\n\t\n\t        element.style('stroke-width', partitions && partitions[data.target.name] ? '8' : '4').style('stroke-linejoin', 'round').style('stroke-linecap', 'round');\n\t      }\n\t    };\n\t\n\t    return {\n\t      edgeColorizer: edgeColorizer,\n\t      alpha_level: 0.05\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    var model_fits_id = \"#hyphy-model-fits\",\n\t        omega_plots_id = \"#hyphy-omega-plots\",\n\t        summary_id = \"#hyphy-relax-summary\",\n\t        tree_id = \"#tree-tab\";\n\t\n\t    var tree_settings = {\n\t      'omegaPlot': {},\n\t      'tree-options': {\n\t        /* value arrays have the following meaning\n\t            [0] - the value of the attribute\n\t            [1] - does the change in attribute value trigger tree re-layout?\n\t        */\n\t        'hyphy-tree-model': [\"Partitioned MG94xREV\", true],\n\t        'hyphy-tree-highlight': [\"RELAX.test\", false],\n\t        'hyphy-tree-branch-lengths': [true, true],\n\t        'hyphy-tree-hide-legend': [true, false],\n\t        'hyphy-tree-fill-color': [true, false]\n\t      },\n\t      'suppress-tree-render': false,\n\t      'chart-append-html': true,\n\t      'edgeColorizer': this.props.edgeColorizer\n\t    };\n\t\n\t    return {\n\t      annotations: null,\n\t      json: null,\n\t      pmid: null,\n\t      settings: tree_settings,\n\t      test_results: null,\n\t      tree: null,\n\t      p: null,\n\t      direction: 'unknown',\n\t      evidence: 'unknown',\n\t      pvalue: null,\n\t      lrt: null,\n\t      summary_k: 'unknown',\n\t      pmid_text: \"PubMed ID : Unknown\",\n\t      pmid_href: \"#\",\n\t      relaxation_K: \"unknown\"\n\t    };\n\t  },\n\t\n\t  componentWillMount: function componentWillMount() {\n\t    this.loadFromServer();\n\t    this.setEvents();\n\t  },\n\t\n\t  setEvents: function setEvents() {\n\t\n\t    var self = this;\n\t\n\t    $(\"#datamonkey-relax-load-json\").on(\"change\", function (e) {\n\t      var files = e.target.files; // FileList object\n\t\n\t      if (files.length == 1) {\n\t        var f = files[0];\n\t        var reader = new FileReader();\n\t\n\t        reader.onload = function (theFile) {\n\t          return function (e) {\n\t\n\t            var data = JSON.parse(this.result);\n\t            data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned MG94xREV\");\n\t            data[\"fits\"][\"General Descriptive\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"General Descriptive\");\n\t            data[\"fits\"][\"Null\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Null\");\n\t            data[\"fits\"][\"Alternative\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Alternative\");\n\t            data[\"fits\"][\"Partitioned Exploratory\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned Exploratory\");\n\t\n\t            var annotations = data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"],\n\t                json = data,\n\t                pmid = data[\"PMID\"],\n\t                test_results = data[\"relaxation_test\"];\n\t\n\t            var p = data[\"relaxation-test\"][\"p\"],\n\t                direction = data[\"fits\"][\"Alternative\"][\"K\"] > 1 ? 'intensification' : 'relaxation',\n\t                evidence = p <= self.props.alpha_level ? 'significant' : 'not significant',\n\t                pvalue = self.p_value_format(p),\n\t                lrt = self.fit_format(data[\"relaxation-test\"][\"LR\"]),\n\t                summary_k = self.fit_format(data[\"fits\"][\"Alternative\"][\"K\"]),\n\t                pmid_text = \"PubMed ID \" + pmid,\n\t                pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid;\n\t\n\t            self.setState({\n\t              annotations: annotations,\n\t              json: json,\n\t              pmid: pmid,\n\t              test_results: test_results,\n\t              p: p,\n\t              direction: direction,\n\t              evidence: evidence,\n\t              pvalue: pvalue,\n\t              lrt: lrt,\n\t              summary_k: summary_k,\n\t              pmid_text: pmid_text,\n\t              pmid_href: pmid_href\n\t            });\n\t          };\n\t        }(f);\n\t        reader.readAsText(f);\n\t      }\n\t\n\t      $(\"#datamonkey-absrel-toggle-here\").dropdown(\"toggle\");\n\t      e.preventDefault();\n\t    });\n\t  },\n\t\n\t  formatBranchAnnotations: function formatBranchAnnotations(json, key) {\n\t\n\t    var initial_branch_annotations = json[\"fits\"][key][\"branch-annotations\"];\n\t\n\t    if (!initial_branch_annotations) {\n\t      initial_branch_annotations = json[\"fits\"][key][\"rate distributions\"];\n\t    }\n\t\n\t    // Iterate over objects\n\t    var branch_annotations = _.mapObject(initial_branch_annotations, function (val, key) {\n\t      return { \"length\": val };\n\t    });\n\t\n\t    return branch_annotations;\n\t  },\n\t\n\t  initialize: function initialize() {},\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t\n\t    return React.createElement(\n\t      \"div\",\n\t      { className: \"tab-content\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"tab-pane active\", id: \"datamonkey-relax-summary-tab\" },\n\t        React.createElement(\n\t          \"div\",\n\t          { id: \"hyphy-relax-summary\", className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-md-12\" },\n\t            React.createElement(\n\t              \"ul\",\n\t              { className: \"list-group\" },\n\t              React.createElement(\n\t                \"li\",\n\t                { className: \"list-group-item list-group-item-info\" },\n\t                React.createElement(\n\t                  \"h3\",\n\t                  { className: \"list-group-item-heading\" },\n\t                  React.createElement(\"i\", { className: \"fa fa-list\", styleFormat: \"margin-right: 10px\" }),\n\t                  React.createElement(\n\t                    \"span\",\n\t                    { id: \"summary-method-name\" },\n\t                    \"RELAX(ed selection test)\"\n\t                  ),\n\t                  \" summary\"\n\t                ),\n\t                React.createElement(\n\t                  \"p\",\n\t                  { className: \"list-group-item-text lead\", styleFormat: \"margin-top:0.5em; \" },\n\t                  \"Test for selection \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-direction\" },\n\t                    this.state.direction\n\t                  ),\n\t                  \"(\",\n\t                  React.createElement(\n\t                    \"abbr\",\n\t                    { title: \"Relaxation coefficient\" },\n\t                    \"K\"\n\t                  ),\n\t                  \" = \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-K\" },\n\t                    this.state.summary_k\n\t                  ),\n\t                  \") was \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-evidence\" },\n\t                    this.state.evidence\n\t                  ),\n\t                  \"(p = \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-pvalue\" },\n\t                    this.state.p\n\t                  ),\n\t                  \", \",\n\t                  React.createElement(\n\t                    \"abbr\",\n\t                    { title: \"Likelihood ratio statistic\" },\n\t                    \"LR\"\n\t                  ),\n\t                  \" = \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-LRT\" },\n\t                    this.state.lrt\n\t                  ),\n\t                  \")\"\n\t                ),\n\t                React.createElement(\n\t                  \"p\",\n\t                  null,\n\t                  React.createElement(\n\t                    \"small\",\n\t                    null,\n\t                    \"Please cite \",\n\t                    React.createElement(\n\t                      \"a\",\n\t                      { href: this.state.pmid_href, id: \"summary-pmid\" },\n\t                      this.state.pmid_text\n\t                    ),\n\t                    \" if you use this result in a publication, presentation, or other scientific work.\"\n\t                  )\n\t                )\n\t              )\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { id: \"hyphy-model-fits\", className: \"row\" },\n\t          React.createElement(_model_fits.ModelFits, { json: self.state.json })\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { id: \"hyphy-omega-plots\", className: \"row\" },\n\t          React.createElement(_omega_plots.OmegaPlotGrid, { json: self.state.json })\n\t        )\n\t      ),\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"tab-pane\", id: \"tree-tab\" },\n\t        React.createElement(_tree.Tree, { json: self.state.json,\n\t          settings: self.state.settings })\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_relax(url, element) {\n\t  React.render(React.createElement(RELAX, { url: url }), document.getElementById(element));\n\t}\n\t\n\tmodule.exports = render_relax;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 223:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3) {'use strict';\n\t\n\tvar React = __webpack_require__(44);\n\tvar datamonkey = __webpack_require__(37);\n\tvar _ = __webpack_require__(41);\n\t\n\tvar OmegaPlot = React.createClass({\n\t    displayName: 'OmegaPlot',\n\t\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        return {\n\t            svg_id: null,\n\t            dimensions: { width: 600, height: 400 },\n\t            margins: { 'left': 50, 'right': 15, 'bottom': 35, 'top': 35 },\n\t            has_zeros: false,\n\t            legend_id: null,\n\t            do_log_plot: true,\n\t            k_p: null,\n\t            plot: null\n\t        };\n\t    },\n\t\n\t    setEvents: function setEvents() {\n\t        var self = this;\n\t\n\t        d3.select(\"#\" + this.save_svg_id).on('click', function (e) {\n\t            datamonkey.save_image(\"svg\", \"#\" + self.svg_id);\n\t        });\n\t\n\t        d3.select(\"#\" + this.save_png_id).on('click', function (e) {\n\t            datamonkey.save_image(\"png\", \"#\" + self.svg_id);\n\t        });\n\t    },\n\t\n\t    initialize: function initialize() {\n\t\n\t        if (!this.state.omegas || !this.state.omegas[\"Reference\"]) {\n\t            return;\n\t        }\n\t\n\t        var data_to_plot = this.state.omegas[\"Reference\"];\n\t        var secondary_data = this.state.omegas[\"Test\"];\n\t\n\t        // Set props from settings\n\t        this.svg_id = this.props.settings.svg_id;\n\t        this.dimensions = this.props.settings.dimensions || this.props.dimensions;\n\t        this.legend_id = this.props.settings.legend || this.props.legend_id;\n\t        this.do_log_plot = this.props.settings.log || this.props.do_log_plot;\n\t        this.k_p = this.props.settings.k || this.props.k_p;\n\t\n\t        var dimensions = this.props.dimensions;\n\t        var margins = this.props.margins;\n\t\n\t        this.margins = margins;\n\t\n\t        if (this.do_log_plot) {\n\t            this.has_zeros = data_to_plot.some(function (d) {\n\t                return d.omega <= 0;\n\t            });\n\t            if (secondary_data) {\n\t                this.has_zeros = this.has_zeros || data_to_plot.some(function (d) {\n\t                    return d.omega <= 0;\n\t                });\n\t            }\n\t        }\n\t\n\t        this.plot_width = dimensions[\"width\"] - margins['left'] - margins['right'], this.plot_height = dimensions[\"height\"] - margins['top'] - margins['bottom'];\n\t\n\t        var domain = this.state.settings[\"domain\"] || d3.extent(secondary_data ? secondary_data.map(function (d) {\n\t            return d.omega;\n\t        }).concat(data_to_plot.map(function (d) {\n\t            return d.omega;\n\t        })) : data_to_plot.map(function (d) {\n\t            return d.omega;\n\t        }));\n\t\n\t        domain[0] *= 0.5;\n\t\n\t        this.omega_scale = (this.do_log_plot ? this.has_zeros ? d3.scale.pow().exponent(0.2) : d3.scale.log() : d3.scale.linear()).range([0, this.plot_width]).domain(domain).nice();\n\t\n\t        this.proportion_scale = d3.scale.linear().range([this.plot_height, 0]).domain([-0.05, 1]).clamp(true);\n\t\n\t        // compute margins -- circle AREA is proportional to the relative weight\n\t        // maximum diameter is (height - text margin)\n\t        this.svg = d3.select(\"#\" + this.svg_id).attr(\"width\", dimensions.width).attr(\"height\", dimensions.height);\n\t        this.plot = this.svg.selectAll(\".container\");\n\t\n\t        this.svg.selectAll(\"defs\").remove();\n\t        this.svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 10) /*must be smarter way to calculate shift*/\n\t        .attr(\"refY\", 4).attr(\"markerWidth\", 10).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").attr(\"stroke\", \"#000\").attr(\"fill\", \"#000\").append(\"path\").attr(\"d\", \"M 0,0 V8 L10,4 Z\");\n\t\n\t        if (this.plot.empty()) {\n\t            this.plot = this.svg.append(\"g\").attr(\"class\", \"container\");\n\t        }\n\t\n\t        this.plot.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \" , \" + this.margins[\"top\"] + \")\");\n\t        this.reference_omega_lines = this.plot.selectAll(\".hyphy-omega-line-reference\"), this.displacement_lines = this.plot.selectAll(\".hyphy-displacement-line\");\n\t\n\t        this.createDisplacementLine();\n\t        this.createNeutralLine();\n\t        this.createOmegaLine();\n\t        this.createReferenceLine();\n\t        this.createXAxis();\n\t        this.createYAxis();\n\t        this.setEvents();\n\t    },\n\t    makeSpring: function makeSpring(x1, x2, y1, y2, step, displacement) {\n\t\n\t        if (x1 == x2) {\n\t            y1 = Math.min(y1, y2);\n\t            return \"M\" + x1 + \",\" + (y1 - 40) + \"v20\";\n\t        }\n\t\n\t        var spring_data = [],\n\t            point = [x1, y1],\n\t            angle = Math.atan2(y2 - y1, x2 - x1);\n\t\n\t        var step = [step * Math.cos(angle), step * Math.sin(angle)];\n\t        var k = 0;\n\t\n\t        if (Math.abs(x1 - x2) < 15) {\n\t            spring_data.push(point);\n\t        } else {\n\t            while (x1 < x2 && point[0] < x2 - 15 || x1 > x2 && point[0] > x2 + 15) {\n\t                point = point.map(function (d, i) {\n\t                    return d + step[i];\n\t                });\n\t                if (k % 2) {\n\t                    spring_data.push([point[0], point[1] + displacement]);\n\t                } else {\n\t                    spring_data.push([point[0], point[1] - displacement]);\n\t                }\n\t                k++;\n\t                if (k > 100) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t\n\t        if (spring_data.length > 1) {\n\t            spring_data.pop();\n\t        }\n\t\n\t        spring_data.push([x2, y2]);\n\t        var line = d3.svg.line().interpolate(\"monotone\");\n\t        return line(spring_data);\n\t    },\n\t    createDisplacementLine: function createDisplacementLine() {\n\t\n\t        var self = this;\n\t        var data_to_plot = this.state.omegas[\"Reference\"];\n\t        var secondary_data = this.state.omegas[\"Test\"];\n\t\n\t        if (secondary_data) {\n\t            var diffs = data_to_plot.map(function (d, i) {\n\t                return {\n\t                    'x1': d.omega,\n\t                    'x2': secondary_data[i].omega,\n\t                    'y1': d.weight * 0.98,\n\t                    'y2': secondary_data[i].weight * 0.98\n\t                };\n\t            });\n\t\n\t            this.displacement_lines = this.displacement_lines.data(diffs);\n\t            this.displacement_lines.enter().append(\"path\");\n\t            this.displacement_lines.exit().remove();\n\t            this.displacement_lines.transition().attr(\"d\", function (d) {\n\t                return self.makeSpring(self.omega_scale(d.x1), self.omega_scale(d.x2), self.proportion_scale(d.y1 * 0.5), self.proportion_scale(d.y2 * 0.5), 5, 5);\n\t            }).attr(\"marker-end\", \"url(#arrowhead)\").attr(\"class\", \"hyphy-displacement-line\");\n\t        }\n\t    },\n\t    createReferenceLine: function createReferenceLine() {\n\t\n\t        var data_to_plot = this.state.omegas[\"Reference\"];\n\t        var secondary_data = this.state.omegas[\"Test\"];\n\t        var self = this;\n\t\n\t        if (secondary_data) {\n\t            this.reference_omega_lines = this.reference_omega_lines.data(data_to_plot);\n\t            this.reference_omega_lines.enter().append(\"line\");\n\t            this.reference_omega_lines.exit().remove();\n\t\n\t            this.reference_omega_lines.transition().attr(\"x1\", function (d) {\n\t                return self.omega_scale(d.omega);\n\t            }).attr(\"x2\", function (d) {\n\t                return self.omega_scale(d.omega);\n\t            }).attr(\"y1\", function (d) {\n\t                return self.proportion_scale(-0.05);\n\t            }).attr(\"y2\", function (d) {\n\t                return self.proportion_scale(d.weight);\n\t            }).style(\"stroke\", function (d) {\n\t                return \"#d62728\";\n\t            }).attr(\"class\", \"hyphy-omega-line-reference\");\n\t        } else {\n\t            this.reference_omega_lines.remove();\n\t            this.displacement_lines.remove();\n\t        }\n\t    },\n\t    createOmegaLine: function createOmegaLine() {\n\t\n\t        var data_to_plot = this.state.omegas[\"Reference\"];\n\t        var secondary_data = this.state.omegas[\"Test\"];\n\t        var self = this;\n\t\n\t        // ** Omega Line (Red) ** //\n\t        var omega_lines = this.plot.selectAll(\".hyphy-omega-line\").data(secondary_data ? secondary_data : data_to_plot);\n\t        omega_lines.enter().append(\"line\");\n\t        omega_lines.exit().remove();\n\t        omega_lines.transition().attr(\"x1\", function (d) {\n\t            return self.omega_scale(d.omega);\n\t        }).attr(\"x2\", function (d) {\n\t            return self.omega_scale(d.omega);\n\t        }).attr(\"y1\", function (d) {\n\t            return self.proportion_scale(-0.05);\n\t        }).attr(\"y2\", function (d) {\n\t            return self.proportion_scale(d.weight);\n\t        }).style(\"stroke\", function (d) {\n\t            return \"#1f77b4\";\n\t        }).attr(\"class\", \"hyphy-omega-line\");\n\t    },\n\t    createNeutralLine: function createNeutralLine() {\n\t        var self = this;\n\t\n\t        // ** Neutral Line (Blue) ** //\n\t        var neutral_line = this.plot.selectAll(\".hyphy-neutral-line\").data([1]);\n\t        neutral_line.enter().append(\"line\").attr(\"class\", \"hyphy-neutral-line\");\n\t        neutral_line.exit().remove();\n\t        neutral_line.transition().attr(\"x1\", function (d) {\n\t            return self.omega_scale(d);\n\t        }).attr(\"x2\", function (d) {\n\t            return self.omega_scale(d);\n\t        }).attr(\"y1\", 0).attr(\"y2\", this.plot_height);\n\t    },\n\t    createXAxis: function createXAxis() {\n\t\n\t        // *** X-AXIS *** //\n\t        var xAxis = d3.svg.axis().scale(this.omega_scale).orient(\"bottom\");\n\t\n\t        if (this.do_log_plot) {\n\t            xAxis.ticks(10, this.has_zeros ? \".2r\" : \".1r\");\n\t        }\n\t\n\t        var x_axis = this.svg.selectAll(\".x.axis\");\n\t        var x_label;\n\t\n\t        if (x_axis.empty()) {\n\t            x_axis = this.svg.append(\"g\").attr(\"class\", \"x hyphy-axis\");\n\t\n\t            x_label = x_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label x-label\");\n\t        } else {\n\t            x_label = x_axis.select(\".axis-label.x-label\");\n\t        }\n\t\n\t        x_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + (this.plot_height + this.margins[\"top\"]) + \")\").call(xAxis);\n\t        x_label = x_label.attr(\"transform\", \"translate(\" + this.plot_width + \",\" + this.margins[\"bottom\"] + \")\").selectAll(\"text\").data(['\\u03C9']);\n\t        x_label.enter().append(\"text\");\n\t        x_label.text(function (d) {\n\t            return d;\n\t        }).style(\"text-anchor\", \"end\").attr(\"dy\", \"0.0em\");\n\t    },\n\t    createYAxis: function createYAxis() {\n\t\n\t        // *** Y-AXIS *** //\n\t        var yAxis = d3.svg.axis().scale(this.proportion_scale).orient(\"left\").ticks(10, \".1p\");\n\t\n\t        var y_axis = this.svg.selectAll(\".y.hyphy-axis\");\n\t        var y_label;\n\t\n\t        if (y_axis.empty()) {\n\t            y_axis = this.svg.append(\"g\").attr(\"class\", \"y hyphy-axis\");\n\t            y_label = y_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label y-label\");\n\t        } else {\n\t            y_label = y_axis.select(\".hyphy-axis-label.y-label\");\n\t        }\n\t        y_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + this.margins[\"top\"] + \")\").call(yAxis);\n\t        y_label = y_label.attr(\"transform\", \"translate(\" + -this.margins[\"left\"] + \",\" + 0 + \")\").selectAll(\"text\").data([\"Proportion of sites\"]);\n\t        y_label.enter().append(\"text\");\n\t        y_label.text(function (d) {\n\t            return d;\n\t        }).style(\"text-anchor\", \"start\").attr(\"dy\", \"-1em\");\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        return {\n\t            omegas: this.props.omegas,\n\t            settings: this.props.settings\n\t        };\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t        this.setState({\n\t            omegas: nextProps.omegas\n\t        });\n\t    },\n\t\n\t    componentDidUpdate: function componentDidUpdate() {\n\t        this.initialize();\n\t    },\n\t\n\t    componentDidMount: function componentDidMount() {\n\t        this.initialize();\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        var key = this.props.omegas.key,\n\t            label = this.props.omegas.label;\n\t\n\t        this.svg_id = key + \"-svg\";\n\t        this.save_svg_id = \"export-\" + key + \"-svg\";\n\t        this.save_png_id = \"export-\" + key + \"-png\";\n\t\n\t        return React.createElement(\n\t            'div',\n\t            { className: 'col-lg-6' },\n\t            React.createElement(\n\t                'div',\n\t                { className: 'panel panel-default', id: key },\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'panel-heading' },\n\t                    React.createElement(\n\t                        'h3',\n\t                        { className: 'panel-title' },\n\t                        '\\u03C9 distributions under the ',\n\t                        React.createElement(\n\t                            'strong',\n\t                            null,\n\t                            label\n\t                        ),\n\t                        ' model'\n\t                    ),\n\t                    React.createElement(\n\t                        'p',\n\t                        null,\n\t                        React.createElement(\n\t                            'small',\n\t                            null,\n\t                            'Test branches are shown in ',\n\t                            React.createElement(\n\t                                'span',\n\t                                { className: 'hyphy-blue' },\n\t                                'blue'\n\t                            ),\n\t                            ' and reference branches are shown in ',\n\t                            React.createElement(\n\t                                'span',\n\t                                { className: 'hyphy-red' },\n\t                                'red'\n\t                            )\n\t                        )\n\t                    ),\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'btn-group' },\n\t                        React.createElement(\n\t                            'button',\n\t                            { id: this.save_svg_id, type: 'button', className: 'btn btn-default btn-sm' },\n\t                            React.createElement('span', { className: 'glyphicon glyphicon-floppy-save' }),\n\t                            ' SVG'\n\t                        ),\n\t                        React.createElement(\n\t                            'button',\n\t                            { id: this.save_png_id, type: 'button', className: 'btn btn-default btn-sm' },\n\t                            React.createElement('span', { className: 'glyphicon glyphicon-floppy-save' }),\n\t                            ' PNG'\n\t                        )\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'panel-body' },\n\t                    React.createElement('svg', { id: this.svg_id })\n\t                )\n\t            )\n\t        );\n\t    }\n\t});\n\t\n\tvar OmegaPlotGrid = React.createClass({\n\t    displayName: 'OmegaPlotGrid',\n\t\n\t\n\t    getInitialState: function getInitialState() {\n\t        return { omega_distributions: this.getDistributions(this.props.json) };\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t        this.setState({\n\t            omega_distributions: this.getDistributions(nextProps.json)\n\t        });\n\t    },\n\t\n\t    getDistributions: function getDistributions(json) {\n\t\n\t        var omega_distributions = {};\n\t\n\t        if (!json) {\n\t            return [];\n\t        }\n\t\n\t        for (var m in json[\"fits\"]) {\n\t            var this_model = json[\"fits\"][m];\n\t            omega_distributions[m] = {};\n\t            var distributions = [];\n\t            for (var d in this_model[\"rate-distributions\"]) {\n\t                var this_distro = this_model[\"rate-distributions\"][d];\n\t                var this_distro_entry = [d, \"\", \"\", \"\"];\n\t                omega_distributions[m][d] = this_distro.map(function (d) {\n\t                    return {\n\t                        'omega': d[0],\n\t                        'weight': d[1]\n\t                    };\n\t                });\n\t            }\n\t        }\n\t\n\t        _.each(omega_distributions, function (item, key) {\n\t            item.key = key.toLowerCase().replace(/ /g, '-');\n\t            item.label = key;\n\t        });\n\t\n\t        var omega_distributions = _.filter(omega_distributions, function (item) {\n\t            return _.isObject(item[\"Reference\"]);\n\t        });\n\t\n\t        return omega_distributions;\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        var OmegaPlots = _.map(this.state.omega_distributions, function (item, key) {\n\t\n\t            var model_name = key;\n\t            var omegas = item;\n\t\n\t            var settings = {\n\t                svg_id: omegas.key + '-svg',\n\t                dimensions: { width: 600, height: 400 },\n\t                margins: { 'left': 50, 'right': 15, 'bottom': 35, 'top': 35 },\n\t                has_zeros: false,\n\t                legend_id: null,\n\t                do_log_plot: true,\n\t                k_p: null,\n\t                plot: null\n\t            };\n\t\n\t            return React.createElement(OmegaPlot, { name: model_name, omegas: omegas, settings: settings });\n\t        });\n\t\n\t        return React.createElement(\n\t            'div',\n\t            null,\n\t            OmegaPlots\n\t        );\n\t    }\n\t\n\t});\n\t\n\tmodule.exports.OmegaPlot = OmegaPlot;\n\tmodule.exports.OmegaPlotGrid = OmegaPlotGrid;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38)))\n\n/***/ }\n\n});\n//# sourceMappingURL=hyphyvision.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hyphy-vision/dist/hyphyvision.js\n// module id = 30\n// module chunks = 0","import Bootstrap from 'bootstrap/dist/css/bootstrap.css';\nimport {clusterNetwork, graphSummary} from './clusternetwork.js';\nimport {histogram, histogramDistances} from './histogram.js';\nimport {scatterPlot} from './scatterplot.js';\n\nvar misc = require('./misc.js');\nvar helpers = require('./helpers.js');\n\nmodule.exports.clusterNetwork = clusterNetwork;\nmodule.exports.graphSummary = graphSummary;\nmodule.exports.histogram = histogram;\nmodule.exports.histogramDistances = histogramDistances;\nmodule.exports.helpers = helpers;\nmodule.exports.misc = misc;\nmodule.exports.scatterPlot = scatterPlot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/hivtrace.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bootstrap/dist/css/bootstrap.css\n// module id = 32\n// module chunks = 0","var d3 = require('d3'),\n    _ = require('underscore'),\n    misc = require('misc'),\n    helpers = require('helpers');\n\nvar _networkGraphAttrbuteID = \"patient_attribute_schema\";\nvar _networkNodeAttributeID = \"patient_attributes\";\nvar _networkMissing         = 'missing';\nvar _networkMissingOpacity  = '0.1';\nvar _networkMissingColor    = '#999';\nvar _networkContinuousColorStops = 9;\nvar _networkShapeOrdering   = ['circle','square','hexagon','diamond','cross','octagon'];\nvar _defaultFloatFormat     = d3.format(\",.2r\");\nvar _defaultPercentFormat   = d3.format(\",.3p\");\nvar _defaultDateFormat      = d3.time.format(\"%Y-%m-%dT%H:%M:%S.%LZ\");\nvar _defaultDateViewFormat  = d3.time.format(\"%B %d, %Y\");\nvar _defaultDateViewFormatShort  = d3.time.format(\"%B %Y\");\nvar _networkCategorical     = [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\",\"#ffff99\",\"#b15928\"];\nvar _maximumValuesInCategories\t= _networkCategorical.length;\n\nvar _networkSequentialColor = {\n\t\t\t\t\t\t\t\t3: [\"#ffeda0\",\"#feb24c\",\"#f03b20\"],\n\t\t\t\t\t\t\t\t4: [\"#ffffb2\",\"#fecc5c\",\"#fd8d3c\",\"#e31a1c\"],\n\t\t\t\t\t\t\t\t5: [\"#ffffb2\",\"#fecc5c\",\"#fd8d3c\",\"#f03b20\",\"#bd0026\"],\n\t\t\t\t\t\t\t\t6: [\"#ffffb2\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#f03b20\",\"#bd0026\"],\n\t\t\t\t\t\t\t\t7: [\"#ffffb2\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#b10026\"],\n\t\t\t\t\t\t\t\t8: [\"#ffffcc\",\"#ffeda0\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#b10026\"],\n\t\t\t\t\t\t\t\t9: [\"#ffffcc\",\"#ffeda0\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#bd0026\",\"#800026\"]\n\t\t\t\t\t\t\t  };\n\n\nvar _networkPresetColorSchemes = {'trans_categ' : {\n                                    'Other-Male': '#999999',\n                                    'Heterosexual Contact-Male': '#e31a1c',\n                                    'Other-Child': '#ff7f00',\n                                    'Perinatal': '#ff7f00',\n                                    'MSM': '#1f78b4',\n                                    'IDU-Male': '#33a02c',\n                                    'Other-Female': '#999999',\n                                    'IDU-Female': '#33a02c',\n                                    'MSM & IDU': '#33a02c',\n                                    'Missing': '#999999',\n                                    'Heterosexual Contact-Female': '#e31a1c'\n                                 }};\n\n\nvar hivtrace_cluster_network_graph = function (json, network_container, network_status_string, network_warning_tag, button_bar_ui, attributes, filter_edges_toggle, clusters_table, nodes_table, parent_container, options) {\n\n  // [REQ] json                        :          the JSON object containing network nodes, edges, and meta-information\n  // [REQ] network_container           :          the CSS selector of the DOM element where the SVG containing the network will be placed (e.g. '#element')\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] network_warning_tag         :          the CSS selector of the DOM element where the any warning messages would go (e.g. '#element')\n  // [OPT] button_bar_ui               :          the ID of the control bar which can contain the following elements (prefix = button_bar_ui value)\n  //                                                - [prefix]_cluster_operations_container : a drop-down for operations on clusters\n  //                                                - [prefix]_attributes :  a drop-down for operations on attributes\n  //                                                - [prefix]_filter : a text box used to search the graph\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] attributes                  :          A JSON object with mapped node attributes\n\n\n\n\n\n  \tvar self = {};\n\n\n    self._is_CDC_ = options && options ['no_cdc'] ? false : true;\n    self.ww = options && options[\"width\"] ? options[\"width\"] : d3.select(parent_container).property(\"clientWidth\");\n    self.container = network_container;\n    self.nodes = [];\n    self.edges = [];\n    self.clusters = [];\n    self.cluster_sizes = [];\n    self.colorizer = {'selected': function (d) {return d == 'selected' ? d3.rgb(51, 122, 183) : '#FFF'}};\n    self.node_shaper = {'id' : null, 'shaper' : function () { return 'circle' }};\n    self.filter_edges = true,\n    self.hide_hxb2 = false,\n    self.charge_correction = 5,\n    self.margin = {top: 20, right: 10, bottom: 30, left: 10},\n    self.width  = self.ww - self.margin.left - self.margin.right,\n    self.height = self.width * 9 / 16,\n    self.cluster_table = d3.select (clusters_table),\n    self.node_table = d3.select (nodes_table),\n    self.needs_an_update = false,\n    self.json = json,\n    self.hide_unselected = false,\n    self.show_percent_in_pairwise_table = false,\n    self.gradient_id = 0;\n\n    self._additional_node_pop_fields = [];\n    /** this array contains fields that will be appended to node pop-overs in the network tab\n        they will precede all the fields that are shown based on selected labeling */\n\n    if (self._is_CDC_) {\n        self._additional_node_pop_fields.push ('hiv_aids_dx_dt');\n    }\n\n    self._networkPredefinedAttributeTransforms = {\n        /** runtime computed node attributes, e.g. transforms of existing attributes */\n\n\t\t'binned_vl_recent_value' : {\n\t\t\t'depends': 'vl_recent_value',\n\t\t\t'label' : 'binned_vl_recent_value',\n\t\t\t'enum' : [\"≤200\", \"200-10000\", \">10000\"],\n\t\t\t'color_scale' : function () {\n\t\t\t\t\t\t\t return d3.scale.ordinal()\n\t\t\t\t\t\t\t.domain([\"≤200\", \"200-10000\", \">10000\",_networkMissing])\n\t\t\t\t\t\t\t.range(_.union(_networkSequentialColor[3],[_networkMissingColor]))},\n\n\t\t\t'map' : function (node) {\n\t\t\t\tvar vl_value = attribute_node_value_by_id (node, 'vl_recent_value');\n\t\t\t\tif (vl_value != _networkMissing) {\n\t\t\t\t\tif (vl_value <= 200) {\n\t\t\t\t\t\treturn \"≤200\";\n\t\t\t\t\t}\n\t\t\t\t\tif (vl_value <= 10000) {\n\t\t\t\t\t\treturn \"200-10000\";\n\t\t\t\t\t}\n\t\t\t\t\treturn \">10000\";\n\t\t\t\t}\n\t\t\t\treturn _networkMissing;\n\t\t\t}\n\t\t},\n\t\t'hiv_aids_dx_dt_year' : {\n\t\t\t'depends': 'hiv_aids_dx_dt',\n\t\t\t'label' : 'hiv_aids_dx_dt_year',\n\t\t\t'type' : \"String\",\n\t\t\t'map' : function (node) {\n\t\t\t    try {\n                    var value = _defaultDateFormat.parse (attribute_node_value_by_id (node, 'hiv_aids_dx_dt'));\n                    if (value) {\n                        value = \"\" + value.getFullYear();\n                    } else {\n                        value = _networkMissing;\n                    }\n                    return value;\n                }\n                catch (err) {\n                    return _networkMissing;\n                }\n\t\t\t},\n\t\t\t'color_scale': function (attr) {\n\t\t\t\tvar range_without_missing = _.without (attr.value_range,_networkMissing);\n\t\t\t\tvar color_scale = _.compose(d3.interpolateRgb(\"#ffffcc\",\"#800026\"),d3.scale.linear().domain ([range_without_missing[0],range_without_missing[range_without_missing.length-1]]).range([0,1]));\n\t\t\t\treturn function (v) {\n\t\t\t\t\tif (v == _networkMissing) {\n\t\t\t\t\t\treturn _networkMissingColor;\n\t\t\t\t\t}\n\t\t\t\t\treturn color_scale (v);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n\n  var cluster_mapping = {},\n      l_scale = 5000,   // link scale\n      graph_data = self.json,     // the raw JSON network object\n      max_points_to_render = 1024,\n      warning_string     = \"\",\n      singletons         = 0,\n      open_cluster_queue = [],\n      currently_displayed_objects,\n      gravity_scale = d3.scale.pow().exponent (0.5).domain ([1,100000]).range ([0.1,0.15]);\n\n  /*------------ D3 globals and SVG elements ---------------*/\n\n  var network_layout = d3.layout.force()\n    .on(\"tick\", tick)\n    .charge(function(d) { if (d.cluster_id) return self.charge_correction*(-20-5*Math.pow(d.children.length,0.7)); return self.charge_correction*(-5-20*Math.sqrt(d.degree)); })\n    .linkDistance(function(d) { return Math.max(d.length,0.005)*l_scale; })\n    .linkStrength (function (d) { if (d.support !== undefined) { return 2*(0.5-d.support);} return 1;})\n    .chargeDistance (l_scale*0.25)\n    .gravity (gravity_scale(json.Nodes.length))\n    .friction (0.25);\n\n  d3.select(self.container).selectAll (\".my_progress\").remove();\n\n\n  d3.select(self.container).selectAll (\"svg\").remove();\n  self.node_table.selectAll (\"*\").remove();\n  self.cluster_table.selectAll (\"*\").remove();\n\n  var network_svg = d3.select(self.container).append(\"svg:svg\")\n      //.style (\"border\", \"solid black 1px\")\n      .attr(\"id\", \"network-svg\")\n      .attr(\"width\", self.width + self.margin.left + self.margin.right)\n      .attr(\"height\", self.height + self.margin.top + self.margin.bottom);\n\n      //.append(\"g\")\n      // .attr(\"transform\", \"translate(\" + self.margin.left + \",\" + self.margin.top + \")\");\n\n  var legend_svg = network_svg.append (\"g\").attr(\"transform\", \"translate(5,5)\");\n\n  network_svg.append(\"defs\").append(\"marker\")\n      .attr(\"id\", \"arrowhead\")\n      .attr(\"refX\", 9) /* there must be a smarter way to calculate shift*/\n      .attr(\"refY\", 2)\n      .attr(\"markerWidth\",  6)\n      .attr(\"markerHeight\", 4)\n      .attr(\"orient\", \"auto\")\n      .attr(\"stroke\", \"#666666\")\n      .attr(\"fill\", \"#AAAAAA\")\n      .append(\"path\")\n          .attr(\"d\", \"M 0,0 V 4 L6,2 Z\"); //this is actual shape for arrowhead\n\n\n  change_window_size();\n\n\n  /*------------ Network layout code ---------------*/\n  var handle_cluster_click = function (cluster, release) {\n\n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select (\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container.append (\"ul\")\n        .attr (\"id\", id)\n        .attr (\"class\",\"dropdown-menu\")\n        .attr (\"role\", \"menu\");\n    }\n\n    menu_object.selectAll (\"li\").remove();\n\n    var already_fixed = cluster && cluster.fixed == 1;\n\n\n    if (cluster) {\n      menu_object.append(\"li\").append (\"a\")\n                   .attr(\"tabindex\", \"-1\")\n                   .text(\"Expand cluster\")\n                   .on (\"click\", function (d) {\n                      cluster.fixed = 0;\n                      expand_cluster_handler(cluster, true);\n                      menu_object.style (\"display\", \"none\");\n                      });\n\n      menu_object.append(\"li\").append (\"a\")\n                   .attr (\"tabindex\", \"-1\")\n                   .text (\"Center on screen\")\n                   .on (\"click\", function (d) {\n                      cluster.fixed = 0;\n                      center_cluster_handler(cluster);\n                      menu_object.style (\"display\", \"none\");\n                      });\n\n     menu_object.append(\"li\").append (\"a\")\n               .attr (\"tabindex\", \"-1\")\n               .text (function (d) {if (cluster.fixed) return \"Allow cluster to float\"; return \"Hold cluster at current position\";})\n               .on (\"click\", function (d) {\n                  cluster.fixed = !cluster.fixed;\n                  menu_object.style (\"display\", \"none\");\n                  });\n\n     cluster.fixed = 1;\n\n     menu_object.style (\"position\", \"absolute\")\n        .style(\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style(\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style(\"display\", \"block\");\n\n    } else {\n      if (release) {\n        release.fixed = 0;\n      }\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\"click\", function (d) {handle_cluster_click(null, already_fixed ? null : cluster);}, true);\n\n  };\n\n  var handle_node_click = function (node) {\n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select (\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container.append (\"ul\")\n        .attr (\"id\", id)\n        .attr (\"class\",\"dropdown-menu\")\n        .attr (\"role\", \"menu\");\n    }\n\n    menu_object.selectAll (\"li\").remove();\n\n    if (node) {\n      node.fixed = 1;\n      menu_object.append(\"li\").append (\"a\")\n                   .attr(\"tabindex\", \"-1\")\n                   .text(\"Collapse cluster\")\n                   .on (\"click\", function (d) {\n                      node.fixed = 0;\n                      collapse_cluster_handler(node, true)\n                      menu_object.style (\"display\", \"none\");\n                      });\n\n      menu_object.style (\"position\", \"absolute\")\n        .style (\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style (\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style (\"display\", \"block\");\n\n    } else {\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\"click\", function (d) {handle_node_click(null);}, true);\n\n  };\n\n  function get_initial_xy (nodes, cluster_count, exclude ) {\n      var d_clusters = {'id': 'root', 'children': []};\n      for (var k = 0; k < cluster_count; k+=1) {\n       if (exclude !== undefined && exclude[k+1] !== undefined) {continue;}\n          d_clusters.children.push ({'cluster_id' : k+1, 'children': nodes.filter (function (v) {return v.cluster == k+1;})});\n      }\n\n      var treemap = d3.layout.pack()\n      .size([self.width, self.height])\n      //.sticky(true)\n      .children (function (d)  {return d.children;})\n      .value(function(d) { return 1;});\n\n      return treemap.nodes (d_clusters);\n  }\n\n  function prepare_data_to_graph () {\n\n      var graphMe = {};\n      graphMe.all = [];\n      graphMe.edges = [];\n      graphMe.nodes = [];\n      graphMe.clusters = [];\n\n      var expandedClusters = [];\n      var drawnNodes = [];\n\n      self.clusters.forEach (function (x) {\n          // Check if hxb2_linked is in a child\n          var hxb2_exists = x.children.some(function(c) {return c.hxb2_linked}) && self.hide_hxb2;\n          if(!hxb2_exists) {\n            if (x.collapsed) {\n                graphMe.clusters.push (x);\n                graphMe.all.push(x);\n            } else {\n                expandedClusters[x.cluster_id] = true;\n            }\n          }\n      });\n\n      self.nodes.forEach (function (x, i) {\n          if (expandedClusters[x.cluster]) {\n              drawnNodes[i] = graphMe.nodes.length +  graphMe.clusters.length;\n              graphMe.nodes.push(x);\n              graphMe.all.push(x);\n          }\n\n      });\n\n      self.edges.forEach (function (x) {\n\n          if(!(x.removed && self.filter_edges)) {\n            if (drawnNodes[x.source] !== undefined && drawnNodes[x.target] !== undefined) {\n\n                var y = {};\n                for (var prop in x) {\n                    y[prop] = x[prop];\n                }\n\n                y.source = drawnNodes[x.source];\n                y.target = drawnNodes[x.target];\n                graphMe.edges.push(y);\n            }\n          }\n      });\n\n      return graphMe;\n\n  }\n\n  function default_layout (clusters, nodes, exclude_cluster_ids) {\n        var init_layout = get_initial_xy (nodes, self.cluster_sizes.length, exclude_cluster_ids);\n        clusters = init_layout.filter (function (v,i,obj) { return  !(typeof v.cluster_id === \"undefined\");});\n\n        var sizes = network_layout.size();\n\n        _.each (nodes,  function (n) {n.x += n.dx/2; n.y += n.dy/2;});\n        clusters.forEach (collapse_cluster);\n        return [clusters, nodes];\n    }\n\n function change_spacing (delta) {\n    self.charge_correction = self.charge_correction * delta;\n    network_layout.start ();\n }\n\n function change_window_size (delta, trigger) {\n\n    if (delta) {\n\n\t\tvar x_scale = (self.width+delta/2)/self.width;\n\t\tvar y_scale = (self.height+delta/2)/self.height;\n\n        self.width  += delta;\n        self.height += delta;\n\n        var rescale_x = d3.scale.linear().domain (d3.extent (network_layout.nodes(), function (node) {return node.x;}));\n        rescale_x.range (_.map (rescale_x.domain (), function (v) {return v*x_scale;}));\n        //.range ([50,self.width-50]),\n        var rescale_y = d3.scale.linear().domain (d3.extent (network_layout.nodes(), function (node) {return node.y;}));\n        rescale_y.range (_.map (rescale_y.domain (), function (v) {return v*y_scale;}));\n\n        _.each (network_layout.nodes(), function (node) {\n            node.x = rescale_x(node.x);\n            node.y = rescale_y(node.y);\n        });\n\n    }\n\n    self.width  = Math.min (Math.max (self.width, 200), 4000);\n    self.height = Math.min (Math.max (self.height, 200), 4000);\n\n    network_layout.size ([self.width, self.height]);\n    network_svg.attr (\"width\", self.width).attr (\"height\", self.height);\n\n    if (trigger) {\n        network_layout.start ();\n    } else {\n    \tif (delta) {\n    \t\tself.update(true);\n    \t}\n    }\n }\n\n self.compute_adjacency_list = _.once(function () {\n\n    self.nodes.forEach (function (n) {\n        n.neighbors = d3.set();\n    });\n\n    self.edges.forEach (function (e) {\n        self.nodes[e.source].neighbors.add(e.target);\n        self.nodes[e.target].neighbors.add(e.source);\n    });\n\n });\n\n self.compute_local_clustering_coefficients = _.once (function () {\n\n    self.compute_adjacency_list();\n\n    self.nodes.forEach (function (n) {\n        _.defer (function (a_node) {\n            neighborhood_size = a_node.neighbors.size ();\n            if (neighborhood_size < 2) {\n                a_node.lcc = misc.undefined;\n            } else {\n                if (neighborhood_size > 500) {\n                    a_node.lcc = misc.too_large;\n                } else {\n                    // count triangles\n                    neighborhood = a_node.neighbors.values();\n                    counter = 0;\n                    for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n                        for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n                            if (self.nodes [neighborhood[n1]].neighbors.has (neighborhood[n2])) {\n                                counter ++;\n                            }\n                        }\n                    }\n\n                    a_node.lcc = 2 * counter / neighborhood_size / (neighborhood_size - 1);\n                }\n            }\n\n        }, n);\n    });\n\n });\n\n  self.get_node_by_id = function(id) {\n    return self.nodes.filter(function(n) {\n        return n.id == id;\n    })[0];\n\n\n  };\n\n self.compute_local_clustering_coefficients_worker = _.once (function () {\n\n    var worker = new Worker('workers/lcc.js');\n\n    worker.onmessage = function(event) {\n\n      var nodes = event.data.Nodes;\n\n      nodes.forEach(function(n) {\n        node_to_update = self.get_node_by_id(n.id);\n        node_to_update.lcc = n.lcc ? n.lcc : misc.undefined;\n      });\n\n    };\n\n    var worker_obj = {};\n    worker_obj[\"Nodes\"] = self.nodes;\n    worker_obj[\"Edges\"] = self.edges;\n    worker.postMessage(worker_obj);\n\n });\n\n  var estimate_cubic_compute_cost = _.memoize(function (c) {\n    self.compute_adjacency_list();\n    return _.reduce (_.first(_.pluck (c.children, \"degree\").sort (d3.descending),3),function (memo, value) {return memo*value;},1);\n  }, function (c) {return c.cluster_id;});\n\n  self.compute_global_clustering_coefficients = _.once (function () {\n    self.compute_adjacency_list();\n\n    self.clusters.forEach (function (c) {\n         _.defer (function (a_cluster) {\n                cluster_size = a_cluster.children.length;\n                if (cluster_size < 3) {\n                    a_cluster.cc = misc.undefined;\n                } else {\n                    if (estimate_cubic_compute_cost (a_cluster, true) >= 5000000) {\n                        a_cluster.cc = misc.too_large;\n                    } else {\n                        // pull out all the nodes that have this cluster id\n                        member_nodes = [];\n\n                        var triads = 0;\n                        var triangles = 0;\n\n                        self.nodes.forEach (function (n,i) {if (n.cluster == a_cluster.cluster_id) {member_nodes.push (i);}});\n                        member_nodes.forEach (function (node) {\n                            my_neighbors = self.nodes[node].neighbors.values().map (function (d) {return +d;}).sort (d3.ascending);\n                            for (n1 = 0; n1 < my_neighbors.length; n1 += 1) {\n                                for (n2 = n1 + 1; n2 < my_neighbors.length; n2 += 1) {\n                                    triads += 1;\n                                    if (self.nodes[my_neighbors[n1]].neighbors.has (my_neighbors[n2])) {\n                                        triangles += 1;\n                                    }\n                                }\n                            }\n                        });\n\n                        a_cluster.cc = triangles/triads;\n                    }\n                }\n\n            }, c);\n        });\n });\n\n self.mark_nodes_as_processing = function (property) {\n    self.nodes.forEach (function (n) { n[property] = misc.processing; });\n  };\n\n self.compute_graph_stats = function () {\n\n    d3.select (this).classed (\"disabled\", true).select(\"i\").classed ({\"fa-calculator\": false, \"fa-cog\": true, \"fa-spin\": true});\n    self.mark_nodes_as_processing('lcc');\n    self.compute_local_clustering_coefficients_worker();\n    self.compute_global_clustering_coefficients();\n    d3.select (this).remove();\n\n };\n\n\n  /*------------ Constructor ---------------*/\n  function initial_json_load() {\n    var connected_links = [];\n    var total = 0;\n    var exclude_cluster_ids = {};\n    self.has_hxb2_links = false;\n    self.cluster_sizes = [];\n\n    graph_data.Nodes.forEach (function (d) {\n          if (typeof self.cluster_sizes[d.cluster-1]  === \"undefined\") {\n            self.cluster_sizes[d.cluster-1] = 1;\n          } else {\n            self.cluster_sizes[d.cluster-1] ++;\n          }\n          if (\"is_lanl\" in d) {\n            d.is_lanl = d.is_lanl == \"true\";\n          }\n\n\n          if (d.attributes.indexOf (\"problematic\") >= 0) {\n            self.has_hxb2_links = d.hxb2_linked = true;\n          }\n\n    });\n\n     /* add buttons and handlers */\n     /* clusters first */\n\n     if (button_bar_ui) {\n\n\n        $('#' + button_bar_ui + '_cluster_zoom').on('show.bs.modal', function (event) {\n            var link_clicked = $(event.relatedTarget);\n            var cluster_id = link_clicked.data (\"cluster\");\n            var modal = d3.select ('#' + button_bar_ui + '_cluster_zoom');\n            modal.selectAll (\".modal-title\").text (\"Cluster \" + cluster_id);\n\n            $(\"#\" + button_bar_ui + \"_cluster_zoom_svg_export\").on (\"click\", function (e) {\n                helpers.save_image(\"png\", \"#\" + button_bar_ui + \"_cluster_zoom_svg\");\n            });\n\n            var node_indices = {};\n            var used_index   = 0;\n\n            var only_this_cluster = {\n                                        \"Nodes\" : _.map (_.filter (self.nodes, function (n,i) {if (n.cluster == cluster_id) {node_indices [i] = used_index++; return true;} return false;}), function (n) {var nn = _.clone (n); nn.cluster = 1; delete nn[\"parent\"]; return nn;}),\n                                        \"Edges\" : _.map (_.filter (self.edges, function (e) {\n                                            if (e.source in node_indices && e.target in node_indices) {\n                                                return true;\n                                            }\n                                            return false;\n                                        }), function (e) {var ne  = _.clone (e); ne.target = node_indices[ne.target]; ne.source = node_indices[ne.source]; return ne;}),\n\n                                     };\n\n\n            only_this_cluster[_networkGraphAttrbuteID] = self.json[_networkGraphAttrbuteID];\n\n\n            hivtrace_cluster_network_graph (only_this_cluster, \"#\" + button_bar_ui + \"_cluster_zoom_svg\", null, null, null, null, null, null, null, \"#\" + button_bar_ui + \"_cluster_zoom_body\",\n                    {\"expand\" : [1], \"charge\" : 10, \"colorizer\" : self.colorizer, \"node_shaper\" : self.node_shaper,  \"width\" : 600});\n\n        });\n\n        function _cluster_list_view_render (cluster_id, group_by_attribute, the_list) {\n\t\t\tthe_list.selectAll ('*').remove();\n            var allowed_types = {\"String\" : 1, \"Date\": 1, \"Number\" : 1};\n\n\t\t\tvar column_ids = _.filter (self.json[_networkGraphAttrbuteID], function (d) {return d.type in allowed_types;});\n\n\t\t\tvar cluster_nodes = _.filter (self.nodes, function (n) {return n.cluster == cluster_id;});\n\n\t\t\tif (group_by_attribute) {\n                _.each (column_ids, function (column) {\n                    var binned = _.groupBy (cluster_nodes, function (n) {return attribute_node_value_by_id (n, column.raw_attribute_key);});\n                    var sorted_keys = _.keys (binned).sort();\n                    var attribute_record = the_list.append (\"li\");\n                    attribute_record.append (\"code\").text (column.raw_attribute_key);\n                    var attribute_list = attribute_record.append (\"dl\").classed (\"dl-horizontal\", true);\n                    _.each (sorted_keys, function (key) {\n                        attribute_list.append (\"dt\").text (key);\n                        attribute_list.append (\"dd\").text (_.map (binned[key], function (n) {return n.id;}).join (\", \"));\n                    });\n\n                });\n\t\t\t} else {\n                _.each (_.filter (self.nodes, function (n) {return n.cluster == cluster_id;}), function (node) {\n                    var patient_record = the_list.append (\"li\");\n                    patient_record.append (\"code\").text (node.id);\n                    var patient_list = patient_record.append (\"dl\").classed (\"dl-horizontal\", true);\n                    _.each (column_ids, function (column) {\n                        patient_list.append (\"dt\").text (column.raw_attribute_key);\n                        patient_list.append (\"dd\").text (attribute_node_value_by_id (node, column.raw_attribute_key));\n\n                    });\n                });\n            }\n        }\n\n        d3.select('#' + button_bar_ui + '_cluster_list_view_toggle').on ('click', function () {\n                d3.event.preventDefault();\n                var group_by_id = false;\n\n                var button_clicked = $(this);\n                if (button_clicked.data ('view') == 'id') {\n                    button_clicked.data ('view', 'attribute');\n                    button_clicked.text (\"Group by ID\");\n                    group_by_id = false;\n                } else {\n                    button_clicked.data ('view', 'id');\n                    button_clicked.text (\"Group by attribute\");\n                    group_by_id = true;\n                }\n                _cluster_list_view_render (button_clicked.data ('cluster'), !group_by_id, d3.select ('#' + button_bar_ui + '_cluster_list_payload'));\n            });\n\n        $('#' + button_bar_ui + '_cluster_list').on('show.bs.modal', function (event) {\n            var link_clicked = $(event.relatedTarget);\n            var cluster_id = link_clicked.data (\"cluster\");\n            var modal = d3.select ('#' + button_bar_ui + '_cluster_list');\n            modal.selectAll (\".modal-title\").text (\"Listing nodes in cluster \" + cluster_id);\n            $('#' + button_bar_ui + '_cluster_list_view_toggle').data ('cluster', cluster_id);\n\n\n            _cluster_list_view_render (cluster_id, $('#' + button_bar_ui + '_cluster_list_view_toggle').data (\"view\") != \"id\", modal.select ('#' + button_bar_ui + '_cluster_list_payload'));\n\n        });\n\n         var cluster_ui_container = d3.select (\"#\" + button_bar_ui + \"_cluster_operations_container\");\n\n         cluster_ui_container.selectAll (\"li\").remove();\n\n\t\t var cluster_commands =\n         [\n            [\"Expand All\",          function () {return self.expand_some_clusters()},   true, 'hivtrace-expand-all'],\n            [\"Collapse All\",        function () {return self.collapse_some_clusters()}, true, 'hivtrace-collapse-all'],\n            [\"Expand Filtered\",     function () {return self.expand_some_clusters(self.select_some_clusters (function (n) {return n.match_filter;}))},   true, 'hivtrace-expand-filtered'],\n            [\"Collapse Filtered\",   function () {return self.collapse_some_clusters(self.select_some_clusters (function (n) {return n.match_filter;}))}, true, 'hivtrace-collapse-filtered'],\n            [\"Hide problematic clusters\", function (item) {\n                                            d3.select (item).text (self.hide_hxb2 ? \"Hide problematic clusters\" :  \"Show problematic clusters\");\n                                            self.toggle_hxb2 ();\n                                          }, self.has_hxb2_links, 'hivtrace-hide-problematic-clusters']\n        ];\n\n        if (!self._is_CDC_) {\n        \tcluster_commands.push ([\"Show removed edges\",   function (item) {\n                                        self.filter_edges = !self.filter_edges;\n                                        d3.select (item).text (self.filter_edges ? \"Show removed edges\" :  \"Hide removed edges\");\n                                        self.update (false);\n                                     }\n                                    , function () {return _.some (self.edges, function (d) {return d.removed;});}, 'hivtrace-show-removed-edges'])\n\n        }\n\n\n        cluster_commands.forEach (function (item,index) {\n            var handler_callback = item[1];\n            if (item[2]) {\n                this.append (\"li\").append (\"a\")\n                                  .text (item[0])\n                                  .attr (\"href\", \"#\")\n                                  .attr (\"id\", item[3])\n                                  .on (\"click\", function(e) {\n                                    handler_callback(this);\n                                    d3.event.preventDefault();\n                                  });\n            }\n         },cluster_ui_container);\n\n\n         var button_group  = d3.select (\"#\" + button_bar_ui + \"_button_group\");\n\n         if (! button_group.empty()) {\n            button_group.selectAll (\"button\").remove();\n            button_group.append (\"button\").classed (\"btn btn-default btn-sm\", true).attr (\"title\", \"Expand spacing\").on (\"click\", function (d) {change_spacing (5/4);}).append (\"i\").classed (\"fa fa-plus\", true);\n            button_group.append (\"button\").classed (\"btn btn-default btn-sm\", true).attr (\"title\", \"Compress spacing\").on (\"click\", function (d) {change_spacing (4/5);}).append (\"i\").classed (\"fa fa-minus\", true);\n            button_group.append (\"button\").classed (\"btn btn-default btn-sm\", true).attr (\"title\", \"Enlarge window\").on (\"click\", function (d) {change_window_size (100, true);}).append (\"i\").classed (\"fa fa-expand\", true);\n            button_group.append (\"button\").classed (\"btn btn-default btn-sm\", true).attr (\"title\", \"Shrink window\").on (\"click\", function (d) {change_window_size (-100, true);}).append (\"i\").classed (\"fa fa-compress\", true);\n\n\n\t\t\tif (!self._is_CDC_) {\n\t\t\t\tbutton_group.append (\"button\")\n\t\t\t\t  .classed(\"btn btn-default btn-sm\", true)\n\t\t\t\t  .attr(\"title\", \"Compute graph statistics\")\n\t\t\t\t  .attr(\"id\", \"hivtrace-compute-graph-statistics\")\n\t\t\t\t  .on(\"click\", function (d) {_.bind(self.compute_graph_stats,this)();})\n\t\t\t\t  .append(\"i\")\n\t\t\t\t  .classed(\"fa fa-calculator\", true);\n\t\t\t}\n\n            button_group.append (\"button\")\n              .classed(\"btn btn-default btn-sm\", true)\n              .attr(\"title\", \"Save Image\")\n              .attr(\"id\", \"hivtrace-export-image\")\n              .on(\"click\", function(d) { helpers.save_image(\"png\", \"#network-svg\");})\n              .append (\"i\").classed (\"fa fa-image\", true);\n         }\n\n         $(\"#\" + button_bar_ui + \"_filter\").on (\"input propertychange\", _.throttle (function (e) {\n               var filter_value = $(this).val();\n               self.filter (filter_value.split (\" \").filter (function (d) {return d.length > 0;}).map (function (d) {\n               \tif (d.length > 2) {\n                \t\tif (d[0] == '\"' && d[d.length-1] == '\"') {\n               \t\t\treturn {type : 're' , value: new RegExp (\"^\" + d.substr (1, d.length-2) + \"$\",\"i\")};\n               \t\t}\n               \t\tif (d[0] == '<') {\n               \t\t\tvar distance_threshold = parseFloat (d.substr (1));\n               \t\t\tif (distance_threshold > 0) {\n               \t\t\t\treturn {type: 'distance', value: distance_threshold};\n               \t\t\t}\n               \t\t}\n\n               \t}\n               \treturn {type : 're' , value: new RegExp (d,\"i\")};\n               }));\n\n             }, 250));\n\n         $(\"#\" + button_bar_ui + \"_hide_filter\").on (\"change\", _.throttle (function (e) {\n               self.hide_unselected = !self.hide_unselected;\n               self.filter_visibility ();\n               self.update (true);\n            }, 250));\n\n\n         $(\"#\" + button_bar_ui + \"_pairwise_table_pecentage\").on (\"change\", _.throttle (function (e) {\n               self.show_percent_in_pairwise_table = !self.show_percent_in_pairwise_table;\n               render_binned_table  (\"#\" + button_bar_ui + \"_attribute_table\", self.colorizer['category_map'], self.colorizer['category_pairwise']);\n            }, 250));\n    }\n\n\n     if (_networkGraphAttrbuteID in json) {\n        attributes = json[_networkGraphAttrbuteID];\n     } else {\n         if (attributes && \"hivtrace\" in attributes) {\n            attributes = attributes[\"hivtrace\"];\n         }\n    }\n\n     if (attributes) {\n         /*\n            map attributes into nodes and into the graph object itself using\n            _networkGraphAttrbuteID as the key\n         */\n\n\n         if (\"attribute_map\" in attributes) {\n             var attribute_map = attributes[\"attribute_map\"];\n\n             if (\"map\" in attribute_map && attribute_map[\"map\"].length > 0) {\n                 graph_data [_networkGraphAttrbuteID] = attribute_map[\"map\"].map (function (a,i) { return {'label': a, 'type' : null, 'values': {}, 'index' : i, 'range' : 0};});\n\n                 graph_data.Nodes.forEach (function (n) {\n                    n[_networkGraphAttrbuteID] = n.id.split (attribute_map[\"delimiter\"]);\n                    n[_networkGraphAttrbuteID].forEach (function (v,i) {\n                        if (i < graph_data [_networkGraphAttrbuteID].length) {\n                            if (! (v in graph_data [_networkGraphAttrbuteID][i][\"values\"])) {\n                                graph_data [_networkGraphAttrbuteID][i][\"values\"][v] = graph_data [_networkGraphAttrbuteID][i][\"range\"];\n                                graph_data [_networkGraphAttrbuteID][i][\"range\"] += 1;\n                            }\n                        }\n                        //graph_data [_networkGraphAttrbuteID][i][\"values\"][v] = 1 + (graph_data [_networkGraphAttrbuteID][i][\"values\"][v] ? graph_data [_networkGraphAttrbuteID][i][\"values\"][v] : 0);\n                    });\n                });\n\n                graph_data [_networkGraphAttrbuteID].forEach (function (d) {\n                    if (d['range'] < graph_data.Nodes.length && d['range'] > 1 &&d['range' ] <= 20) {\n                        d['type'] = 'category';\n                    }\n                });\n            }\n        }\n\n\n\t\t_.each (self._networkPredefinedAttributeTransforms, function (computed, key) {\n\t\t\tif (!computed['depends'] || _.has (graph_data [_networkGraphAttrbuteID], computed['depends'])) {\n\t\t\t\tvar extension = {};\n\t\t\t\textension[key] = computed;\n\t\t\t\t_.extend (graph_data [_networkGraphAttrbuteID], extension);\n\t\t\t\t_.each (graph_data.Nodes, function (node) {\n\t\t\t\t\tinject_attribute_node_value_by_id (node, key, computed['map'](node));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n        // populate the UI elements\n        if (button_bar_ui) {\n            // decide if the variable can be considered categorical by examining its range\n\n\n            var valid_cats = _.filter (_.map (graph_data [_networkGraphAttrbuteID], function (d,k) {\n                d['raw_attribute_key'] = k;\n                if (d['type'] == \"String\") {\n                    d['value_range'] = _.keys(_.countBy (graph_data.Nodes, function (nd) {\n                        return attribute_node_value_by_id (nd, k);\n                    }));\n                     d['dimension'] = d[\"value_range\"].length;\n                } else {\n\t\t\t\t\tif ('enum' in d) {\n\t\t\t\t\t\t d[\"value_range\"] = _.clone (d[\"enum\"]);\n\t\t\t\t\t\t d[\"value_range\"].push (_networkMissing);\n\t\t\t\t\t\t d['dimension'] = d[\"value_range\"].length;\n\t\t\t\t\t\t d['no-sort'] = true;\n\t\t\t\t\t}\n                }\n                return d;\n            }), function (d) {\n                return 'value_range' in d && d['value_range'].length <= _maximumValuesInCategories;\n            });\n\n            var valid_shapes = _.filter (valid_cats, function (d) {\n                 return d.dimension <= 5;\n            });\n\n\n            // sort values alphabetically for consistent coloring\n\n            _.each ([valid_cats, valid_shapes], function (list) {\n                _.each (list, function (d) {\n                    var values;\n                    if (d['no-sort']) {\n                    \tvalues = d['value_range'];\n                    } else {\n\n                    \tif (d['type'] == \"String\") {\n\n\t\t\t\t\t\t\tvalues = d['value_range'].sort ();\n\n\t\t\t\t\t\t\tif (d.dimension <= _maximumValuesInCategories) {\n\n\t\t\t\t\t\t\t\tvar string_hash = function (str) {\n\t\t\t\t\t\t\t\t\tvar hash   = 5801;\n\t\t\t\t\t\t\t\t\tfor (var ci = 0; ci < str.length; ci++) {\n\t\t\t\t\t\t\t\t\t\tvar charCode = str.charCodeAt (ci);\n\t\t\t\t\t\t\t\t\t\thash = (hash << 5 + hash) + charCode;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn hash;\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tvar hashed   = _.map (values, string_hash);\n\t\t\t\t\t\t\t\tvar available_keys = {};\n\t\t\t\t\t\t\t\tvar reindexed = {};\n\n\t\t\t\t\t\t\t\tfor (var i = 0; i < _maximumValuesInCategories; i++) {\n\t\t\t\t\t\t\t\t\tavailable_keys[i] = true;\n\t\t\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\t\t\t_.each (hashed, function (value, index) {\n\t\t\t\t\t\t\t\t\tif (value < 0) {\n\t\t\t\t\t\t\t\t\t\tvalue = -value;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar first_try = value % _maximumValuesInCategories;\n\t\t\t\t\t\t\t\t\tif (first_try in available_keys) {\n\t\t\t\t\t\t\t\t\t\treindexed[values[index]] = first_try;\n\t\t\t\t\t\t\t\t\t\tdelete available_keys[first_try];\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar second_try = Math.floor (value / _maximumValuesInCategories) % _maximumValuesInCategories;\n\t\t\t\t\t\t\t\t\tif (second_try in available_keys) {\n\t\t\t\t\t\t\t\t\t\treindexed[values[index]] = second_try;\n\t\t\t\t\t\t\t\t\t\tdelete available_keys[second_try];\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar last_resort = parseInt (_.keys (available_keys).sort () [0]);\n\t\t\t\t\t\t\t\t\treindexed[values[index]] = last_resort;\n\t\t\t\t\t\t\t\t\tdelete available_keys[last_resort];\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\td['stable-ish order'] = reindexed;\n\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//values = _.unzip(_.zip (d['value_range'], ordering_map).sort (function (a,b) { if (a[1] < b[1]) return -1; if (a[1] > b[1]) return 1; return 0}))[0]; //d['value_range'].sort ();\n\n\n\t\t\t\t\t\t} else {\n                   \t\t\tvalues = d['value_range'].sort ();\n\t\t\t\t\t\t}\n                    }\n\n\n\n                    var map    = new Object;\n\n                    _.each (values, function (d2, i) {\n                        map[d2] = i;\n                    });\n\n                    d['value_map'] = function (v,key) {return key ? (key == 'lookup' ? _.invert (map) : map) : map[v];};\n\n                })});\n\n\n            var valid_scales = _.filter (_.map (graph_data [_networkGraphAttrbuteID], function (d,k) {\n\n                function determine_scaling (d, values, scales) {\n                    var low_var = Infinity;\n\n\n                    _.each (scales, function (scl) {\n                        d['value_range'] = d3.extent (values);\n                        var bins = _.map (_.range (_networkContinuousColorStops), function () {return 0.});\n                        scl.range ([0,_networkContinuousColorStops-1]).domain (d['value_range']);\n                        _.each (values, function (v) {\n                                bins[Math.floor (scl(v))] ++;\n                        });\n\n                        var mean = values.length / _networkContinuousColorStops;\n                        var vrnc = _.reduce (bins, function (p, c) {\n                            return p + (c-mean)*(c-mean);\n                        });\n\n                        //console.log (d['value_range'], bins);\n\n                        if (vrnc < low_var) {\n                            low_var = vrnc;\n                            d['scale'] = scl;\n                        }\n\n                    });\n                }\n\n                d['raw_attribute_key'] = k;\n                if (d.type == \"Number\") {\n                    var values = _.filter (_.map (graph_data.Nodes, function (nd) {\n                        return attribute_node_value_by_id (nd, k);\n                     }), function (v) {\n                        return v == _networkMissing ? null : v;\n                    });\n                    // automatically determine the scale and see what spaces the values most evenly\n                    determine_scaling (d, values, [d3.scale.linear(), d3.scale.log(), d3.scale.pow().exponent (1/3),  d3.scale.pow().exponent (0.25), d3.scale.pow().exponent (0.5),  d3.scale.pow().exponent (1/8),  d3.scale.pow().exponent (1/16)]);\n\n                } else {\n                    if (d.type == \"Date\") {\n                        var values = _.filter (_.map (graph_data.Nodes, function (nd) {\n                            try {\n                                var a_date = attribute_node_value_by_id (nd, k);\n                                //console.log (k, a_date, _defaultDateFormat.parse (a_date));\n                                inject_attribute_node_value_by_id (nd, k, _defaultDateFormat.parse (a_date));\n                            }\n                            catch (err) {\n                                inject_attribute_node_value_by_id (nd, k, _networkMissing);\n                            }\n                            return attribute_node_value_by_id (nd,k);\n\n                         }), function (v) {\n                            return v == _networkMissing ? null : v;\n                        });\n                        // automatically determine the scale and see what spaces the values most evenly\n                        determine_scaling (d, values, [d3.time.scale()]);\n                    }\n                }\n                return d;\n            }), function (d) {\n                return d.type == \"Number\" || d.type == \"Date\";\n            });\n\n\n\n\n            //valid_cats.splice (0,0, {'label' : 'None', 'index' : -1});\n\n            [d3.select (\"#\" + button_bar_ui + \"_attributes\"),d3.select (\"#\" + button_bar_ui + \"_attributes_cat\")].forEach (function (m) {\n\n                m.selectAll (\"li\").remove();\n\n                var menu_items = [[['None',null,_.partial (handle_attribute_categorical,null)]],[['Categorical', 'heading',null]]].concat(valid_cats.map (function (d,i) {return [[d['label'],d['raw_attribute_key'],_.partial (handle_attribute_categorical, d['raw_attribute_key'])]];}));\n\n\n               if (valid_scales.length) {\n                    menu_items = menu_items.concat ([[['Continuous', 'heading',null]]]).concat (valid_scales.map (function (d,i) {return [[d['label'],d['raw_attribute_key'],\n                            _.partial (handle_attribute_continuous, d['raw_attribute_key'])]];}));\n                }\n\n                var cat_menu = m.selectAll (\"li\")\n                                .data(menu_items);\n\n\n                cat_menu.enter ().append (\"li\").classed (\"disabled\", function (d) {return d[0][1] == 'heading';}).style (\"font-variant\", function (d) {return d[0][1] < -1 ? \"small-caps\" : \"normal\";} );\n\n                cat_menu.selectAll (\"a\").data (function (d) {return d;})\n                                        .enter ()\n                                        .append (\"a\")\n                                        .text (function (d,i,j) {return d[0];})\n                                        .attr (\"style\", function (d,i,j) {if (d[1] == 'heading') return 'font-style: italic'; if (j == 0) { return ' font-weight: bold;'}; return null; })\n                                        .attr ('href', '#')\n                                        .on (\"click\", function (d) { if (d[2]) {d[2].call()}});\n            });\n\n            [d3.select (\"#\" + button_bar_ui + \"_shapes\")].forEach (function (m) {\n\n                m.selectAll (\"li\").remove();\n                var cat_menu = m.selectAll (\"li\")\n                                .data([[['None',null,_.partial (handle_shape_categorical,null)]]].concat(valid_shapes.map (function (d,i) {return [[d['label'],d['raw_attribute_key'],_.partial (handle_shape_categorical, d['raw_attribute_key'])]];})));\n\n                cat_menu.enter ().append (\"li\").style (\"font-variant\", function (d) {return d[0][1] < -1 ? \"small-caps\" : \"normal\";} );\n\n                cat_menu.selectAll (\"a\").data (function (d) {return d;})\n                                        .enter ()\n                                        .append (\"a\")\n                                        .text (function (d,i,j) {return d[0];})\n                                        .attr (\"style\", function (d,i,j) {if (j == 0) { return ' font-weight: bold;'}; return null; })\n                                        .attr ('href', '#')\n                                        .on (\"click\", function (d) { if (d[2]) {d[2].call()}});\n            });\n\n             $(\"#\" + button_bar_ui + \"_opacity_invert\").on (\"click\", function (e) {\n                if (self.colorizer ['opacity_scale']) {\n                    self.colorizer ['opacity_scale'].range (self.colorizer ['opacity_scale'].range().reverse());\n                    self.update(true);\n                    draw_attribute_labels();\n\n                }\n                $(this).toggleClass (\"btn-active btn-default\");\n\n             });\n\n             $(\"#\" + button_bar_ui + \"_attributes_invert\").on (\"click\", function (e) {\n                if (self.colorizer ['category_id']) {\n                    graph_data [_networkGraphAttrbuteID][self.colorizer ['category_id']]['scale'].range ( graph_data [_networkGraphAttrbuteID][self.colorizer ['category_id']]['scale'].range().reverse());\n                    self.clusters.forEach (function (the_cluster) {the_cluster[\"gradient\"] = compute_cluster_gradient (the_cluster, self.colorizer ['category_id']);});\n                    self.update(true);\n                    draw_attribute_labels();\n\n                }\n                $(this).toggleClass (\"btn-active btn-default\");\n\n             });\n\n             [d3.select (\"#\" + button_bar_ui + \"_opacity\")].forEach (function (m) {\n\n\n                m.selectAll (\"li\").remove();\n                var cat_menu = m.selectAll (\"li\")\n                                .data([[['None',null,_.partial (handle_attribute_opacity,null)]]].concat(valid_scales.map (function (d,i) {return [[d['label'],d['raw_attribute_key'],_.partial (handle_attribute_opacity, d['raw_attribute_key'])]];})));\n\n\n                cat_menu.enter ().append (\"li\").style (\"font-variant\", function (d) {return d[0][1] < -1 ? \"small-caps\" : \"normal\";} );\n                cat_menu.selectAll (\"a\").data (function (d) {return d;})\n                                        .enter ()\n                                        .append (\"a\")\n                                        .text (function (d,i,j) {return d[0];})\n                                        .attr (\"style\", function (d,i,j) {if (j == 0) { return ' font-weight: bold;'}; return null; })\n                                        .attr ('href', '#')\n                                        .on (\"click\", function (d) { if (d[2]) {d[2].call()}});\n            });\n\n        }\n    }\n\n    if (self.cluster_sizes.length > max_points_to_render) {\n      var sorted_array = self.cluster_sizes.map (function (d,i) {\n          return [d,i+1];\n        }).sort (function (a,b) {\n          return a[0] - b[0];\n        });\n\n      for (var k = 0; k < sorted_array.length - max_points_to_render; k++) {\n          exclude_cluster_ids[sorted_array[k][1]] = 1;\n      }\n      warning_string = \"Excluded \" + (sorted_array.length -\n\t\t\t\t\t  max_points_to_render) + \" clusters (maximum size \" +\n\t\t\t\t\t  sorted_array[k-1][0] + \" nodes) because only \" +\n\t\t\t\t\t  max_points_to_render + \" points can be shown at once.\";\n    }\n\n    // Initialize class attributes\n    singletons = graph_data.Nodes.filter (function (v,i) { return v.cluster === null; }).length; self.nodes = graph_data.Nodes.filter (function (v,i) { if (v.cluster && typeof exclude_cluster_ids[v.cluster]  === \"undefined\"  ) {connected_links[i] = total++; return true;} return false;  });\n    self.edges = graph_data.Edges.filter (function (v,i) { return connected_links[v.source] != undefined && connected_links[v.target] != undefined});\n    self.edges = self.edges.map (function (v,i) {v.source = connected_links[v.source]; v.target = connected_links[v.target]; v.id = i; return v;});\n\n    compute_node_degrees(self.nodes, self.edges);\n\n    var r = default_layout(self.clusters, self.nodes, exclude_cluster_ids);\n    self.clusters = r[0];\n    self.nodes = r[1];\n    self.clusters.forEach (function (d,i) {\n            cluster_mapping[d.cluster_id] = i;\n            d.hxb2_linked = d.children.some(function(c) {return c.hxb2_linked});\n            var degrees = d.children.map (function (c) {return c.degree;});\n            degrees.sort (d3.ascending);\n            d.degrees = helpers.describe_vector (degrees);\n            d.distances = [];\n            });\n\n\n    self.edges.forEach (function (e,i) {\n    \tself.clusters [cluster_mapping[self.nodes[e.target].cluster]].distances.push (e.length);\n    });\n\n    self.clusters.forEach (function (d,i) {\n            d.distances = helpers.describe_vector (d.distances);\n\t});\n    //self.clusters\n\n\n    self.update();\n\n  }\n\n  function sort_table_toggle_icon (element, value) {\n    if (value) {\n        $(element).data (\"sorted\", value);\n        d3.select (element).selectAll (\"i\").classed (\"fa-sort-amount-desc\", value == \"desc\").classed (\"fa-sort-amount-asc\", value == \"asc\").classed (\"fa-sort\", value == \"unsorted\");\n    } else {\n        var sorted_state = $(element).data (\"sorted\");\n        sort_table_toggle_icon (element, sorted_state == \"asc\" ? \"desc\" : \"asc\");\n        return sorted_state == \"asc\" ? d3.descending: d3.ascending;\n    }\n  }\n\n  function sort_table_by_column (element, datum) {\n    d3.event.preventDefault();\n    var table_element = $(element).closest (\"table\");\n    if (table_element.length) {\n        var sort_on             = parseInt($(element).data (\"column-id\"));\n        var sort_key            = $(element).data (\"sort-on\");\n        var sorted_state        = ($(element).data (\"sorted\"));\n        var sorted_function     = sort_table_toggle_icon (element);\n\n        var sort_accessor = sort_key ? function (x) {var val = x[sort_key]; if (typeof (val) === \"function\") return val (); return val;} : function (x) {return x;};\n\n        d3.select (table_element[0]).select (\"tbody\").selectAll (\"tr\").sort (function (a,b) { return sorted_function (sort_accessor(a[sort_on]), sort_accessor(b[sort_on]));});\n\n        // select all other elements from thead and toggle their icons\n\n        $(table_element).find (\"thead [data-column-id]\")\n                        .filter (function () {return parseInt ($(this).data (\"column-id\")) != sort_on;})\n                        .each (function () { sort_table_toggle_icon (this, \"unsorted\");});\n    }\n  }\n\n  function format_a_cell (data, index, item) {\n\n     var this_sel  = d3.select (item);\n     var current_value = typeof (data.value) === \"function\" ? data.value() : data.value;\n\n     if (\"callback\" in data) {\n        data.callback (item, current_value);\n     } else {\n         var repr = \"format\" in data ?  data.format (current_value) : current_value;\n         if (\"html\" in data) this_sel.html (repr); else this_sel.text(repr);\n         if (\"sort\" in data) {\n            var clicker = this_sel.append (\"a\").property (\"href\", \"#\").on (\"click\", function (d) {sort_table_by_column (this, d);}).attr (\"data-sorted\", \"unsorted\").attr (\"data-column-id\", index).attr (\"data-sort-on\", data.sort);\n            clicker.append (\"i\").classed (\"fa fa-sort\", true).style (\"margin-left\", \"0.2em\");\n          }\n     }\n     if (\"help\" in data) {\n        this_sel.attr (\"title\", data.help);\n     }\n\n  }\n\n  function add_a_sortable_table (container, headers, content) {\n\n        var thead = container.selectAll (\"thead\");\n        if (thead.empty()) {\n            thead = container.append (\"thead\");\n            thead.selectAll (\"tr\").data (headers).enter().append (\"tr\").selectAll (\"th\").data (function (d) {return d;}).enter().append (\"th\").\n                                  call (function (selection) { return selection.each (function (d, i) {\n                                        format_a_cell (d, i, this);\n                                    })\n                                  });\n        }\n\n        var tbody = container.selectAll (\"tbody\");\n        if (tbody.empty()) {\n            tbody = container.append (\"tbody\");\n            tbody.selectAll (\"tr\").data (content).enter().append (\"tr\").selectAll (\"td\").data (function (d) {return d;}).enter().append (\"td\").call (function (selection) { return selection.each (function (d, i) {\n                                        handle_cluster_click\n                                        format_a_cell (d, i, this);\n                                    })\n                                  });\n        }\n\n\n  }\n\n  function _cluster_table_draw_id (element, payload) {\n        var this_cell = d3.select (element);\n        this_cell.selectAll (\"*\").remove();\n        this_cell.append (\"span\").text (payload).style (\"padding-right\", \"0.5em\");\n        this_cell.append (\"button\").classed (\"btn btn-primary btn-xs pull-right\", true).text (\"Zoom\").attr (\"data-toggle\",\"modal\").attr(\"data-target\", \"#\" + button_bar_ui + \"_cluster_zoom\").attr (\"data-cluster\", payload);\n        this_cell.append (\"button\").classed (\"btn btn-xs pull-right\", true).text (\"List\").attr (\"data-toggle\",\"modal\").attr(\"data-target\", \"#\" + button_bar_ui + \"_cluster_list\").attr (\"data-cluster\", payload);\n  }\n\n  function _cluster_table_draw_buttons (element, payload) {\n\n    var this_cell = d3.select (element);\n    var labels = [[payload[0] ? \"expand\" : \"collapse\",0]];\n    if (payload[1]) {\n        labels.push ([\"problematic\",1]);\n    }\n    if (payload[2]) {\n        labels.push ([\"match\",1]);\n    }\n    var buttons = this_cell.selectAll (\"button\").data (labels);\n    buttons.enter().append (\"button\");\n    buttons.exit().remove();\n    buttons.classed (\"btn btn-primary btn-xs\", true).text (function (d) {return d[0];})\n                                                 .attr (\"disabled\", function (d) {return d[1] ? \"disabled\" : null})\n                                                 .on (\"click\", function (d) {\n                                                    if (d[1] == 0) {\n                                                        if (payload[0]) {\n                                                            expand_cluster (self.clusters [payload[payload.length-1] - 1], true);\n                                                        } else {\n                                                            collapse_cluster (self.clusters [payload[payload.length-1] - 1]);\n                                                        }\n                                                        format_a_cell (d3.select (element).datum(), null, element);\n                                                    }\n                                                 });\n\n  };\n\n function _node_table_draw_buttons (element, payload) {\n    var this_cell = d3.select (element);\n    var labels = [[payload[0] ? \"hide\" : \"show\",0]];\n\n    var buttons = this_cell.selectAll (\"button\").data (labels);\n    buttons.enter().append (\"button\");\n    buttons.exit().remove();\n    buttons.classed (\"btn btn-primary btn-xs btn-node-property\", true).text (function (d) {return d[0];})\n                                                 .attr (\"disabled\", function (d) {return d[1] ? \"disabled\" : null})\n                                                 .on (\"click\", function (d) {\n                                                    if (d[1] == 0) {\n                                                        if (payload[0]) {\n                                                            collapse_cluster (self.clusters [payload[payload.length-1] - 1], true);\n                                                        } else {\n                                                            expand_cluster (self.clusters [payload[payload.length-1] - 1]);\n                                                        }\n                                                        format_a_cell (d3.select (element).datum(), null, element);\n                                                    }\n                                                 });\n\n  };\n\n  self.update_volatile_elements = function (container) {\n    container.selectAll (\"td\").filter (function (d,i) {\n        return (\"volatile\" in d);\n    }).each (function (d,i) {\n        format_a_cell (d, i, this);\n    });\n  };\n\n  function draw_node_table () {\n\n    if (self.node_table) {\n        add_a_sortable_table (self.node_table,\n                                // headers\n                              [[{value:\"ID\", sort : \"value\", help: \"Node ID\"},\n                                 {value: \"Status\", sort: \"value\"},\n                                 {value: \"# of links\", sort: \"value\", help: \"Number of links (Node degree)\"},\n                                 {value: \"Cluster\", sort: \"value\", help: \"Which cluster does the node belong to\"}\n                               ]],\n                                 // rows\n                               self.nodes.map (function (n, i) {\n                                return [{\"value\": n.id, help: \"Node ID\"},\n                                        {       \"value\": function () {return [!self.clusters [n.cluster-1].collapsed, n.cluster]},\n                                                \"callback\": _node_table_draw_buttons,\n                                                \"volatile\" : true\n                                        },\n                                        {\"value\" : n.degree, help: \"Node degree\"},\n                                        {\"value\" : n.cluster, help: \"Which cluster does the node belong to\"}];\n\n                                }));\n    }\n  }\n\n  function draw_cluster_table () {\n    if (self.cluster_table) {\n        add_a_sortable_table (self.cluster_table,\n                                // headers\n                              [[{value:\"Cluster ID\", sort : \"value\", help: \"Unique cluster ID\"},\n                                 {value: \"Visibility\", sort: \"value\", help: \"Visibility in the network tab\"},\n                                 {value: \"Size\", sort: \"value\", help: \"Number of nodes in the cluster\"},\n                                 {value: \"# links/node<br>Mean [Median, IQR]\", html : true},\n                                 {value: \"Genetic distance<br>Mean [Median, IQR]\", help: \"Genetic distance among nodes in the cluster\", html: true}\n                               ]],\n                                self.clusters.map (function (d, i) {\n                                 // rows\n                                return [{value: d.cluster_id,\n                                         callback: _cluster_table_draw_id},\n                                        {       value: function () {return [d.collapsed, d.hxb2_linked, d.match_filter, d.cluster_id]},\n                                                callback: _cluster_table_draw_buttons,\n                                                volatile : true\n                                        },\n                                        {value : d.children.length},\n                                        {value : d.degrees, format: function (d) {return _defaultFloatFormat(d['mean']) + \" [\" + _defaultFloatFormat(d['median']) + \", \" + _defaultFloatFormat(d['Q1']) + \" - \" + _defaultFloatFormat(d['Q3']) +\"]\"}},\n                                        {value : d.distances, format: function (d) {return _defaultFloatFormat(d['mean']) + \" [\" + _defaultFloatFormat(d['median']) + \", \" + _defaultFloatFormat(d['Q1']) + \" - \" + _defaultFloatFormat(d['Q3']) +\"]\"}}\n                                        ];\n\n                                })\n                                );\n        }\n  }\n\n  /*------------ Update layout code ---------------*/\n  function update_network_string (draw_me) {\n      if (network_status_string) {\n          var clusters_shown = self.clusters.length-draw_me.clusters.length,\n              clusters_removed = self.cluster_sizes.length - self.clusters.length,\n              nodes_removed = graph_data.Nodes.length - singletons - self.nodes.length;\n\n          /*var s = \"Displaying a network on <strong>\" + self.nodes.length + \"</strong> nodes, <strong>\" + self.clusters.length + \"</strong> clusters\"\n                  + (clusters_removed > 0 ? \" (an additional \" + clusters_removed + \" clusters and \" + nodes_removed + \" nodes have been removed due to network size constraints)\" : \"\") + \". <strong>\"\n                  + clusters_shown +\"</strong> clusters are expanded. Of <strong>\" + self.edges.length + \"</strong> edges, <strong>\" + draw_me.edges.length + \"</strong>, and of  <strong>\" + self.nodes.length  + \" </strong> nodes,  <strong>\" + draw_me.nodes.length + \" </strong> are displayed. \";\n          if (singletons > 0) {\n              s += \"<strong>\" +singletons + \"</strong> singleton nodes are not shown. \";\n          }*/\n\n          var s = \"<span class = 'badge'>\" + self.clusters.length + \"</span> clusters <span class = 'label label-primary'>\" + clusters_shown + \" expanded</span> <span class = 'badge'> \" +\n          \t\t\t\t\t\t\t\t\t self.nodes.length + \"</span> nodes <span class = 'label label-primary'>\" + draw_me.nodes.length + \" shown</span> \" +\n          \t\t\t\t\t\t\t\t\t \"<span class = 'badge'>\" + self.edges.length + \"</span> \" + (self._is_CDC_? \"links\" : \"edges\") +\" <span class = 'label label-primary'>\" + draw_me.edges.length  + \" shown</span>\";\n\n\n          d3.select (network_status_string).html(s);\n    }\n  }\n\n\n  function draw_a_node (container, node) {\n    container = d3.select(container);\n\n    var symbol_type =  (node.hxb2_linked && !node.is_lanl) ? \"cross\" : (node.is_lanl ? \"triangle-down\" : self.node_shaper['shaper'] (node));\n\n    container.attr(\"d\", misc.symbol (symbol_type).size( node_size (node) ))\n        .attr('class', 'node')\n        .classed ('selected_object', function (d) {return d.match_filter})\n        .attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y+ \")\"; })\n        .style('fill', function(d) { return node_color(d); })\n        .style('opacity', function (d) {return node_opacity(d);})\n        .style('display', function (d) {if (d.is_hidden) return 'none'; return null;})\n        .on ('click', handle_node_click)\n        .on ('mouseover', node_pop_on)\n        .on ('mouseout', node_pop_off)\n        .call(network_layout.drag().on('dragstart', node_pop_off));\n\n   }\n\n\n  function draw_a_cluster (container, the_cluster) {\n\n     var container_group = d3.select(container);\n\n     var draw_from   = the_cluster[\"binned_attributes\"] ? the_cluster[\"binned_attributes\"].map (function (d) {return d.concat ([0]);}) : [[null, 1, 0]];\n\n     if (the_cluster.match_filter) {\n        draw_from = draw_from.concat ([[\"selected\",the_cluster.match_filter,1],[\"not selected\",the_cluster.children.length - the_cluster.match_filter,1]]);\n     }\n\n     var sums  = [d3.sum(draw_from.filter (function (d) {return d[2] == 0}),function (d) {return d[1];}),\n                  d3.sum(draw_from.filter (function (d) {return d[2] != 0}),function (d) {return d[1];})];\n\n     var running_totals = [0,0];\n\n     draw_from = draw_from.map (function (d) {  var index = d[2];\n                                                var v = {'container' : container,\n                                                        'cluster': the_cluster,\n                                                        'startAngle' : running_totals[index]/sums[index]*2*Math.PI,\n                                                        'endAngle': (running_totals[index]+d[1])/sums[index]*2*Math.PI,\n                                                        'name': d[0],\n                                                        'rim' : index > 0};\n                                                 running_totals[index] += d[1];\n                                                 return v;\n\n                                             });\n\n\n     var arc_radius = cluster_box_size(the_cluster)*0.5;\n     var paths = container_group.selectAll (\"path\").data (draw_from);\n     paths.enter ().append (\"path\");\n     paths.exit  ().remove();\n\n     paths.classed (\"cluster\", true)\n          .classed (\"hiv-trace-problematic\", function (d) {return the_cluster.hxb2_linked && !d.rim;})\n          .classed (\"hiv-trace-selected\", function (d) {return d.rim;})\n          .attr (\"d\", function (d) {\n                return (d.rim\n                        ? d3.svg.arc().innerRadius(arc_radius+2).outerRadius(arc_radius+5)\n                        : d3.svg.arc().innerRadius(0).outerRadius(arc_radius))(d);\n                })\n          .style (\"fill\", function (d,i) {return d.rim ? self.colorizer ['selected'] (d.name) : (the_cluster[\"gradient\"] ? 'url(#' + the_cluster[\"gradient\"] + ')' : cluster_color (the_cluster, d.name));})\n          .style('display', function (d) {if (the_cluster.is_hidden) return 'none'; return null;})\n          ;\n\n\n\n  }\n\n  function handle_shape_categorical (cat_id) {\n        var set_attr = \"None\";\n\n        [\"#\" + button_bar_ui + \"_shapes\"].forEach (function (m) {\n            d3.select (m).selectAll (\"li\").selectAll (\"a\").attr (\"style\", function (d,i) {if (d[1] == cat_id) { set_attr = d[0]; return ' font-weight: bold;'}; return null; });\n            d3.select (m + \"_label\").html (\"Shape: \" + set_attr + ' <span class=\"caret\"></span>');\n        });\n\n\n         if (cat_id) {\n            var shape_mapper = d3.scale.ordinal().domain (_.range (0,graph_data [_networkGraphAttrbuteID][cat_id].dimension)).range (_networkShapeOrdering);\n            self.node_shaper['id'] = cat_id;\n            self.node_shaper['shaper'] = function (d) {return shape_mapper (graph_data [_networkGraphAttrbuteID][cat_id]['value_map'](attribute_node_value_by_id(d,cat_id)));} ;\n            self.node_shaper['category_map'] = graph_data [_networkGraphAttrbuteID][cat_id]['value_map'];\n        } else {\n            self.node_shaper.id = null;\n            self.node_shaper.shaper = function () { return 'circle' };\n            self.node_shaper['category_map'] = null;\n        }\n        //console.log (graph_data [_networkGraphAttrbuteID][cat_id]['value_map'], self.node_shaper.domain(), self.node_shaper.range());\n        draw_attribute_labels();\n        self.update(true);\n        d3.event.preventDefault();\n  }\n\n  function draw_attribute_labels () {\n\n        legend_svg.selectAll (\"g.hiv-trace-legend\").remove();\n        var offset = 10;\n\n        if (self.colorizer['category_id']) {\n            legend_svg.append (\"g\").attr (\"transform\", \"translate(0,\" + offset + \")\").classed ('hiv-trace-legend',true).append (\"text\").text (\"Color: \" + self.colorizer['category_id']).style (\"font-weight\", \"bold\");\n            offset += 18;\n\n            if (self.colorizer[\"continuous\"]) {\n                var anchor_format = graph_data [_networkGraphAttrbuteID][self.colorizer['category_id']]['type'] == \"Date\" ? _defaultDateViewFormatShort : d3.format(\",.4r\");\n                var scale = graph_data [_networkGraphAttrbuteID][self.colorizer['category_id']]['scale'];\n\n                _.each (_.range (_networkContinuousColorStops), function (value) {\n                     var x =  scale.invert (value);\n                     legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(20,\" + offset + \")\").append (\"text\").text (anchor_format(x));\n                     legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(0,\" + offset + \")\").append (\"circle\").attr (\"cx\", \"8\")\n                                    .attr (\"cy\", \"-4\").attr (\"r\",\"8\").classed (\"legend\",true).style (\"fill\", self.colorizer['category'](x));\n\n                     offset += 18;\n                });\n\n                legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(20,\" + offset + \")\").append (\"text\").text (\"missing\");\n                legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(0,\" + offset + \")\").append (\"circle\").attr (\"cx\", \"8\")\n                                .attr (\"cy\", \"-4\").attr (\"r\",\"8\").classed (\"legend\",true).style (\"fill\", _networkMissingColor);\n\n                offset += 18;\n            } else {\n                _.each (self.colorizer['category_map'](null,'map'), function (value, key) {\n                     legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(20,\" + offset + \")\").append (\"text\").text (key);\n                     legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(0,\" + offset + \")\").append (\"circle\").attr (\"cx\", \"8\").attr (\"cy\", \"-4\").attr (\"r\",\"8\").classed (\"legend\",true).style (\"fill\", self.colorizer['category'](key));\n\n                     offset += 18;\n                });\n            }\n        }\n\n        if (self.node_shaper['id']) {\n            legend_svg.append (\"g\").attr (\"transform\", \"translate(0,\" + offset + \")\").classed ('hiv-trace-legend',true).append (\"text\").text (\"Shape: \" + self.node_shaper['id']).style (\"font-weight\", \"bold\");\n            offset += 18;\n\n            var shape_mapper = d3.scale.ordinal().domain (_.range (0,graph_data [_networkGraphAttrbuteID][self.node_shaper['id']].dimension)).range (_networkShapeOrdering);\n\n            _.each (self.node_shaper['category_map'](null,'map'), function (value, key) {\n                 legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(20,\" + offset + \")\").append (\"text\").text (key);\n\n                 legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(0,\" + offset + \")\").append (\"path\")\n                                                                          .attr (\"transform\", \"translate(5,-5)\")\n                                                                          .attr(\"d\",  misc.symbol(shape_mapper(value)).size( 128 ))\n                                                                          .classed('legend', true)\n                                                                          .style ('fill', 'none');\n\n                 offset += 18;\n            });\n        }\n\n        if (self.colorizer['opacity_id']) {\n            legend_svg.append (\"g\").attr (\"transform\", \"translate(0,\" + offset + \")\").classed ('hiv-trace-legend',true).append (\"text\").text (\"Opacity: \" + self.colorizer['opacity_id']).style (\"font-weight\", \"bold\");\n            offset += 18;\n\n\t\t\tvar anchor_format = graph_data [_networkGraphAttrbuteID][self.colorizer['opacity_id']]['type'] == \"Date\" ? _defaultDateViewFormatShort : d3.format(\",.4r\");\n\t\t\tvar scale = graph_data [_networkGraphAttrbuteID][self.colorizer['opacity_id']]['scale'];\n\n\t\t\t_.each (_.range (_networkContinuousColorStops), function (value) {\n\t\t\t\t var x =  scale.invert (value);\n\t\t\t\t legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(20,\" + offset + \")\").append (\"text\").text (anchor_format(x));\n\t\t\t\t legend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(0,\" + offset + \")\").append (\"circle\").attr (\"cx\", \"8\")\n\t\t\t\t\t\t\t\t.attr (\"cy\", \"-4\").attr (\"r\",\"8\").classed (\"legend\",true).style (\"fill\",\"black\").style (\"opacity\", self.colorizer['opacity'](x));\n\n\t\t\t\t offset += 18;\n\t\t\t});\n\n\t\t\tlegend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(20,\" + offset + \")\").append (\"text\").text (\"missing\");\n\t\t\tlegend_svg.append (\"g\").classed ('hiv-trace-legend',true).attr (\"transform\", \"translate(0,\" + offset + \")\").append (\"circle\").attr (\"cx\", \"8\")\n\t\t\t\t\t\t.attr (\"cy\", \"-4\").attr (\"r\",\"8\").classed (\"legend\",true).style (\"fill\",\"black\").style (\"opacity\", _networkMissingOpacity);\n\n\t\t\toffset += 18;\n        }\n  }\n\n  function compute_cluster_gradient (cluster, cat_id) {\n        if (cat_id) {\n            var id = \"hivtrace-cluster-gradient-\" + (self.gradient_id++);\n            var gradient = network_svg.selectAll(\"defs\").append (\"radialGradient\").attr (\"id\", id);\n            var values = _.map (cluster.children, function (node) {var value = attribute_node_value_by_id (node, cat_id); return value == _networkMissing ? Infinity : value;}).sort(function (a,b) {return (0+a) - (0+b);});\n            var finite = _.filter (values, function (d) {return d < Infinity; });\n            var infinite = values.length - finite.length;\n\n\n            if (infinite) {\n                gradient.append (\"stop\").attr (\"offset\", \"0%\").attr (\"stop-color\", _networkMissingColor);\n                gradient.append (\"stop\").attr (\"offset\", \"\" + (infinite/values.length * 100) + \"%\").attr (\"stop-color\", _networkMissingColor);\n            }\n\n\n            _.each (finite, function (value, index) {\n                   gradient.append (\"stop\").attr (\"offset\", \"\" + ((1+index+infinite) * 100) / values.length + \"%\").attr (\"stop-color\", self.colorizer['category'] (value));\n            });\n            //gradient.append (\"stop\").attr (\"offset\", \"100%\").attr (\"stop-color\", self.colorizer['category'] (dom[1]));\n\n\n            return id;\n        }\n        return null;\n  }\n\n  function handle_attribute_opacity (cat_id) {\n    var set_attr = \"None\";\n\n    [\"#\" + button_bar_ui + \"_opacity\"].forEach (function (m) {\n        d3.select (m).selectAll (\"li\").selectAll (\"a\").attr (\"style\", function (d,i) {if (d[1] == cat_id) { set_attr = d[0]; return ' font-weight: bold;'}; return null; });\n        d3.select (m + \"_label\").html (\"Opacity: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3.select (\"#\" + button_bar_ui + \"_opacity_invert\").style (\"display\", set_attr == \"None\" ? \"none\" : \"inline\").classed (\"btn-active\",false).classed (\"btn-default\",true);\n\n\n\n    self.colorizer['opacity_id']       = cat_id;\n    if (cat_id) {\n        var scale = graph_data [_networkGraphAttrbuteID][cat_id]['scale'];\n        self.colorizer['opacity_scale'] = d3.scale.linear ().domain ([0,_networkContinuousColorStops-1]).range ([0.25,1]);\n        self.colorizer['opacity']          = function (v) {\n                if ( v == _networkMissing) {\n                    return _networkMissingOpacity;\n                }\n                return self.colorizer['opacity_scale'] (scale(v));\n            };\n    } else {\n        self.colorizer['opacity']          = null;\n        self.colorizer['opacity_scale']          = null;\n    }\n\n\n    draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n  function handle_attribute_continuous (cat_id) {\n    var set_attr = \"None\";\n\n    render_chord_diagram (\"#\" + button_bar_ui + \"_aux_svg_holder\", null, null);\n    render_binned_table  (\"#\" + button_bar_ui + \"_attribute_table\", null, null);\n\n    network_svg.selectAll (\"radialGradient\").remove();\n\n    self.clusters.forEach (function (the_cluster) {delete the_cluster['binned_attributes']; delete the_cluster[\"gradient\"]});\n\n    [\"#\" + button_bar_ui + \"_attributes\",\"#\" + button_bar_ui + \"_attributes_cat\"].forEach (function (m) {\n        d3.select (m).selectAll (\"li\").selectAll (\"a\").attr (\"style\", function (d,i) {if (d[1] == cat_id) { set_attr = d[0]; return ' font-weight: bold;'}; return null; });\n        d3.select (m + \"_label\").html (\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3.select (\"#\" + button_bar_ui + \"_attributes_invert\").style (\"display\", set_attr == \"None\" ? \"none\" : \"inline\").classed (\"btn-active\",false).classed (\"btn-default\",true);\n\n    if (cat_id) {\n        //console.log (graph_data [_networkGraphAttrbuteID][cat_id]);\n\n\n        self.colorizer['category']    = _.wrap (d3.scale.linear().range([\"#fff7ec\", \"#fee8c8\", \"#fdd49e\", \"#fdbb84\", \"#fc8d59\", \"#ef6548\", \"#d7301f\", \"#b30000\", \"#7f0000\"]).domain (_.range(_networkContinuousColorStops)),\n                         function (func, arg) {\n                            return func (graph_data [_networkGraphAttrbuteID][cat_id]['scale'](arg));\n                         });        //console.log (self.colorizer['category'].exponent ());\n\n        //console.log (self.colorizer['category'] (graph_data [_networkGraphAttrbuteID][cat_id]['value_range'][0]), self.colorizer['category'] (d['value_range'][1]));\n\n        self.colorizer['category_id'] = cat_id;\n        self.colorizer['continuous'] = true;\n        self.clusters.forEach (function (the_cluster) {the_cluster[\"gradient\"] = compute_cluster_gradient (the_cluster, cat_id);});\n\n\n        var points = [];\n\n        _.each (self.edges, function (e) {\n\n\n            var src  = attribute_node_value_by_id(self.nodes[e.source], cat_id),\n                tgt =  attribute_node_value_by_id(self.nodes[e.target], cat_id);\n\n            if (src != _networkMissing && tgt != _networkMissing) {\n                points.push ({x : src, y : tgt, title: self.nodes[e.source].id + \" (\" + src + \") -- \" + self.nodes[e.target].id + \" (\" + tgt + \")\"});\n            }\n        });\n\t\td3.select (\"#\" + button_bar_ui + \"_aux_svg_holder_enclosed\").style (\"display\", null);\n\n        scatterPlot(points, 400, 400, \"#\" + button_bar_ui + \"_aux_svg_holder\", {x : \"Source\", y : \"Target\"}, graph_data [_networkGraphAttrbuteID][cat_id]['type'] == \"Date\");\n\n    } else {\n        self.colorizer['category']          = null;\n        self.colorizer['category_id']       = null;\n        self.colorizer['continuous']        = false;\n        self.colorizer['category_pairwise'] = null;\n        self.colorizer['category_map']      = null;\n    }\n\n    draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n\n  }\n\n  function handle_attribute_categorical (cat_id) {\n\n    //console.log (cat_id, graph_data [_networkGraphAttrbuteID]);\n\n    var set_attr = \"None\";\n       d3.select (\"#\" + button_bar_ui + \"_attributes_invert\").style (\"display\", \"none\");\n\n    network_svg.selectAll (\"radialGradient\").remove();\n\n    [\"#\" + button_bar_ui + \"_attributes\",\"#\" + button_bar_ui + \"_attributes_cat\"].forEach (function (m) {\n        d3.select (m).selectAll (\"li\").selectAll (\"a\").attr (\"style\", function (d,i) {if (d[1] == cat_id) { set_attr = d[0]; return ' font-weight: bold;'}; return null; });\n        d3.select (m + \"_label\").html (\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n     self.clusters.forEach (function (the_cluster) {delete the_cluster[\"gradient\"]; the_cluster['binned_attributes'] = stratify(attribute_cluster_distribution (the_cluster, cat_id)); });\n\n\n     self.colorizer['continuous']        = false;\n\n     if (cat_id) {\n        if (cat_id in _networkPresetColorSchemes) {\n            var domain = [], range = [];\n            _.each (_networkPresetColorSchemes[cat_id], function (value, key) {\n                domain.push (key);\n                range.push (value);\n            });\n            self.colorizer['category'] = d3.scale.ordinal ().domain (domain).range (range);\n\n        } else {\n        \tif (graph_data[_networkGraphAttrbuteID][cat_id]['color_scale']) {\n        \t\tself.colorizer['category']    = graph_data[_networkGraphAttrbuteID][cat_id]['color_scale'] (graph_data[_networkGraphAttrbuteID][cat_id]);\n        \t} else {\n\n\n            \tself.colorizer['category']    = d3.scale.ordinal ().range(_networkCategorical);\n            \tvar extended_range = _.clone(self.colorizer['category'].range());\n            \textended_range.push (_networkMissingColor);\n\n            \tself.colorizer['category'].domain (_.range (_maximumValuesInCategories+1));\n             \tself.colorizer['category'].range (extended_range);\n\n\t           \tif (graph_data[_networkGraphAttrbuteID][cat_id]['stable-ish order']) {\n            \t\tself.colorizer['category'] = _.wrap (self.colorizer['category'], function (func, arg) {\n            \t\t\tif (arg == _networkMissing) {\n            \t\t\t\treturn func (_maximumValuesInCategories);\n            \t\t\t}\n            \t\t\treturn func (graph_data[_networkGraphAttrbuteID][cat_id]['stable-ish order'][arg]);\n            \t\t});\n            \t\t//console.log (graph_data[_networkGraphAttrbuteID][cat_id]['stable-ish order']);\n            \t}\n\n            }\n        }\n        self.colorizer['category_id'] = cat_id;\n        self.colorizer['category_map'] = graph_data [_networkGraphAttrbuteID][cat_id]['value_map'];\n        //self.colorizer['category_map'][null] =  graph_data [_networkGraphAttrbuteID][cat_id]['range'];\n        self.colorizer['category_pairwise'] = attribute_pairwise_distribution(cat_id, graph_data [_networkGraphAttrbuteID][cat_id].dimension, self.colorizer['category_map']);\n\n\n\n        render_chord_diagram (\"#\" + button_bar_ui + \"_aux_svg_holder\", self.colorizer['category_map'], self.colorizer['category_pairwise']);\n        render_binned_table  (\"#\" + button_bar_ui + \"_attribute_table\", self.colorizer['category_map'], self.colorizer['category_pairwise']);\n    } else {\n        self.colorizer['category']          = null;\n        self.colorizer['category_id']       = null;\n        self.colorizer['category_pairwise'] = null;\n        self.colorizer['category_map']      = null;\n        render_chord_diagram (\"#\" + button_bar_ui + \"_aux_svg_holder\", null, null);\n        render_binned_table  (\"#\" + button_bar_ui + \"_attribute_table\", null, null);\n    }\n\n    draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n  self.filter_visibility = function () {\n  \t self.clusters.forEach (function (c) {\n        c.is_hidden = self.hide_unselected && !c.match_filter;\n    });\n  \t self.nodes.forEach (function (n) {\n        n.is_hidden = self.hide_unselected && !n.match_filter;\n    });\n  };\n\n\n  self.filter = function (conditions, skip_update) {\n\n    var anything_changed = false;\n\n\n    conditions = _.map (['re', 'distance'], function (cnd) {\n\t\treturn _.map (_.filter (conditions, function (v) {\n\t\t\treturn v.type == cnd;\n\t\t}), function (v) {return v.value;});\n\t});\n\n\n\tif (conditions[1].length) {\n\t\t\tself.nodes.forEach (function (n) {\n\t\t\t\tn.length_filter = false;\n\t\t\t});\n\n\t\t _.each (self.edges, function (e) {\n\t\t\tvar did_match = _.some(conditions[1], function (d) {\n\t\t\t\treturn e.length <= d;\n\t\t\t});\n\n\t\t\tif (did_match) {\n\t\t\t\tself.nodes[e.source].length_filter = true;\n\t\t\t\tself.nodes[e.target].length_filter = true;\n\t\t\t}\n    \t});\n\t}\n\n\n    self.clusters.forEach (function (c) {\n        c.match_filter = 0;\n    });\n\n    self.nodes.forEach (function (n) {\n\n        var did_match = _.some(conditions[0], function (regexp) {\n            return regexp.test (n.id) || _.some (n[_networkNodeAttributeID], function (attr) {return regexp.test (attr)});\n        });\n\n\t\tdid_match = did_match || n.length_filter;\n\n        if (did_match != n.match_filter) {\n            n.match_filter = did_match;\n            anything_changed = true;\n        }\n\n        if (n.match_filter) {\n            n.parent.match_filter += 1;\n        }\n    });\n\n\n    if (anything_changed && !skip_update) {\n    \tif (self.hide_unselected) {\n           \t\tself.filter_visibility ();\n        }\n\n        self.update (true);\n    }\n\n  }\n\n  self.update = function (soft, friction) {\n\n    self.needs_an_update = false;\n\n    if (friction) {\n        network_layout.friction (friction);\n    }\n    if (network_warning_tag) {\n        if (warning_string.length) {\n          d3.select (network_warning_tag).text (warning_string).style (\"display\", \"block\");\n          warning_string = \"\";\n        } else {\n          d3.select (network_warning_tag).style (\"display\", \"none\");\n        }\n    }\n\n    var rendered_nodes,\n        rendered_clusters,\n        link;\n\n    if (!soft) {\n\n        var draw_me = prepare_data_to_graph();\n\n\n        network_layout.nodes(draw_me.all)\n            .links(draw_me.edges)\n            .start ();\n\n        update_network_string(draw_me);\n\n        link = network_svg.selectAll(\".link\")\n            .data(draw_me.edges, function (d) {return d.id;});\n\n        link.enter().append(\"line\")\n            .classed (\"link\", true);\n        link.exit().remove();\n\n        link.classed (\"removed\", function (d) {return d.removed;})\n            .classed (\"unsupported\", function (d) { return \"support\" in d && d[\"support\"] > 0.05;})\n            .on (\"mouseover\", edge_pop_on)\n            .on (\"mouseout\", edge_pop_off)\n            .filter (function (d) {return d.directed;})\n            .attr(\"marker-end\", \"url(#arrowhead)\");\n\n\n        rendered_nodes  = network_svg.selectAll('.node')\n            .data(draw_me.nodes, function (d) {return d.id;});\n        rendered_nodes.exit().remove();\n        rendered_nodes.enter().append(\"path\");\n\n        rendered_clusters = network_svg.selectAll (\".cluster-group\").\n          data(draw_me.clusters.map (function (d) {return d;}), function (d) {return d.cluster_id;});\n\n        rendered_clusters.exit().remove();\n        rendered_clusters.enter().append (\"g\").attr (\"class\", \"cluster-group\")\n              .attr (\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y+ \")\"; })\n              .on (\"click\", handle_cluster_click)\n              .on (\"mouseover\", cluster_pop_on)\n              .on (\"mouseout\", cluster_pop_off)\n              .call(network_layout.drag().on(\"dragstart\", cluster_pop_off));\n\n        draw_cluster_table();\n        draw_node_table();\n\n    } else {\n        rendered_nodes = network_svg.selectAll('.node');\n        rendered_clusters = network_svg.selectAll (\".cluster-group\");\n        link = network_svg.selectAll(\".link\");\n    }\n\n    rendered_nodes.each (function (d) {\n              draw_a_node (this, d);\n             });\n\n    rendered_clusters.each (function (d) {\n        draw_a_cluster (this, d);\n    });\n\n    link.style (\"opacity\", function (d) {return Math.max (node_opacity (d.target), node_opacity (d.source))})\n    link.style (\"display\", function (d) {if (d.target.is_hidden || d.source.is_hidden) {return 'none'}; return null;})\n\n\n    if (!soft) {\n        currently_displayed_objects = rendered_clusters[0].length + rendered_nodes[0].length;\n\n        network_layout.on(\"tick\", function() {\n          var sizes = network_layout.size();\n\n          rendered_nodes.attr(\"transform\", function(d) { return \"translate(\" + (d.x = Math.max(10, Math.min(sizes[0] - 10, d.x))) + \",\" + (d.y = Math.max(10, Math.min(sizes[1] - 10, d.y)))+ \")\"; });\n          rendered_clusters.attr(\"transform\", function(d) { return \"translate(\" + (d.x = Math.max(10, Math.min(sizes[0] - 10, d.x))) + \",\" + (d.y = Math.max(10, Math.min(sizes[1] - 10, d.y))) + \")\"; });\n\n          link.attr(\"x1\", function(d) { return d.source.x; })\n              .attr(\"y1\", function(d) { return d.source.y; })\n              .attr(\"x2\", function(d) { return d.target.x; })\n              .attr(\"y2\", function(d) { return d.target.y; });\n        });\n    }  else {\n    \tlink.each (function (d) {\n    \t\td3.select(this).attr(\"x1\", function(d) { return d.source.x; })\n              .attr(\"y1\", function(d) { return d.source.y; })\n              .attr(\"x2\", function(d) { return d.target.x; })\n              .attr(\"y2\", function(d) { return d.target.y; })\n    \t});\n    }\n  }\n\n  function tick() {\n    var sizes = network_layout.size();\n\n    node.attr(\"cx\", function(d) { return d.x = Math.max(10, Math.min(sizes[0] - 10, d.x)); })\n        .attr(\"cy\", function(d) { return d.y = Math.max(10, Math.min(sizes[1] - 10, d.y)); });\n\n    link.attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n\n  }\n\n  /*------------ Node Methods ---------------*/\n  function compute_node_degrees(nodes, edges) {\n      for (var n in nodes) {\n          nodes[n].degree = 0;\n      }\n\n      for (var e in edges) {\n          nodes[edges[e].source].degree++;\n          nodes[edges[e].target].degree++;\n      }\n  }\n\n\n  function  attribute_node_value_by_id (d, id) {\n     if (_networkNodeAttributeID in d && id) {\n        if (id in d[_networkNodeAttributeID]) {\n            var v = d[_networkNodeAttributeID][id];\n\n            if (_.isString (v) && v.length == 0) {\n                return _networkMissing;\n            }\n            return v;\n        }\n     }\n     return _networkMissing;\n  }\n\n  function  inject_attribute_node_value_by_id (d, id, value) {\n     if (_networkNodeAttributeID in d && id) {\n        d[_networkNodeAttributeID][id] = value;\n     }\n  }\n\n  function node_size (d) {\n    var r = 5+Math.sqrt(d.degree); //return (d.match_filter ? 10 : 4)*r*r;\n    return 4*r*r;\n  }\n\n  function node_color(d) {\n\n    /*if (d.match_filter) {\n        return \"white\";\n    }*/\n\n    if (self.colorizer['category_id']) {\n        var v = attribute_node_value_by_id (d, self.colorizer['category_id']);\n        if (self.colorizer['continuous']) {\n            if (v == _networkMissing) {\n                return _networkMissingColor;\n            }\n            //console.log (v, self.colorizer['category'](v));\n        }\n        return self.colorizer['category'](v);\n\n    }\n    return d.hxb2_linked ? \"black\" : (d.is_lanl ? \"red\" : \"gray\");\n  }\n\n function node_opacity(d) {\n    if (self.colorizer['opacity']) {\n        return self.colorizer ['opacity'] (attribute_node_value_by_id (d, self.colorizer['opacity_id']));\n    }\n    return 1.;\n  }\n\n  function cluster_color(d, type) {\n    if (d[\"binned_attributes\"]) {\n        return self.colorizer['category'](type);\n    }\n    return \"#bdbdbd\";\n  }\n\n  function hxb2_node_color(d) {\n    return \"black\";\n  }\n\n  function node_info_string (n) {\n      var str;\n\n      if (!self._is_CDC_) {\n           str =  \"Degree <em>\" + n.degree + \"</em><br>Clustering coefficient <em> \" + misc.format_value (n.lcc, _defaultFloatFormat) + \"</em>\";\n      } else {\n      \t   str =  \"# links <em>\" + n.degree + \"</em>\";\n      }\n\n\t  _.each (_.union(self._additional_node_pop_fields, [self.colorizer['category_id'], self.node_shaper['id'], self.colorizer['opacity_id']]),\n\t  \t\t  function (key) {\n\t  \t\t  \tif (key) {\n\t  \t\t  \t      if (key in graph_data[_networkGraphAttrbuteID]) {\n                          var attribute = attribute_node_value_by_id (n, key);\n\n                           if (graph_data[_networkGraphAttrbuteID][key]['type'] == \"Date\") {\n                            try {\n                                    attribute = _defaultDateViewFormat(attribute);\n                                }\n                                catch (err) {\n\n                                }\n                            }\n                          if (attribute) {\n                             str += \"<br>\"  + key + \" <em>\" + attribute + \"</em>\"\n                          }\n                      }\n\n\t  \t\t  \t}\n\t  \t\t  });\n\n\n      return str;\n  }\n\n  function edge_info_string (n) {\n     var str = \"Length <em>\" + _defaultFloatFormat(n.length) + \"</em>\";\n     if (\"support\" in n) {\n        str += \"<br>Worst triangle-based support (p): <em>\" + _defaultFloatFormat(n.support) + \"</em>\";\n     }\n\n      var attribute = attribute_node_value_by_id (n, self.colorizer['category_id']);\n\n      return str;\n  }\n\n  function node_pop_on (d) {\n      toggle_tooltip (this, true, (self._is_CDC_ ? \"Individual \" : \"Node \") + d.id, node_info_string (d), self.container);\n  }\n\n  function node_pop_off (d) {\n      toggle_tooltip (this, false);\n  }\n\n  function edge_pop_on (e) {\n      toggle_tooltip (this, true, e.source.id + \" - \" + e.target.id, edge_info_string (e), self.container);\n  }\n\n  function edge_pop_off (d) {\n      toggle_tooltip (this, false);\n  }\n\n\n  /*------------ Cluster Methods ---------------*/\n\n  function compute_cluster_centroids (clusters) {\n      for (var c in clusters) {\n          var cls = clusters[c];\n          cls.x = 0.;\n          cls.y = 0.;\n          cls.children.forEach (function (x) { cls.x += x.x; cls.y += x.y; });\n          cls.x /= cls.children.length;\n          cls.y /= cls.children.length;\n      }\n  }\n\n  function collapse_cluster(x, keep_in_q) {\n      self.needs_an_update = true;\n      x.collapsed = true;\n      currently_displayed_objects -= self.cluster_sizes[x.cluster_id-1]-1;\n      if (!keep_in_q) {\n          var idx = open_cluster_queue.indexOf(x.cluster_id);\n          if (idx >= 0) {\n           open_cluster_queue.splice (idx,1);\n          }\n      }\n      compute_cluster_centroids ([x]);\n      return x.children.length;\n  }\n\n  function expand_cluster (x, copy_coord) {\n      self.needs_an_update = true;\n      x.collapsed = false;\n      currently_displayed_objects += self.cluster_sizes[x.cluster_id-1]-1;\n      open_cluster_queue.push (x.cluster_id);\n      if (copy_coord) {\n          x.children.forEach (function (n) { n.x = x.x + (Math.random()-0.5)*x.children.length; n.y = x.y + (Math.random()-0.5)*x.children.length; });\n      } else {\n          x.children.forEach (function (n) { n.x = self.width * 0.25 + (Math.random()-0.5)*x.children.length; n.y = 0.25*self.height + (Math.random()-0.5)*x.children.length; })\n      }\n  }\n\n  function render_binned_table (id, the_map, matrix) {\n\n    var the_table = d3.select (id);\n\n    the_table.selectAll (\"thead\").remove();\n    the_table.selectAll (\"tbody\").remove();\n\n\td3.select (id + \"_enclosed\").style (\"display\", matrix ? null : \"none\");\n\n    if (matrix) {\n\n        var fill = self.colorizer['category'];\n        var lookup =  the_map(null, 'lookup');\n\n\n        var headers = the_table.append (\"thead\").append (\"tr\")\n                      .selectAll (\"th\").data ([\"\"].concat (matrix[0].map (function (d,i) {return lookup [i];})));\n\n        headers.enter().append (\"th\");\n        headers.html (function (d) { return \"<span>&nbsp;\" + d + \"</span>\";}).each (\n            function (d,i) {\n                if (i) {\n                    d3.select (this).insert (\"i\",\":first-child\")\n                        .classed (\"fa fa-circle\", true)\n                        .style (\"color\", function () {return fill (d);});\n                }\n            }\n        );\n\n        if (self.show_percent_in_pairwise_table) {\n\t\t\tvar sum = _.map (matrix, function (row) {\n\t\t\t\treturn _.reduce (row, function (p, c) {return p + c;}, 0);\n\t\t\t});\n\n\t\t\tmatrix = _.map (matrix, function (row, row_index) {\n\t\t\t\treturn _.map (row, function (c) {return c/sum[row_index];});\n       \t\t });\n\t\t}\n\n\n\n\n        var rows = the_table.append (\"tbody\").selectAll (\"tr\").data (matrix.map (function (d, i) {return [lookup[i]].concat (d);}));\n\n        rows.enter ().append (\"tr\");\n        rows.selectAll (\"td\").data (function (d) {return d}).enter().append (\"td\").html (function (d, i) {\n            return i == 0 ? (\"<span>&nbsp;\" + d + \"</span>\") : (self.show_percent_in_pairwise_table ? _defaultPercentFormat (d): d);\n        }).each (function (d, i) {\n                if (i == 0) {\n                    d3.select (this).insert (\"i\",\":first-child\")\n                        .classed (\"fa fa-circle\", true)\n                        .style (\"color\", function () {return fill (d);});\n                }\n\n        });\n\n\n\n    }\n  }\n\n  function render_chord_diagram (id, the_map, matrix) {\n\n        d3.select (id).selectAll (\"svg\").remove();\n\n\t\td3.select (id + \"_enclosed\").style (\"display\", matrix ? null : \"none\");\n\n        if (matrix) {\n\n            var lookup = the_map(null, 'lookup');\n\n\n            var svg = d3.select (id).append (\"svg\");\n\n\n            var chord = d3.layout.chord()\n                .padding(.05)\n                .sortSubgroups(d3.descending)\n                .matrix(matrix);\n\n            var text_offset = 20,\n                width  = 450,\n                height = 450,\n                innerRadius = Math.min(width, height-text_offset) * .41,\n                outerRadius = innerRadius * 1.1;\n\n            var fill = self.colorizer['category'],\n                font_size = 12;\n\n            var text_label = svg.append (\"g\")\n                                .attr(\"transform\", \"translate(\" + width / 2 + \",\" + (height-text_offset)  + \")\")\n                                .append (\"text\")\n                                .attr (\"text-anchor\", \"middle\")\n                                .attr (\"font-size\", font_size)\n                                .text (\"\");\n\n            svg = svg.attr(\"width\", width)\n                .attr(\"height\", height-text_offset)\n                .append(\"g\")\n                .attr(\"transform\", \"translate(\" + width / 2 + \",\" + (height-text_offset) / 2 + \")\");\n\n\n            svg.append(\"g\").selectAll(\"path\")\n                .data(chord.groups)\n              .enter().append(\"path\")\n                .style(\"fill\", function(d)   { return fill(lookup[d.index]); })\n                .style(\"stroke\", function(d) { return fill(lookup[d.index]); })\n                .attr(\"d\", d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius))\n                .on(\"mouseover\", fade(0.1,true))\n                .on(\"mouseout\", fade(1,false));\n\n            svg.append(\"g\")\n                .attr(\"class\", \"chord\")\n              .selectAll(\"path\")\n                .data(chord.chords)\n              .enter().append(\"path\")\n                .attr(\"d\", d3.svg.chord().radius(innerRadius))\n                .style(\"fill\", function(d) { return fill(d.target.index); })\n                .style(\"opacity\", 1);\n\n            // Returns an event handler for fading a given chord group.\n            function fade(opacity,t) {\n              return function(g, i) {\n                text_label.text (t ? lookup[i] : \"\");\n                svg.selectAll(\".chord path\")\n                    .filter(function(d) { return d.source.index != i && d.target.index != i; })\n                  .transition()\n                    .style(\"opacity\", opacity);\n              };\n            }\n        }\n  }\n\n  function attribute_pairwise_distribution (id, dim, the_map, only_expanded) {\n        var scan_from = only_expanded ? draw_me.edges : self.edges;\n        var the_matrix = [];\n        for (var i = 0; i < dim; i+=1) {\n            the_matrix.push([]);\n            for (var j = 0; j < dim; j += 1){\n                the_matrix[i].push (0);\n            }\n        }\n\n\n        _.each (scan_from,\n            function (edge) {\n            \t//console.log (attribute_node_value_by_id(self.nodes[edge.source], id), attribute_node_value_by_id(self.nodes[edge.target], id));\n                the_matrix[the_map(attribute_node_value_by_id(self.nodes[edge.source], id))][the_map(attribute_node_value_by_id(self.nodes[edge.target], id))] += 1;\n            });\n        // check if there are null values\n\n        var haz_null = the_matrix.some (function (d, i) { if (i == dim - 1) {return d.some (function (d2) {return d2 > 0;});} return d[dim-1] > 0;});\n        if (!haz_null) {\n            the_matrix.pop();\n            for (i = 0 ; i < dim - 1; i+=1) {\n                the_matrix[i].pop();\n            }\n        }\n\n        // symmetrize the matrix\n\n\t\tdim = the_matrix.length;\n\n        for (i = 0 ; i < dim; i+=1) {\n            for (j = i; j < dim; j += 1){\n                the_matrix[i][j] += the_matrix[j][i];\n                the_matrix[j][i] = the_matrix[i][j];\n            }\n        }\n\n        return the_matrix;\n  }\n\n  function attribute_cluster_distribution (the_cluster, attribute_id) {\n        if (attribute_id && the_cluster) {\n            return the_cluster.children.map (function (d) {return attribute_node_value_by_id (d, attribute_id);});\n        }\n        return null;\n  }\n\n  function cluster_info_string (id) {\n      var the_cluster = self.clusters[id-1],\n          attr_info = the_cluster[\"binned_attributes\"];\n\n\n\n      var str;\n\n      if (self._is_CDC_) {\n        str = \"<strong>\" + self.cluster_sizes[id-1] + \"</strong> individuals.\" +\n             \"<br>Mean links/individual <em> = \" + _defaultFloatFormat(the_cluster.degrees['mean']) + \"</em>\" +\n             \"<br>Max links/individual <em> = \" + the_cluster.degrees['max'] + \"</em>\";\n      } else {\n        str = \"<strong>\" + self.cluster_sizes[id-1] + \"</strong> nodes.\" +\n             \"<br>Mean degree <em>\" + _defaultFloatFormat(the_cluster.degrees['mean']) + \"</em>\" +\n             \"<br>Max degree <em>\" + the_cluster.degrees['max'] + \"</em>\" +\n             \"<br>Clustering coefficient <em> \" + misc.format_value (the_cluster.cc, _defaultFloatFormat) + \"</em>\";\n\t  }\n\n      if (attr_info) {\n            attr_info.forEach (function (d) { str += \"<br>\" + d[0] + \" <em>\" + d[1] + \"</em>\"});\n      }\n\n      return str;\n  }\n\n  function cluster_pop_on (d) {\n      toggle_tooltip (this, true, \"Cluster \" + d.cluster_id, cluster_info_string (d.cluster_id), self.container);\n  }\n\n  function cluster_pop_off (d) {\n      toggle_tooltip (this, false);\n  }\n\n  function expand_cluster_handler (d, do_update, move_out) {\n    if (d.collapsed) {\n        var new_nodes = self.cluster_sizes[d.cluster_id-1] - 1;\n\n        if (new_nodes > max_points_to_render) {\n            warning_string = \"This cluster is too large to be displayed\";\n        }\n        else {\n            var leftover = new_nodes + currently_displayed_objects - max_points_to_render;\n            if (leftover > 0) {\n              for (k = 0; k < open_cluster_queue.length && leftover > 0; k++) {\n                  var cluster = self.clusters[cluster_mapping[open_cluster_queue[k]]];\n                  leftover -= cluster.children.length - 1;\n                  collapse_cluster(cluster,true);\n              }\n              if (k || open_cluster_queue.length) {\n                  open_cluster_queue.splice (0, k);\n              }\n            }\n\n            if (leftover <= 0) {\n                expand_cluster (d, !move_out);\n            }\n        }\n\n        if (do_update) {\n            self.update(false, 0.6);\n        }\n    }\n    return \"\";\n  }\n\n  function collapse_cluster_handler (d, do_update) {\n    collapse_cluster(self.clusters[cluster_mapping[d.cluster]]);\n    if (do_update) {\n        self.update(false, 0.4);\n    }\n\n  }\n\n  function center_cluster_handler (d) {\n    d.x = self.width/2;\n    d.y = self.height/2;\n    self.update(false, 0.4);\n  }\n\n  function cluster_box_size (c) {\n      return 8*Math.sqrt (c.children.length);\n  }\n\n  self.expand_some_clusters = function(subset)  {\n    subset = subset || self.clusters;\n    subset.forEach (function (x) { expand_cluster_handler (x, false); });\n    self.update ();\n  }\n\n  self.select_some_clusters = function (condition) {\n    return self.clusters.filter (function (c, i) {\n        return _.some(c.children, (function (n) {return condition (n);}));\n    });\n  }\n\n  self.collapse_some_clusters = function(subset) {\n    subset = subset || self.clusters;\n    subset.forEach (function (x) { if (!x.collapsed) collapse_cluster (x); });\n    self.update();\n  }\n\n  self.toggle_hxb2 = function()  {\n    self.hide_hxb2 = !self.hide_hxb2;\n    self.update();\n  }\n\n  $('#reset_layout').click(function(e) {\n    default_layout(clusters, nodes);\n    self.update ();\n    e.preventDefault();// prevent the default anchor functionality\n    });\n\n  function stratify (array) {\n    if (array) {\n        var dict = {},\n            stratified = [];\n\n        array.forEach (function (d) { if (d in dict) {dict[d] += 1;} else {dict[d] = 1;}});\n        for (var uv in dict) {\n            stratified.push ([uv, dict[uv]]);\n        }\n        return stratified.sort (function (a,b) {\n              return a[0] - b[0];\n            });\n     }\n     return array;\n   }\n\n  /*------------ Event Functions ---------------*/\n  function toggle_tooltip(element, turn_on, title, tag, container) {\n    //if (d3.event.defaultPrevented) return;\n\n    if (turn_on && !element.tooltip) {\n\n      // check to see if there are any other tooltips shown\n     ($(\"[role='tooltip']\")).each (function (d) {\n        $(this).remove();\n     });\n\n      var this_box = $(element);\n      var this_data = d3.select(element).datum();\n      element.tooltip = this_box.tooltip({\n                 title: title + \"<br>\" + tag,\n                 html: true,\n                 container: container ? container : 'body',\n               });\n\n      //this_data.fixed = true;\n\n      _.delay (_.bind(element.tooltip.tooltip, element.tooltip), 500, 'show');\n    } else {\n      if (turn_on == false && element.tooltip) {\n        element.tooltip.tooltip('destroy');\n        element.tooltip = undefined;\n      }\n    }\n  }\n\n  initial_json_load();\n  if (options) {\n    if (_.isNumber(options [\"charge\"])) {\n        self.charge_correction = options [\"charge\"];\n    }\n\n    if (\"colorizer\" in options) {\n        self.colorizer = options[\"colorizer\"];\n    }\n\n    if (\"node_shaper\" in options) {\n        self.node_shaper = options[\"node_shaper\"];\n    }\n\n    draw_attribute_labels();\n    network_layout.start ();\n\n    if (_.isArray (options [\"expand\"])) {\n        self.expand_some_clusters (_.filter (self.clusters, function (c) {return options[\"expand\"].indexOf (c.cluster_id) >=0;}));\n    }\n  }\n  return self;\n}\n\n\n\nvar hivtrace_cluster_graph_summary = function (graph, tag) {\n\n    var summary_table = d3.select (tag);\n\n    summary_table = d3.select (tag).select (\"tbody\");\n    if (summary_table.empty()) {\n        summary_table = d3.select (tag).append (\"tbody\");\n    }\n\n\n    var table_data = [];\n\n    if (!summary_table.empty()) {\n        _.each (graph[\"Network Summary\"], function (value, key) {\n        \tif (self._is_CDC_ && key == \"Edges\") {\n        \t\tkey = \"Links\";\n        \t}\n            table_data.push ([key, value]);\n        });\n    }\n\n    var degrees = [];\n    _.each (graph [\"Degrees\"][\"Distribution\"], function (value, index) { for (var k = 0; k < value; k++) {degrees.push (index+1);}});\n    degrees = helpers.describe_vector (degrees);\n    table_data.push (['Links/node', '']);\n    table_data.push (['&nbsp;&nbsp;<i>Mean</i>',  _defaultFloatFormat(degrees['mean'])]);\n    table_data.push (['&nbsp;&nbsp;<i>Median</i>',  _defaultFloatFormat(degrees['median'])]);\n    table_data.push (['&nbsp;&nbsp;<i>Range</i>', degrees['min'] + \" - \" + degrees['max']]);\n    table_data.push (['&nbsp;&nbsp;<i>Interquartile range</i>', degrees['Q1'] + \" - \" + degrees['Q3']]);\n\n    degrees = helpers.describe_vector (graph [\"Cluster sizes\"]);\n    table_data.push (['Cluster sizes', '']);\n    table_data.push (['&nbsp;&nbsp;<i>Mean</i>',  _defaultFloatFormat(degrees['mean'])]);\n    table_data.push (['&nbsp;&nbsp;<i>Median</i>',  _defaultFloatFormat(degrees['median'])]);\n    table_data.push (['&nbsp;&nbsp;<i>Range</i>', degrees['min'] + \" - \" + degrees['max']]);\n    table_data.push (['&nbsp;&nbsp;<i>Interquartile range</i>', degrees['Q1'] + \" - \" + degrees['Q3']]);\n\n    if (self._is_CDC_) {\n      degrees = helpers.describe_vector (_.map (graph [\"Edges\"], function (e) {return e.length;}));\n      table_data.push (['Genetic distances (links only)', '']);\n      table_data.push (['&nbsp;&nbsp;<i>Mean</i>',  _defaultPercentFormat(degrees['mean'])]);\n      table_data.push (['&nbsp;&nbsp;<i>Median</i>',  _defaultPercentFormat(degrees['median'])]);\n      table_data.push (['&nbsp;&nbsp;<i>Range</i>', _defaultPercentFormat(degrees['min']) + \" - \" + _defaultPercentFormat(degrees['max'])]);\n      table_data.push (['&nbsp;&nbsp;<i>Interquartile range</i>', _defaultPercentFormat(degrees['Q1']) + \" - \" + _defaultPercentFormat(degrees['Q3'])]);\n    }\n\n\n    var rows = summary_table.selectAll (\"tr\").data (table_data);\n    rows.enter().append (\"tr\");\n    rows.exit().remove();\n    var columns = rows.selectAll (\"td\").data (function (d) {return d;});\n    columns.enter().append (\"td\");\n    columns.exit();\n    columns.html (function (d) {return d});\n}\n\nmodule.exports.clusterNetwork = hivtrace_cluster_network_graph;\nmodule.exports.graphSummary = hivtrace_cluster_graph_summary;\n\n\n\n// WEBPACK FOOTER //\n// ./src/clusternetwork.js","var d3 = require('d3'),\n    _ = require('underscore'),\n    helpers = require('./helpers.js');\n\nfunction hivtrace_cluster_adjacency_list(obj) {\n\n    var nodes = obj.Nodes,\n        edges = obj.Edges;\n\n    var adjacency_list = {};\n\n    edges.forEach(function(e, i) {\n\n        function in_nodes(n, id) {\n            return n.id == id;\n        }\n\n        var seq_ids = e[\"sequences\"];\n\n        var n1 = nodes.filter(function(n) {\n                return in_nodes(n, seq_ids[0]);\n            })[0],\n            n2 = nodes.filter(function(n) {\n                return in_nodes(n, seq_ids[1]);\n            })[0];\n\n        adjacency_list[n1.id] ? adjacency_list[n1.id].push(n2) : adjacency_list[n1.id] = [n2];\n        adjacency_list[n2.id] ? adjacency_list[n2.id].push(n1) : adjacency_list[n2.id] = [n1];\n\n    });\n\n    return adjacency_list;\n\n}\n\nvar hivtrace_generate_svg_polygon_lookup = {};\n\n_.each (_.range (3,20), function (d) {\n    var angle_step    = Math.PI*2/d;\n    hivtrace_generate_svg_polygon_lookup [d] = _.map (_.range (1,d), function (i) {\n        return [Math.cos (angle_step * i), Math.sin (angle_step * i)];\n    });\n});\n\nfunction hivtrace_generate_svg_symbol (type) {\n    switch (type) {\n        case 'circle':\n        case 'cross':\n        case 'diamond':\n        case 'square':\n        case 'triangle-down':\n        case 'triangle-up':\n            return  d3.svg.symbol().type (type);\n        case 'pentagon':\n            return new hivtrace_generate_svg_polygon().sides(5);\n        case 'hexagon':\n            return new hivtrace_generate_svg_polygon().sides(6);\n        case 'septagon':\n            return new hivtrace_generate_svg_polygon().sides(7);\n        case 'octagon':\n            return new hivtrace_generate_svg_polygon().sides(8);\n    }\n    return node;\n}\n\nvar hivtrace_generate_svg_polygon = function() {\n\n    var self = this;\n\n    self.polygon = function() {\n\n        var path  = \" M\" + self.radius + \" 0\";\n\n        if (self.sides in hivtrace_generate_svg_polygon_lookup) {\n             path += hivtrace_generate_svg_polygon_lookup[self.sides].map (function (value) {\n                return \" L\" + self.radius * value[0] + \" \" + self.radius * value[1];\n             }).join (\" \");\n        } else {\n            var angle_step    = Math.PI*2/self.sides,\n                current_angle = 0;\n            for (i = 0; i < self.sides - 1; i++) {\n                current_angle += angle_step;\n                path += \" L\" + self.radius * Math.cos (current_angle) + \" \" + self.radius * Math.sin (current_angle);\n            }\n        }\n\n        path += \" Z\";\n        return path;\n    };\n\n    self.polygon.sides = function (attr) {\n\n        if (_.isNumber (attr) && attr > 2) {\n            self.sides = attr;\n            return self.polygon;\n        }\n\n        return self.sides;\n\n    };\n\n    self.polygon.type = function () {\n       return self.polygon;\n    };\n\n    self.polygon.size = function(attr) {\n\n        if (_.isNumber (attr)) {\n            self.size = attr;\n            self.radius = Math.sqrt (attr/Math.PI);\n            return self.polygon;\n        }\n\n        return self.size;\n\n    };\n\n    self.polygon.size(64);\n    self.sides = 6;\n\n    return self.polygon;\n\n};\n\nfunction hivtrace_new_cluster_adjacency_list(obj) {\n\n    var nodes = obj.Nodes,\n        edges = obj.Edges;\n\n\n    nodes.forEach (function (n) {\n        n.neighbors = d3.set();\n    });\n\n    edges.forEach (function (e) {\n        nodes[e.source].neighbors.add(e.target);\n        nodes[e.target].neighbors.add(e.source);\n    });\n\n}\n\n// Reconstructs path from floyd-warshall algorithm\nfunction hivtrace_get_path(next, i, j) {\n\n    var all_paths = [];\n    i = parseInt(i);\n    j = parseInt(j);\n\n    for (var c = 0; c < next[i][j].length; c++) {\n\n        var k = next[i][j][c];\n        var intermediate = k;\n\n        if (intermediate === null || intermediate == i) {\n            return [\n                [parseInt(i), parseInt(j)]\n            ];\n        } else {\n\n            var paths_i_k = hivtrace_get_path(next, i, intermediate);\n            var paths_k_j = hivtrace_get_path(next, intermediate, j);\n\n            for (var i_k_index = 0; i_k_index < paths_i_k.length; i_k_index++) {\n                var i_k = paths_i_k[i_k_index];\n                for (var k_j_index = 0; k_j_index < paths_k_j.length; k_j_index++) {\n                    var k_j = paths_k_j[k_j_index];\n                    if (i_k.length) {\n                        if ((i_k[0] == i) && (i_k[i_k.length - 1] == k) && (k_j[0] == k) && (k_j[k_j.length - 1] == j)) {\n                            i_k.pop();\n                            all_paths.push(i_k.concat(k_j));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return all_paths;\n\n}\n\nfunction hivtrace_paths_with_node(node, next, i, j) {\n\n    var paths = hivtrace_get_path(next, i, j);\n\n    // Retrieve intermediary paths\n    paths = paths.map(function(sublist) {\n        return sublist.slice(1, -1);\n    });\n\n    if (!paths) {\n        return 0;\n    }\n\n    var num_nodes = [];\n\n    for (var k = 0; i < paths.length; k++) {\n        sublist = paths[k];\n        num_nodes.push(d3.sum(sublist.map(function(n) {\n            return n == node;\n        })));\n    }\n\n    var mean = d3.mean(num_nodes);\n\n    if (mean === undefined) {\n        mean = 0;\n    }\n\n    return mean;\n\n}\n\n\n// Same as compute shortest paths, but with an additional next parameter for reconstruction\nfunction hivtrace_compute_shortest_paths_with_reconstruction(obj, subset, use_actual_distances) {\n\n    // Floyd-Warshall implementation\n    var distances = [];\n    var next = [];\n    var nodes = obj.Nodes;\n    var edges = obj.Edges;\n    var node_ids = [];\n\n    var adjacency_list = hivtrace_cluster_adjacency_list(obj);\n\n    if (!subset) {\n        subset = Object.keys(adjacency_list);\n    }\n\n    var node_count = subset.length;\n\n    for (var i = 0; i < subset.length; i++) {\n        var a_node = subset[i];\n        var empty_arr = _.range(node_count).map(function(d) {\n            return null;\n        });\n        var zeroes = _.range(node_count).map(function(d) {\n            return null;\n        });\n        distances.push(zeroes);\n        next.push(empty_arr);\n    }\n\n    for (var index = 0; index < subset.length; index++) {\n        var a_node = subset[index];\n        for (var index2 = 0; index2 < subset.length; index2++) {\n            var second_node = subset[index2];\n            if (second_node != a_node) {\n                if (adjacency_list[a_node].map(function(n) {\n                        return n.id;\n                    }).indexOf(second_node) != -1) {\n                    distances[index][index2] = 1;\n                    distances[index2][index] = 1;\n                }\n            }\n        }\n    }\n\n    for (var index_i = 0; index_i < subset.length; index_i++) {\n        var n_i = subset[index_i];\n        for (var index_j = 0; index_j < subset.length; index_j++) {\n            var n_j = subset[index_j];\n            if (index_i == index_j) {\n                next[index_i][index_j] = [];\n            } else {\n                next[index_i][index_j] = [index_i];\n            }\n        }\n    }\n\n    // clone distances\n    var distances2 = _.map(distances, _.clone);\n    var c = 0;\n\n    for (var index_k = 0; index_k < subset.length; index_k++) {\n        var n_k = subset[index_k];\n        for (var index_i = 0; index_i < subset.length; index_i++) {\n            var n_i = subset[index_i];\n            for (var index_j = 0; index_j < subset.length; index_j++) {\n                var n_j = subset[index_j];\n\n                if (n_i != n_j) {\n\n                    d_ik = distances[index_k][index_i];\n                    d_jk = distances[index_k][index_j];\n                    d_ij = distances[index_i][index_j];\n\n                    if (d_ik !== null && d_jk !== null) {\n                        d_ik += d_jk;\n                        if (d_ij === null || (d_ij > d_ik)) {\n                            distances2[index_i][index_j] = d_ik;\n                            distances2[index_j][index_i] = d_ik;\n                            next[index_i][index_j] = [];\n                            next[index_i][index_j] = next[index_i][index_j].concat(next[index_k][index_j]);\n                            continue;\n                        } else if (d_ij == d_ik) {\n                            next[index_i][index_j] = next[index_i][index_j].concat(next[index_k][index_j]);\n                        }\n                    }\n                    c++;\n                    distances2[index_j][index_i] = distances[index_j][index_i];\n                    distances2[index_i][index_j] = distances[index_i][index_j];\n                }\n            }\n        }\n\n        var t = distances2;\n        distances2 = distances;\n        distances = t;\n\n    }\n\n    return {\n        'ordering': subset,\n        'distances': distances,\n        'next': next\n    };\n\n}\n\nfunction hivtrace_filter_to_node_in_cluster(node, obj) {\n\n    var nodes = obj.Nodes,\n        edges = obj.Edges,\n        cluster_id = null;\n\n    // Retrieve nodes that are part of the cluster\n    var node_obj = nodes.filter(function(n) {\n        return node == n.id;\n    });\n\n    if (node_obj) {\n        cluster_id = node_obj[0].cluster;\n    } else {\n        console.log('could not find node');\n        return null;\n    }\n\n    // Filter out all edges and nodes that belong to the cluster\n    var nodes_in_cluster = nodes.filter(function(n) {\n        return cluster_id == n.cluster;\n    });\n    var node_ids = nodes_in_cluster.map(function(n) {\n        return n.id;\n    });\n    var edges_in_cluster = edges.filter(function(e) {\n        return node_ids.indexOf(e.sequences[0]) != -1;\n    });\n\n    var filtered_obj = {};\n    filtered_obj[\"Nodes\"] = nodes_in_cluster;\n    filtered_obj[\"Edges\"] = edges_in_cluster;\n    return filtered_obj;\n\n}\n\nfunction hivtrace_compute_betweenness_centrality_all_nodes_in_cluster(cluster, obj, cb) {\n\n    var nodes = obj.Nodes,\n        edges = obj.Edges;\n\n\n    var nodes_in_cluster = nodes.filter(function(n) {\n        return cluster == n.cluster;\n    });\n    var node_ids = nodes_in_cluster.map(function(n) {\n        return n.id;\n    });\n    var edges_in_cluster = edges.filter(function(e) {\n        return node_ids.indexOf(e.sequences[0]) != -1;\n    });\n\n    var filtered_obj = {};\n    filtered_obj[\"Nodes\"] = nodes_in_cluster;\n    filtered_obj[\"Edges\"] = edges_in_cluster;\n\n    // get length of cluster\n    if (nodes_in_cluster.length > 70) {\n        cb('cluster too large', null);\n        return;\n    }\n\n    // get paths\n    var paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n    var node_ids = nodes_in_cluster.map(function(n) {\n        return n.id;\n    });\n\n    var betweenness = {};\n    nodes_in_cluster.forEach(function(n) {\n        betweenness[n.id] = hivtrace_compute_betweenness_centrality(n.id, filtered_obj, paths);\n    });\n\n    cb(null, betweenness);\n    return;\n\n}\n\n// Returns dictionary of nodes' betweenness centrality\n// Utilizes the Floyd-Warshall Algorithm with reconstruction\nfunction hivtrace_compute_betweenness_centrality(node, obj, paths) {\n\n    if (!paths) {\n        var filtered_obj = hivtrace_filter_to_node_in_cluster(node, obj);\n        paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n    }\n\n    // find index of id\n    var index = paths.ordering.indexOf(node);\n\n    if (index == -1) {\n        return null;\n    }\n\n    var length = paths.distances.length;\n\n    if (length != 2) {\n        scale = 1 / ((length - 1) * (length - 2));\n    } else {\n        scale = 1;\n    }\n\n\n    // If s->t goes through 1, add to sum\n    // Reconstruct each shortest path and check if node is in it\n    var paths_with_node = [];\n    for (var i in _.range(length)) {\n        for (var j in _.range(length)) {\n            paths_with_node.push(hivtrace_paths_with_node(index, paths.next, i, j));\n        }\n    }\n\n    return d3.sum(paths_with_node) * scale;\n\n}\n\n\nfunction hivtrace_compute_node_degrees(obj) {\n\n    var nodes = obj.Nodes,\n        edges = obj.Edges;\n\n    for (var n in nodes) {\n        nodes[n].degree = 0;\n    }\n\n    for (var e in edges) {\n        nodes[edges[e].source].degree++;\n        nodes[edges[e].target].degree++;\n    }\n\n}\n\nfunction hivtrace_get_node_by_id(id, obj) {\n    return obj.Nodes.filter(function(n) {\n        return id == n.id;\n    })[0] || undefined;\n}\n\nfunction hivtrace_compute_cluster_betweenness(obj, callback) {\n\n    var nodes = obj.Nodes;\n\n    function onlyUnique(value, index, self) {\n        return self.indexOf(value) === index;\n    }\n\n    // Get all unique clusters\n    var clusters = nodes.map(function(n) {\n        return n.cluster;\n    });\n    var unique_clusters = clusters.filter(onlyUnique);\n\n    var cb_count = 0;\n\n    function cb(err, results) {\n\n        cb_count++;\n\n        for (var node in results) {\n            hivtrace_get_node_by_id(node, obj)['betweenness'] = results[node];\n        }\n\n        if (cb_count >= unique_clusters.length) {\n            callback('done');\n        }\n\n    }\n\n    // Compute betweenness in parallel\n    unique_clusters.forEach(function(cluster_id) {\n        hivtrace_betweenness_centrality_all_nodes_in_cluster(cluster_id, obj, cb);\n    });\n\n    // once all settled callback\n\n}\n\n\nfunction hivtrace_is_contaminant(node) {\n    return node.attributes.indexOf('problematic') != -1;\n}\n\nfunction hivtrace_convert_to_csv(obj, callback) {\n    //Translate nodes to rows, and then use d3.format\n    hivtrace_compute_node_degrees(obj);\n\n    hivtrace_compute_cluster_betweenness(obj, function(err) {\n        var node_array = obj.Nodes.map(function(d) {\n            return [d.id, d.cluster, d.degree, d.betweenness, hivtrace_is_contaminant(d), d.attributes.join(';')];\n        });\n        node_array.unshift(['seqid', 'cluster', 'degree', 'betweenness', 'is_contaminant', 'attributes']);\n        node_csv = d3.csv.format(node_array);\n        callback(null, node_csv);\n    });\n}\n\nfunction hivtrace_export_csv_button(graph, tag) {\n\n    var data = hivtrace_convert_to_csv(graph, function(err, data) {\n        if (data !== null) {\n            var pom = document.createElement('a');\n            pom.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));\n            pom.setAttribute('download', 'export.csv');\n            pom.className = 'btn btn-default btn-sm';\n            pom.innerHTML = '<span class=\"glyphicon glyphicon-floppy-save\"></span> Export Results';\n            $(tag).append(pom);\n        }\n    });\n\n}\n\nfunction hiv_trace_export_table_to_text(parent_id, table_id, sep) {\n\n    var the_button = d3.select(parent_id);\n    the_button.selectAll (\"[data-type='download-button']\").remove();\n\n    the_button = the_button.append(\"a\")\n        .attr(\"target\", \"_blank\")\n        .attr(\"data-type\", \"download-button\")\n        .on(\"click\", function(data, element) {\n        \td3.event.preventDefault();\n            var table_tag = d3.select(this).attr(\"data-table\");\n            var table_text = helpers.table_to_text(table_tag);\n            helpers.export_handler(table_text, table_tag.substring(1) + \".tsv\", \"text/tab-separated-values\");\n        })\n        .attr(\"data-table\", table_id);\n\n    the_button.append(\"i\").classed(\"fa fa-download fa-2x\", true);\n    return the_button;\n\n}\n\nvar hivtrace_compute_local_clustering_coefficients = _.once (function (obj) {\n\n  hivtrace_new_cluster_adjacency_list(obj);\n\n  var nodes = obj.Nodes;\n\n  nodes.forEach (function (n) {\n\n    var a_node = n;\n    var neighborhood_size = a_node.neighbors.size();\n\n    if (neighborhood_size < 2) {\n        a_node.lcc = undefined;\n    } else {\n\n        if (neighborhood_size > 500) {\n            a_node.lcc = hivtrace_too_large;\n        } else {\n            // count triangles\n            neighborhood = a_node.neighbors.values();\n            counter = 0;\n            for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n                for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n                    if (nodes [neighborhood[n1]].neighbors.has (neighborhood[n2])) {\n                        counter ++;\n                    }\n                }\n            }\n            a_node.lcc = 2 * counter / neighborhood_size / (neighborhood_size - 1);\n        }\n    }\n\n  });\n\n});\n\nfunction hivtrace_render_settings(settings, explanations) {\n    // TODO:\n    //d3.json (explanations, function (error, expl) {\n    //    //console.log (settings);\n    //});\n}\n\nfunction hivtrace_format_value(value, formatter) {\n\n  if (typeof value === 'undefined') {\n      return \"Not computed\";\n  }\n  if (value === hivtrace_undefined) {\n      return \"Undefined\";\n  }\n  if (value === hivtrace_too_large) {\n      return \"Size limit\";\n  }\n\n  if (value === hivtrace_processing) {\n      return '<span class=\"fa fa-spin fa-spinner\"></span>';\n  }\n\n  return formatter ? formatter(value) : value;\n\n}\n\nmodule.exports.compute_node_degrees = hivtrace_compute_node_degrees;\nmodule.exports.export_csv_button = hivtrace_export_csv_button;\nmodule.exports.convert_to_csv = hivtrace_convert_to_csv;\nmodule.exports.betweenness_centrality = hivtrace_compute_betweenness_centrality;\nmodule.exports.betweenness_centrality_all_nodes_in_cluster = hivtrace_compute_betweenness_centrality_all_nodes_in_cluster;\nmodule.exports.cluster_adjacency_list = hivtrace_cluster_adjacency_list;\nmodule.exports.new_cluster_adjacency_list = hivtrace_new_cluster_adjacency_list;\nmodule.exports.analysis_settings = hivtrace_render_settings;\nmodule.exports.export_table_to_text = hiv_trace_export_table_to_text;\nmodule.exports.compute_local_clustering = hivtrace_compute_local_clustering_coefficients;\nmodule.exports.undefined = {};\nmodule.exports.too_large = {};\nmodule.exports.processing = {};\nmodule.exports.format_value = hivtrace_format_value;\nmodule.exports.polygon = hivtrace_generate_svg_polygon;\nmodule.exports.symbol = hivtrace_generate_svg_symbol;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc.js","var d3 = require('d3'),\n    _ = require('underscore');\n\nfunction hivtrace_histogram(graph, histogram_tag, histogram_label) {  \n\n  var defaultFloatFormat = d3.format(\",.2f\");\n  var histogram_w = 300,\n  histogram_h = 300;\n\n  hivtrace_render_histogram(graph[\"Degrees\"][\"Distribution\"], \n                            graph[\"Degrees\"][\"fitted\"], \n                            histogram_w, \n                            histogram_h, \n                            histogram_tag);\n                            \n  var label = \"Network degree distribution is best described by the <strong>\" + graph[\"Degrees\"][\"Model\"] + \"</strong> model, with &rho; of \" + \n             defaultFloatFormat(graph[\"Degrees\"][\"rho\"]);\n             \n  if (graph[\"Degrees\"][\"rho CI\"] != undefined) {\n        label += \" (95% CI \" + defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][0]) + \" - \" + defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][1]) + \")\";\n  }\n\n  d3.select (histogram_label).html(label);\n}\n\nfunction hivtrace_histogram_distances (graph, histogram_tag, histogram_label) {  \n\n  var defaultFloatFormat = d3.format(\",.3p\");\n  var histogram_w = 300,\n  histogram_h = 300;\n\n  var edge_lengths = _.map (graph[\"Edges\"], function (edge) {return edge.length;});\n  \n\n  hivtrace_render_histogram_continuous(edge_lengths, \n                            histogram_w, \n                            histogram_h, \n                            histogram_tag);\n                            \n  var label = \"Genetic distances among linked nodes.\";\n  d3.select (histogram_label).html(label);\n}\n\nfunction hivtrace_render_histogram_continuous (data, w, h, id) {\n\n\tvar margin = {top: 10, right: 30, bottom: 50, left: 30},\n\t\t\t\twidth = w - margin.left - margin.right,\n\t\t\t\theight = h - margin.top - margin.bottom;\n\n\n    var histogram_data = d3.layout.histogram()(data);\n\n\n\n\tvar x = d3.scale.linear()\n\t\t\t.domain(d3.extent (data))\n\t\t\t.range([0, width]);\n\t\t\n\tvar y = d3.scale.linear ()\n\t\t\t.domain ([0, d3.max (_.map (histogram_data, function (b) {return b.y}))])\n\t\t\t.range  ([height,0]); \n\t\t\n\t\n\tvar xAxis = d3.svg.axis()\n\t\t.scale(x)\n\t\t.orient(\"bottom\");\n\n\tvar yAxis = d3.svg.axis()\n\t\t.scale(y)\n\t\t.orient(\"left\");\n\t\t\n\tvar histogram_svg = d3.select(id).selectAll(\"svg\");\n\n\tif (histogram_svg) {\n\t\thistogram_svg.remove();\n\t}\n\n\thistogram_data.splice (0, 0, {'x' : x.domain ()[0], 'y' : 0, 'dx' : 0});\n\thistogram_data.splice (histogram_data.length, 0, {'x' : x.domain ()[1], 'y' : 0, 'dx' : 0});\n\n\thistogram_svg = d3.select(id).insert(\"svg\",\".histogram-label\")\n\t\t\t\t\t.attr(\"width\", width + margin.left + margin.right)\n\t\t\t\t\t.attr(\"height\", height + margin.top + margin.bottom)\n\t\t\t\t\t.append(\"g\")\n\t\t\t\t\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\t\t\t\t\t.datum (histogram_data);\n\t\n\tvar histogram_line = d3.svg.line()\n\t\t\t\t\t\t.x(function(d) { return x(d.x+d.dx); })\n\t\t\t\t\t\t.y(function(d) { return y(d.y); })\n\t\t\t\t\t\t.interpolate(\"step-before\");\n\t\t\t\t\t\n\thistogram_svg.selectAll (\"path\").remove();\n\thistogram_svg.append (\"path\")\n\t\t\t\t .attr (\"d\", function(d) { return histogram_line(d) + \"Z\"; })\n\t\t\t\t .attr (\"class\", \"histogram\");\n\n  \n\n\tvar x_axis = histogram_svg.append(\"g\")\n\t\t.attr(\"class\", \"x axis\")\n\t\t.attr(\"transform\", \"translate(0,\" + height + \")\")\n\t\t.call(xAxis);    \n\t\n\tx_axis.selectAll (\"text\").attr (\"transform\", \"rotate(45)\").attr(\"dx\",\"1em\").attr(\"dy\",\"0.5em\");\n\n\tvar y_axis = histogram_svg.append(\"g\")\n\t\t.attr(\"class\", \"y axis\")\n\t\t//.attr(\"transform\", \"translate(0,\" + height + \")\")\n\t\t.call(yAxis);    \n\t\n}\n\nfunction hivtrace_render_histogram(counts, fit, w, h, id) {\n\n\tvar margin = {top: 10, right: 30, bottom: 50, left: 30},\n\t\t\t\twidth = w - margin.left - margin.right,\n\t\t\t\theight = h - margin.top - margin.bottom;\n\n\tvar x = d3.scale.linear()\n\t\t\t.domain([0, counts.length+1])\n\t\t\t.range([0, width]);\n\t\t\n\tvar y = d3.scale.log()\n\t\t\t.domain ([1, d3.max (counts)])\n\t\t\t.range  ([height,0]);\n\t\t\n\tvar total = d3.sum(counts);\n\n\tvar xAxis = d3.svg.axis()\n\t\t.scale(x)\n\t\t.orient(\"bottom\");\n\t\n\tvar histogram_svg = d3.select(id).selectAll(\"svg\");\n\n\tif (histogram_svg) {\n\t\thistogram_svg.remove();\n\t}\n\n\tvar data_to_plot = counts.map (function (d, i) {return {'x' : i+1, 'y' : d+1};});\n\tdata_to_plot.push ({'x' : counts.length+1, 'y' : 1});\n\tdata_to_plot.push ({'x' : 0, 'y' : 1});\n\tdata_to_plot.push ({'x' : 0, 'y' : counts[0]+1});\n\n\thistogram_svg = d3.select(id).insert(\"svg\",\".histogram-label\")\n\t.attr(\"width\", width + margin.left + margin.right)\n\t.attr(\"height\", height + margin.top + margin.bottom)\n\t.append(\"g\")\n\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\t.datum (data_to_plot);\n\t\n\tvar histogram_line = d3.svg.line()\n\t\t\t\t\t\t.x(function(d) { return x(d.x); })\n\t\t\t\t\t\t.y(function(d) { return y(d.y); })\n\t\t\t\t\t\t.interpolate(\"step-before\");\n\t\t\t\t\t\n\thistogram_svg.selectAll (\"path\").remove();\n\thistogram_svg.append (\"path\")\n\t\t\t\t .attr (\"d\", function(d) { return histogram_line(d) + \"Z\"; })\n\t\t\t\t .attr (\"class\", \"histogram\");\n\n  \n\n\t  if (fit) {    \n\t\t  var fit_line = d3.svg.line()\n\t\t\t  .interpolate(\"linear\")\n\t\t\t  .x(function(d,i) { return x(i+1) + (x(i+1)-x(i))/2; })\n\t\t\t  .y(function(d) { return y(1+d*total); });\n\t\t  histogram_svg.append(\"path\").datum(fit)\n\t\t\t.attr(\"class\", \"line\")\n\t\t\t.attr(\"d\", function(d) { return fit_line(d); });\n\t  }\n\n\tvar x_axis = histogram_svg.append(\"g\")\n\t\t.attr(\"class\", \"x axis\")\n\t\t.attr(\"transform\", \"translate(0,\" + height + \")\")\n\t\t.call(xAxis);    \n\t\n\tx_axis.selectAll (\"text\").attr (\"transform\", \"rotate(45)\").attr(\"dx\",\"1em\").attr(\"dy\",\"0.5em\");\n}\n\nexports.histogram = hivtrace_histogram;\nexports.histogramDistances = hivtrace_histogram_distances;\n\n\n\n// WEBPACK FOOTER //\n// ./src/histogram.js","var d3 = require('d3'),\n    _ = require('underscore');\n\nfunction hivtrace_render_scatterplot(points, w, h, id, labels, dates) {\n\n    var margin = {top: 10, right: 10, bottom: 100, left: 100},\n                width = w - margin.left - margin.right,\n                height = h - margin.top - margin.bottom;\n\n\n    var x = (dates ? d3.time.scale () : d3.scale.linear())\n            .domain(d3.extent (points, function (p) {return p.x;}))\n            .range([0, width]);\n\n    var y = (dates ? d3.time.scale () : d3.scale.linear())\n            .domain (d3.extent (points, function (p) {return p.y;}))\n            .range  ([height,0]);\n\n    var xAxis = d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\").tickFormat (dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n    var yAxis = d3.svg.axis()\n        .scale(y)\n        .orient(\"left\").tickFormat (dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n    var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n    if (!histogram_svg.empty()) {\n        histogram_svg.remove();\n    }\n\n    histogram_svg = d3.select(id).append (\"svg\").attr (\"width\", w).attr (\"height\", h).append (\"g\").attr (\"transform\", \"translate(\"  +  margin.left + \",\" + margin.top + \")\");\n\n    points = histogram_svg.selectAll (\"circle\").data (points);\n    points.enter().append (\"circle\");\n\n    points.attr (\"cx\", function (d) {return x(d.x);}).attr (\"cy\", function (d) {return y (d.y);}).attr (\"r\", 3).classed (\"node scatter\", true);\n\n    points.each (function (d) {\n        if (\"title\" in d) {\n            d3.select (this).append (\"title\").text (d.title);\n        }\n    });\n\n     var x_axis = histogram_svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis);\n\n\n    x_axis.selectAll (\"text\").attr (\"transform\", \"rotate(-45)\").attr(\"dx\",\"-.5em\").attr(\"dy\",\".25em\").style (\"text-anchor\", \"end\");\n    x_axis.append (\"text\").text (labels.x).attr (\"transform\", \"translate(\" + width + \",0)\").attr (\"dy\", \"-1em\").attr (\"text-anchor\", \"end\");\n\n     var y_axis = histogram_svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .attr(\"transform\", \"translate(0,\" + 0 + \")\")\n        .call(yAxis);\n\n   y_axis.selectAll (\"text\").attr (\"transform\", \"rotate(-45)\").attr(\"dx\",\"-.5em\").attr(\"dy\",\".25em\").style (\"text-anchor\", \"end\");\n   y_axis.append (\"text\").text (labels.y).attr (\"transform\", \"rotate(-90)\").attr (\"dy\", \"1em\").attr (\"text-anchor\", \"end\");\n\n}\n\nmodule.exports.scatterPlot = hivtrace_render_scatterplot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/scatterplot.js","var datamonkey_error_modal = function (msg) {\n  $('#modal-error-msg').text(msg);\n  $('#errorModal').modal();\n};\n\nfunction b64toBlob(b64, onsuccess, onerror) {\n    var img = new Image();\n\n    img.onerror = onerror;\n\n    img.onload = function onload() {\n        var canvas = document.getElementById(\"hyphy-chart-canvas\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        var ctx = canvas.getContext('2d');\n      \tctx.fillStyle = \"#FFFFFF\";\n\t\t\t\tctx.fillRect(0,0,canvas.width,canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        canvas.toBlob(onsuccess);\n    };\n\n    img.src = b64;\n}\n\nvar datamonkey_export_csv_button = function(data) {\n  data = d3.csv.format(data);\n  if (data !== null) {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));\n    pom.setAttribute('download', 'export.csv');\n    pom.className = 'btn btn-default btn-sm';\n    pom.innerHTML = '<span class=\"glyphicon glyphicon-floppy-save\"></span> Download CSV';\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n};\n\nvar datamonkey_save_image = function(type, container) {\n\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  };\n\n  function get_styles(doc) {\n\n    function process_stylesheet(ss) {\n      try {\n        if (ss.cssRules) {\n          for (var i = 0; i < ss.cssRules.length; i++) {\n            var rule = ss.cssRules[i];\n            if (rule.type === 3) {\n              // Import Rule\n              process_stylesheet(rule.styleSheet);\n            } else {\n              // hack for illustrator crashing on descendent selectors\n              if (rule.selectorText) {\n                if (rule.selectorText.indexOf(\">\") === -1) {\n                  styles += \"\\n\" + rule.cssText;\n                }\n              }\n            }\n          }\n        }\n      } catch (e) {\n        console.log('Could not process stylesheet : ' + ss);\n      }\n    }\n\n    var styles = \"\",\n        styleSheets = doc.styleSheets;\n\n    if (styleSheets) {\n      for (var i = 0; i < styleSheets.length; i++) {\n        process_stylesheet(styleSheets[i]);\n      }\n    }\n\n    return styles;\n\n  }\n\n  var convert_svg_to_png = function(image_string) {\n\n    var image = document.getElementById(\"hyphy-chart-image\");\n\n    image.onload = function() {\n\n      var canvas = document.getElementById(\"hyphy-chart-canvas\");\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var context = canvas.getContext(\"2d\");\n      context.fillStyle = \"#FFFFFF\";\n      context.fillRect(0,0,image.width,image.height);\n      context.drawImage(image, 0, 0);\n      var img = canvas.toDataURL(\"image/png\");\n      var pom = document.createElement('a');\n      pom.setAttribute('download', 'image.png');\n      pom.href = canvas.toDataURL(\"image/png\");     \n      $(\"body\").append(pom);\n      pom.click();\n      pom.remove();\n\n    };\n\n    image.src = image_string;\n\n  };\n\n  var svg = $(container).find(\"svg\")[0];\n  if (!svg) {\n    svg = $(container)[0];\n  }\n\n  var styles = get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild); \n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = (new XMLSerializer()).serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n  var rect = svg.getBoundingClientRect();\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source];\n  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\n  if(type == \"png\") {\n\t\tb64toBlob(image_string,\n\t\t\t\tfunction(blob) {\n\n\t\t\t\t\t\tvar url = window.URL.createObjectURL(blob);\n\t\t\t\t\t\tvar pom = document.createElement('a');\n\t\t\t\t\t\tpom.setAttribute('download', 'image.png');\n\t\t\t\t\t\tpom.setAttribute('href', url);\n\t\t\t\t\t\t$(\"body\").append(pom);\n\t\t\t\t\t\tpom.click();\n\t\t\t\t\t\tpom.remove();\n\n\t\t\t\t}, function(error) {\n\t\t\t\t\t\t// handle error\n\t\t\t\t});\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'image.svg');\n    pom.setAttribute('href', image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n\n};\n\nvar datamonkey_validate_date = function () {\n\n  // Check that it is not empty\n  if($(this).val().length === 0) {\n    $(this).next('.help-block').remove();\n    $(this).parent().removeClass('has-success');\n    $(this).parent().addClass('has-error');\n\n    jQuery('<span/>', {\n          class: 'help-block',\n          text : 'Field is empty'\n      }).insertAfter($(this));\n\n  } else if(isNaN(Date.parse($(this).val()))) {\n    $(this).next('.help-block').remove();\n    $(this).parent().removeClass('has-success');\n    $(this).parent().addClass('has-error');\n\n    jQuery('<span/>', {\n          class: 'help-block',\n          text : 'Date format should be in the format YYYY-mm-dd'\n      }).insertAfter($(this));\n\n  } else {\n    $(this).parent().removeClass('has-error');\n    $(this).parent().addClass('has-success');\n    $(this).next('.help-block').remove();\n  }\n\n};\n\nfunction datamonkey_get_styles(doc) {\n  var styles = \"\",\n      styleSheets = doc.styleSheets;\n\n  if (styleSheets) {\n    for (var i = 0; i < styleSheets.length; i++) {\n      processStyleSheet(styleSheets[i]);\n    }\n  }\n\n  function processStyleSheet(ss) {\n    if (ss.cssRules) {\n      for (var i = 0; i < ss.cssRules.length; i++) {\n        var rule = ss.cssRules[i];\n        if (rule.type === 3) {\n          // Import Rule\n          processStyleSheet(rule.styleSheet);\n        } else {\n          // hack for illustrator crashing on descendent selectors\n          if (rule.selectorText) {\n            if (rule.selectorText.indexOf(\">\") === -1) {\n              styles += \"\\n\" + rule.cssText;\n            }\n          }\n        }\n      }\n    }\n  }\n  return styles;\n}\n\nfunction datamonkey_save_newick_to_file() {\n  var top_modal_container = \"#neighbor-tree-modal\";\n  var nwk = $(top_modal_container).data(\"tree\");\n  var pom = document.createElement('a');\n  pom.setAttribute('href', 'data:text/octet-stream;charset=utf-8,' + encodeURIComponent(nwk));\n  pom.setAttribute('download', 'nwk.txt');\n  $(\"body\").append(pom);\n  pom.click();\n  pom.remove();\n}\n\nfunction datamonkey_convert_svg_to_png(image_string) {\n  var image = document.getElementById(\"image\");\n  image.src = image_string;\n\n  image.onload = function() {\n    var canvas = document.getElementById(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#FFFFFF\";\n    context.fillRect(0,0,image.width,image.height);\n    context.drawImage(image, 0, 0);\n    var img = canvas.toDataURL(\"image/png\");\n\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'phylotree.png');\n    pom.href = canvas.toDataURL(\"image/png\");\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n}\n\nfunction datamonkey_save_newick_tree(type) {\n\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  }\n\n  var tree_container = \"#tree_container\";\n  var svg = $(\"#tree_container\").find(\"svg\")[0];\n  var styles = datamonkey_get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = (new XMLSerializer()).serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n  var rect = svg.getBoundingClientRect();\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source]\n  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\n  if(type == \"png\") {\n    datamonkey_convert_svg_to_png(image_string)\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'phylotree.svg');\n    pom.setAttribute('href', image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n\n}\n\nfunction datamonkey_validate_email(email) {\n  if($(this).find(\"input[name='receive_mail']\")[0].checked) {\n    var regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n    if(regex.test($(this).find(\"input[name='mail']\").val())) {\n       // Give them green. They like that.\n      $(this).removeClass('has-error');\n      $(this).addClass('has-success');\n      $(this).next('.help-block').remove();\n    } else {\n      $(this).next('.help-block').remove();\n      $(this).removeClass('has-error');\n      $(this).removeClass('has-success');\n      $(this).addClass('has-error');\n      var span = jQuery('<span/>', {\n            class: 'help-block col-lg-9 pull-right',\n            text : 'Invalid Email'\n        }).insertAfter($(this));\n    }\n  } else {\n    $(this).removeClass('has-error');\n    $(this).removeClass('has-success');\n    $(this).next('.help-block').remove();\n  }\n\n}\n\nfunction datamonkey_describe_vector (vector, as_list) {\n\n    vector.sort (d3.ascending);\n\n    var d = {'min' : d3.min (vector),\n             'max' : d3.max (vector),\n             'median' : d3.median (vector),\n             'Q1' : d3.quantile (vector, 0.25),\n             'Q3' : d3.quantile (vector, 0.75),\n             'mean': d3.mean (vector)};\n\n    if (as_list) {\n\n        d = \"<pre>Range  :\" + d['min'] + \"-\" + d['max'] + \"\\n\"\n            +    \"IQR    :\" + d['Q1'] + \"-\" + d['Q3'] + \"\\n\"\n            +    \"Mean   :\" + d['mean'] + \"\\n\"\n            +    \"Median :\" + d['median'] + \"\\n\"\n            + \"</pre>\";\n\n        /*d =\n        \"<dl class = 'dl-horizontal'>\" +\n        \"<dt>Range</dt><dd>\" + d['min'] + \"-\" + d['max'] + \"</dd>\" +\n        \"<dt>IQR</dt><dd>\" + d['Q1'] + \"-\" + d['Q3'] +  \"</dd>\" +\n        \"<dt>Mean</dt><dd>\" + d['mean'] +  \"</dd>\" +\n        \"<dt>Median</dt><dd>\" + d['median'] + \"</dd></dl>\";*/\n    }\n\n    return d;\n\n}\n\nfunction datamonkey_export_handler (data, filename, mimeType) {\n\n  function msieversion() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n      return true;\n    }\n    return false;\n  }\n\n  if(msieversion()) {\n    var IEwindow = window.open();\n    IEwindow.document.write(data);\n    IEwindow.document.close();\n    IEwindow.document.execCommand('SaveAs', true, filename + \".csv\");\n    IEwindow.close();\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:' + (mimeType || 'text/plain')  +  ';charset=utf-8,' + encodeURIComponent(data));\n    pom.setAttribute('download', filename || \"download.tsv\");\n    pom.click();\n    pom.remove();\n  }\n\n}\n\nfunction datamonkey_table_to_text (table_id, sep) {\n    sep = sep || \"\\t\";\n    var header_row = [];\n    d3.select (table_id + \" thead\").selectAll (\"th\").each (function () {header_row.push (d3.select(this).text())});\n    var data_rows = [];\n    d3.select (table_id + \" tbody\").selectAll (\"tr\").each (function (d,i) {data_rows.push ([]); d3.select (this).selectAll (\"td\").each (function () {data_rows[i].push (d3.select(this).text())})});\n\n    return header_row.join (sep) + \"\\n\" +\n           data_rows.map (function (d) {return d.join (sep);}).join (\"\\n\");\n}\n\nfunction datamonkey_capitalize(s) {\n  if(s.length > 0) {\n    return s[0].toUpperCase() + s.slice(1);\n  } else {\n    return s;\n  }\n}\n\nfunction datamonkey_count_partitions (json) {\n    try {\n      return _.keys (json).length;\n    } catch (e) {\n        // ignore errors\n    }\n    return 0;\n}\n\nfunction datamonkey_sum (object, accessor) {\n    accessor = accessor || function (value) {return value;};\n    return _.reduce (object, function (sum, value, index) {return sum + accessor (value, index);},0);\n}\n\nfunction datamonkey_count_sites_from_partitions (json) {\n    try {\n        return datamonkey_sum (json [\"partitions\"], function (value) {return value[\"coverage\"][0].length;});\n    } catch (e) {\n        // ignore errors\n    }\n    return 0;\n}\n\nfunction datamonkey_filter_list (list, predicate, context) {\n    var result = {};\n    predicate = _.bind (predicate, context);\n    _.each (list, _.bind(function (value, key) {\n        if (predicate (value, key)) {\n            result[key] = value;\n        }\n      }, context)\n    );\n    return result;\n}\n\nfunction datamonkey_map_list (list, transform, context) {\n    var result = {};\n    transform = _.bind (transform, context);\n   _.each (list, _.bind(function (value, key) {\n        result[key] = transform(value,key);\n      }, context)\n    );\n    return result;\n}\n\nmodule.exports.errorModal = datamonkey_error_modal;\nmodule.exports.export_csv_button = datamonkey_export_csv_button;\nmodule.exports.save_image = datamonkey_save_image;\nmodule.exports.validate_date = datamonkey_validate_date;\n\nmodule.exports.save_newick_to_file = datamonkey_save_newick_to_file;\nmodule.exports.convert_svg_to_png = datamonkey_convert_svg_to_png;\nmodule.exports.save_newick_tree = datamonkey_save_newick_tree;\nmodule.exports.validate_email = datamonkey_validate_email;\nmodule.exports.describe_vector = datamonkey_describe_vector;\nmodule.exports.table_to_text = datamonkey_table_to_text;\nmodule.exports.export_handler = datamonkey_export_handler;\nmodule.exports.capitalize = datamonkey_capitalize;\nmodule.exports.countPartitionsJSON = datamonkey_count_partitions;\nmodule.exports.countSitesFromPartitionsJSON = datamonkey_count_sites_from_partitions;\nmodule.exports.sum = datamonkey_sum;\nmodule.exports.filter=datamonkey_filter_list;\nmodule.exports.map=datamonkey_map_list;\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js"],"sourceRoot":""}