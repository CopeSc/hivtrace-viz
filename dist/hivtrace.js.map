{"version":3,"sources":["webpack:///./src/entry.js","webpack:///./~/font-awesome/css/font-awesome.css","webpack:///./src/hivtrace.css","webpack:///./src/hivtrace.js","webpack:///./~/bootstrap/dist/css/bootstrap.css","webpack:///./src/clusternetwork.js","webpack:///./src/misc.js","webpack:///./src/helpers.js","webpack:///./~/downloadjs/download.js","webpack:///./src/scatterplot.js","webpack:///./src/histogram.js"],"names":["window","require","hivtrace","misc","helpers","module","d3","_","scatterPlot","_networkGraphAttrbuteID","_networkNodeAttributeID","_networkMissing","_networkMissingOpacity","_networkMissingColor","_networkContinuousColorStops","_networkShapeOrdering","_defaultFloatFormat","_defaultPercentFormat","_defaultDateFormats","_defaultDateViewFormat","_defaultDateViewFormatShort","_defaultDateViewFormatSlider","_networkDotFormatPadder","_networkCategoricalBase","_networkCategorical","_maximumValuesInCategories","_networkSequentialColor","_networkPresetColorSchemes","trans_categ","Missing","Perinatal","race","Asian","missing","White","_networkPresetShapeSchemes","birth_sex","Male","Female","Unknown","current_gender","hivtrace_cluster_depthwise_traversal","clusters","adjacency","by_node","n","edges","nodes","e","console","traverse","node","save_edges","neighbor","_networkUpperBoundOnDate","_networkCDCDateField","hivtrace_cluster_network_graph","self","options","cdc_extra","value","sort","c","help","cluster","v","str","this_cell","data_to_use","payload","buttons","button_text","button_obj","selected","d","id","shaper","top","right","bottom","left","filter","date","subcluster_enum","_n_months_ago","depends","label","enum","type","volatile","color_scale","map","binned_vl_recent_value","vl_value","recent_rapid","subcluster_index","age_dx","hiv_aids_dx_dt_year","range_without_missing","attr","parsed_value","passed","f","handle_cluster_click","container","menu_object","already_fixed","center_cluster_handler","release","export_items","network","color","attr_desc","base_line","font_size","rect_size","width","height","colorizer","prefix","drag","x","y","$","additional_options","filtered_json","_extract_single_cluster","custom_filter","jQuery","json","custom_name","random_id","s","i","letters","random_prefix","random_tab_id","random_content_id","random_button_bar","tab_container","content_container","go_here_when_closed","new_tab_header","new_link","new_tab_content","option_extras","new_button_bar","cluster_options","cluster_view","not_nested","handle_node_click","collapse_cluster_handler","mapped_clusters","get_all_clusters","d_clusters","children","cluster_id","treemap","Math","b","a","graphMe","expandedClusters","drawnNodes","hxb2_exists","extra_menu_items","enclosure","item","set_date","field_def","selector","past_date","past_months","diff_year","months","left_over","start_date","filter_by_date","node_dx","cutoff_long","cutoff_short","node_iterator","beginning_of_time","oldest_nodes_first","node1_dx","node2_dx","n1","n2","split_clusters","node_id_to_local_cluster","edge","edge_cluster","source_id","target_id","copied_edge","array_index","subclusters","cluster_nodes","cc","es","c1","c2","_compute_cluster_degrees","subcluster_json","sub","rr_cluster","priority_nodes","recent_cluster","init_layout","get_initial_xy","coordinate_update","set_init_coords","network_layout","x_scale","delta","y_scale","rescale_x","rescale_y","neighborhood_size","a_node","neighborhood","counter","worker","event","node_to_update","worker_obj","estimate_cubic_compute_cost","memo","cluster_size","a_cluster","member_nodes","triads","triangles","my_neighbors","connected_links","total","graph_data","result","allowed_types","String","Date","Number","string_id","the_list","column_ids","binned","column","sorted_keys","attribute_record","attribute_list","patient_record","patient_list","group_by_id","button_clicked","link_clicked","modal","cluster_ui_container","fix_handler","obj","layout_reset_handler","fixed","default_layout","cluster_commands","handler_callback","button_group","change_spacing","change_window_size","filter_value","distance_threshold","parseFloat","render_binned_table","attributes","singletons","compute_node_degrees","extra_ui_container","valid_cats","valid_shapes","valid_scales","low_var","bins","scl","mean","values","vrnc","p","determine_scaling","a_date","inject_attribute_node_value_by_id","m","menu_items","_menu_label_gen","cat_menu","j","the_cluster","compute_cluster_gradient","attribute_map","index","range","computed","extension","sorted_array","k","warning_string","sorted_state","sort_table_toggle_icon","table_element","sort_on","parseInt","sort_key","datum","sorted_function","sort_accessor","val","this_sel","current_value","data","repr","clicker","sort_table_by_column","thead","format_a_cell","tbody","_is_subcluster","labels","expand_cluster","collapse_cluster","cluster_json","map_to_id","given_json","ne","node_list","headers","rows","this_row","callback","ed","add_a_sortable_table","element","html","make_row","_cluster_table_draw_id","actual_cluster","is_subcluster","length","format","clusters_shown","clusters_removed","nodes_removed","clusters_selected","nodes_selected","symbol_type","node_size","node_color","node_opacity","container_group","draw_from","sums","running_totals","startAngle","endAngle","name","rim","arc_radius","cluster_box_size","paths","cluster_color","cat_id","domain","set_attr","lbl","domain_range","check_for_predefined_shapes","shape_mapper","offset","anchor_format","scale","gradient","finite","infinite","render_chord_diagram","func","points","src","tgt","title","stratify","attribute_cluster_distribution","extended_range","arg","attribute_pairwise_distribution","anything_changed","conditions","did_match","regexp","warning_box","pull","dist_x","dist_y","theta","alpha","dx","dx2","dy","dy2","s1","s2","path","draw_me","update_network_string","edge_set","tag","step","link","rendered_nodes","rendered_clusters","draw_a_node","draw_a_cluster","currently_displayed_objects","sizes","new_attr","r","key","attribute","toggle_tooltip","node_info_string","edge_info_string","by_cluster","cls","idx","open_cluster_queue","compute_cluster_centroids","the_table","matrix","fill","lookup","the_map","sum","text_label","t","svg","chord","text_offset","innerRadius","outerRadius","fade","scan_from","only_expanded","the_matrix","haz_null","dim","d2","string_hash","hash","ci","charCode","hashed","available_keys","reindexed","first_try","second_try","last_resort","attribute_id","attr_info","cluster_info_string","new_nodes","leftover","sequences","degrees","use_these_nodes","node_filter","series","subset","condition","dict","stratified","array","annotation","edge_types_dict","existing_nodes","nodes_and_attributes","injected_nodes","node_attributes","index_id","attribute_definition","existing_network_nodes","node_name_2_id","attribute_key","handle_node_attributes","new_node","node_class","node_annotation","degree","new_edge","JSON","edge_types_by_cluster","edge_clusters","edge_types_by_cluster_sorted","my_keys","edge_types","_edge_colorizer","injected_column","other_clusters","labeled_links","shown_types","def_color","checkbox","edge_class","cluster_report","edge_filter","recomputed_clusters","cluster_ids","injected_count","cluster_count","existing_cluster","turn_on","this_box","this_data","l_scale","max_points_to_render","gravity_scale","initial_json_load","hivtrace_cluster_graph_summary","summary_table","table_data","graph","columns","adjacency_list","seq_ids","in_nodes","hivtrace_generate_svg_polygon_lookup","angle_step","hivtrace_generate_svg_ellipse","hivtrace_generate_svg_polygon","current_angle","all_paths","next","intermediate","paths_i_k","hivtrace_get_path","paths_k_j","i_k_index","i_k","k_j_index","k_j","sublist","num_nodes","distances","node_ids","hivtrace_cluster_adjacency_list","Object","node_count","empty_arr","zeroes","index2","second_node","index_i","n_i","index_j","n_j","distances2","index_k","n_k","d_ik","d_jk","d_ij","node_obj","nodes_in_cluster","edges_in_cluster","filtered_obj","cb","hivtrace_compute_shortest_paths_with_reconstruction","betweenness","hivtrace_compute_betweenness_centrality","hivtrace_filter_to_node_in_cluster","paths_with_node","hivtrace_paths_with_node","unique_clusters","cb_count","hivtrace_get_node_by_id","results","hivtrace_betweenness_centrality_all_nodes_in_cluster","hivtrace_compute_node_degrees","hivtrace_compute_cluster_betweenness","node_array","hivtrace_is_contaminant","node_csv","pom","document","encodeURIComponent","the_button","table_tag","table_text","hivtrace_compute_local_clustering_coefficients","hivtrace_new_cluster_adjacency_list","formatter","skip_cumulative","bin_by","year","nearest_quarter","mid_point","quarter","xAxis","yAxis","values_by_attribute","total_id","total_color","max_bin","bin_tag","point","binned_array","min_x","max_x","time_series","legend_area","y_key","plot_types","legend_lines","on_off","opacity_toggle","last","plot_color","y_accessor","plot_key","bin_accessor","curve","curve_year","x_axis","download","datamonkey_error_modal","img","canvas","ctx","blob","onsuccess","datamonkey_export_csv_button","datamonkey_save_image","xmlns","xlink","ss","rule","process_stylesheet","styles","styleSheets","doc","convert_svg_to_png","image","context","get_styles","defsEl","styleEl","source","rect","doctype","to_download","image_string","navigator","b64toBlob","url","datamonkey_validate_date","class","text","isNaN","processStyleSheet","top_modal_container","nwk","tree_container","datamonkey_get_styles","datamonkey_convert_svg_to_png","regex","span","vector","ua","msie","IEwindow","filename","mimeType","sep","header_row","table_id","data_rows","accessor","predicate","transform","margin","w","h","dates","histogram_svg","y_axis","defaultFloatFormat","histogram_w","histogram_h","hivtrace_render_histogram","edge_lengths","hivtrace_render_histogram_continuous","histogram_data","histogram_line","counts","data_to_plot","fit_line","exports"],"mappings":"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;AAGA;AACD;;AAEDF;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,0C;;;;;;;;AC7gBA,iIAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA,EAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;;AAEA,6BAA4B;AAC5B;AACA;AACA;AACA;;;AAGA,+BAA8B;AAC9B;AACA,sBAAqB;AACrB,0CAAyC;AACzC;AACA;AACA;AACA,oC;AACA;AACA;AACA,iCAAgC,cAAc,KAAK;AACnD;AACA,KAAI;AACJ,IAAG;;;AAGH;AACA,oCAAmC;;AAEnC;AACA;AACA;AACA,KAAI,K;AACJ;AACA;AACA,sBAAqB;AACrB;;AAEA,IAAG,KAAK;AACR,sC;AACA;AACA,WAAU,KAAK;AACf,uCAAsC,eAAe;AACrD,K;AACA;AACA;AACA;AACA,2BAA0B,eAAe;;;AAGzC;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAS,KAAK;;AAEd,gCAA+B,WAAW;AAC1C;;AAEA;;AAEA,+BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,sBAAsB,wCAAwC;AACtF,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B,oHAAmH,mBAAmB;AACtI;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAsC;AACtC;AACA;AACA;AACA,0BAAyB,8BAA8B,EAAE;;AAEzD,IAAG;;;;;AAKH,8BAA6B;AAC7B;AACA;;AAEA,gBAAe;AACf;AACA,IAAG;AACH;AACA;AACA;AACA,8CAA6C;AAC7C,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH,EAAC;;;;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","file":"hivtrace.js","sourcesContent":["window.jQuery = window.$ = $; \n\nrequire(\"font-awesome/css/font-awesome.css\");\nrequire('./hivtrace.css');\nrequire('bootstrap');\n\nvar hivtrace = require('./hivtrace.js');\n\n// Create new hyphy-vision export\nwindow.hivtrace = hivtrace;\n\n\n\n// WEBPACK FOOTER //\n// ./src/entry.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/font-awesome/css/font-awesome.css\n// module id = 5\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/hivtrace.css\n// module id = 15\n// module chunks = 0","import Bootstrap from 'bootstrap/dist/css/bootstrap.css';\nimport {\n  clusterNetwork,\n  graphSummary\n} from './clusternetwork.js';\nimport {\n  histogram,\n  histogramDistances\n} from './histogram.js';\nimport {\n  scatterPlot\n} from './scatterplot.js';\n\nvar misc = require('./misc.js');\nvar helpers = require('./helpers.js');\n\nmodule.exports.clusterNetwork = clusterNetwork;\nmodule.exports.graphSummary = graphSummary;\nmodule.exports.histogram = histogram;\nmodule.exports.histogramDistances = histogramDistances;\nmodule.exports.helpers = helpers;\nmodule.exports.misc = misc;\nmodule.exports.scatterPlot = scatterPlot;\n\n\n// WEBPACK FOOTER //\n// ./src/hivtrace.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bootstrap/dist/css/bootstrap.css\n// module id = 31\n// module chunks = 0","var d3 = require(\"d3\"),\n  _ = require(\"underscore\"),\n  misc = require(\"misc\"),\n  helpers = require(\"helpers\"),\n  scatterPlot = require(\"scatterplot\");\n\nvar _networkGraphAttrbuteID = \"patient_attribute_schema\";\nvar _networkNodeAttributeID = \"patient_attributes\";\nvar _networkMissing = \"missing\";\nvar _networkMissingOpacity = \"0.1\";\nvar _networkMissingColor = \"#999\";\nvar _networkContinuousColorStops = 9;\nvar _networkShapeOrdering = [\n  \"circle\",\n  \"square\",\n  \"hexagon\",\n  \"diamond\",\n  \"cross\",\n  \"octagon\",\n  \"ellipse\",\n  \"pentagon\"\n];\nvar _defaultFloatFormat = d3.format(\",.2r\");\nvar _defaultPercentFormat = d3.format(\",.3p\");\nvar _defaultDateFormats = [d3.time.format(\"%Y-%m-%dT%H:%M:%S.%LZ\"), d3.time.format(\"%Y-%m-%dT%H:%M:%S.%LZ\")];\nvar _defaultDateViewFormat = d3.time.format(\"%B %d, %Y\");\nvar _defaultDateViewFormatShort = d3.time.format(\"%B %Y\");\nvar _defaultDateViewFormatSlider = d3.time.format(\"%Y-%m-%d\");\nvar _networkDotFormatPadder = d3.format (\"08d\");\n\nvar _networkCategoricalBase = [\n  \"#a6cee3\",\n  \"#1f78b4\",\n  \"#b2df8a\",\n  \"#33a02c\",\n  \"#fb9a99\",\n  \"#e31a1c\",\n  \"#fdbf6f\",\n  \"#ff7f00\",\n  \"#cab2d6\",\n  \"#6a3d9a\",\n  \"#ffff99\",\n  \"#b15928\"\n];\n\nvar _networkCategorical = [];\n\n_.each ([0,-0.5,0.5], function (k) {\n    _.each (_networkCategoricalBase, function (s) {\n        _networkCategorical.push (d3.rgb(s).darker (k).toString());\n    });\n});\n\nvar _maximumValuesInCategories = _networkCategorical.length;\n\nvar _networkSequentialColor = {\n  2: [\"#feb24c\", \"#e31a1c\"],\n  3: [\"#ffeda0\", \"#feb24c\", \"#f03b20\"],\n  4: [\"#ffffb2\", \"#fecc5c\", \"#fd8d3c\", \"#e31a1c\"],\n  5: [\"#ffffb2\", \"#fecc5c\", \"#fd8d3c\", \"#f03b20\", \"#bd0026\"],\n  6: [\"#ffffb2\", \"#fed976\", \"#feb24c\", \"#fd8d3c\", \"#f03b20\", \"#bd0026\"],\n  7: [\n    \"#ffffb2\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#b10026\"\n  ],\n  8: [\n    \"#ffffcc\",\n    \"#ffeda0\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#b10026\"\n  ],\n  9: [\n    \"#ffffcc\",\n    \"#ffeda0\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#bd0026\",\n    \"#800026\"\n  ]\n};\n\nvar _networkPresetColorSchemes = {\n  trans_categ: {\n    \"MSM-Male\": \"#1f78b4\",\n    \"MSM-Unknown sex\": \"#1f78b4\",\n    \"Heterosexual Contact-Male\": \"#e31a1c\",\n    \"Heterosexual Contact-Female\": \"#e31a1c\",\n    \"Heterosexual Contact-Unknown sex\": \"#e31a1c\",\n    \"IDU-Male\": \"#33a02c\",\n    \"MSM & IDU-Male\": \"#33a02c\",\n    \"IDU-Female\": \"#33a02c\",\n    \"IDU-Unknown sex\": \"#33a02c\",\n    \"Other/Unknown-Male\": \"#636363\",\n    \"Other/Unknown-Female\": \"#636363\",\n    \"Other-Male\": \"#636363\",\n    \"Other-Female\": \"#636363\",\n    Missing: \"#636363\",\n    \"\": \"#636363\",\n    \"Other/Unknown-Unknown sex\": \"#636363\",\n    Perinatal: \"#ff7f00\",\n    \"Other/Unknown-Child\": \"#ff7f00\",\n    \"Other-Child\": \"#ff7f00\"\n  },\n  race: {\n    Asian: \"#1f77b4\",\n    \"Black/African American\": \"#bcbd22\",\n    \"Hispanic/Latino\": \"#9467bd\",\n    \"American Indian/Alaska Native\": \"#2ca02c\",\n    \"Native Hawaiian/Other Pacific Islander\": \"#17becf\",\n    \"Multiple Races\": \"#e377c2\",\n    \"Unknown race\": \"#999\",\n    Missing: \"#999\",\n    missing: \"#999\",\n    White: \"#d62728\"\n  }\n};\n\nvar _networkPresetShapeSchemes = {\n  birth_sex: {\n    Male: \"square\",\n    Female: \"ellipse\",\n    Missing: \"diamond\",\n    missing: \"diamond\",\n    Unknown: \"diamond\"\n  },\n  race: {\n    Asian: \"hexagon\",\n    \"Black/African American\": \"square\",\n    \"Hispanic/Latino\": \"triangle\",\n    \"American Indian/Alaska Native\": \"pentagon\",\n    \"Native Hawaiian/Other Pacific Islander\": \"octagon\",\n    \"Multiple Races\": \"diamond\",\n    \"Unknown race\": \"diamond\",\n    Missing: \"diamond\",\n    missing: \"diamond\",\n    White: \"ellipse\"\n  },\n  current_gender: {\n    Male: \"square\",\n    Female: \"ellipse\",\n    \"Transgender-Male to Female\": \"hexagon\",\n    \"Transgender-Female to Male\": \"pentagon\",\n    \"Additional Gender Identity\": \"diamond\",\n    Unknown: \"diamond\",\n    Missing: \"diamond\",\n    missing: \"diamond\"\n  }\n};\n\nvar hivtrace_cluster_depthwise_traversal = function (nodes, edges, edge_filter,save_edges) {\n\n    var clusters  = [],\n        adjacency = {},\n        by_node   = {};\n    \n    _.each (nodes, function (n) {\n        n.visited = false;\n        adjacency[n.id] = [];\n    });\n\n    if (edge_filter) {\n        edges = _.filter (edges, edge_filter);\n    }\n    \n    _.each (edges, function (e) {\n        try {\n            adjacency[nodes[e.source].id].push ([nodes[e.target],e]);\n            adjacency[nodes[e.target].id].push ([nodes[e.source],e]);\n        } catch (err) {\n            console.log (\"Edge does not map to an existing node \" + e.source + \" to \" + e.target);\n            throw (\"Edge does not map to an existing node \" + e.source + \" to \" + e.target);\n        }\n    });\n    \n    var traverse = function (node) {\n        if (! (node.id in by_node)) {\n            clusters.push ([node]);\n            by_node [node.id] = clusters.length - 1;\n            if (save_edges) {\n                save_edges.push ([]);\n            }\n        }\n        node.visited = true;\n        \n        _.each ( adjacency[node.id], function (neighbor) {\n            if (!neighbor[0].visited) {\n                by_node [neighbor[0].id] = by_node [node.id];\n                clusters [by_node [neighbor[0].id]].push (neighbor[0]);\n                if (save_edges) {\n                    save_edges[by_node [neighbor[0].id]].push (neighbor[1]);\n                }\n                traverse (neighbor[0]);\n            }\n        });     \n        \n    };\n    \n     _.each (nodes, function (n) {\n        if (!n.visited) {\n            traverse (n);\n        }\n     });\n       \n    return clusters;\n}\n\nvar _networkUpperBoundOnDate = (new Date()).getFullYear();\nvar _networkCDCDateField = \"hiv_aids_dx_dt\";\n\nvar hivtrace_cluster_network_graph = function(\n  json,\n  network_container,\n  network_status_string,\n  network_warning_tag,\n  button_bar_ui,\n  attributes,\n  filter_edges_toggle,\n  clusters_table,\n  nodes_table,\n  parent_container,\n  options\n) {\n  // [REQ] json                        :          the JSON object containing network nodes, edges, and meta-information\n  // [REQ] network_container           :          the CSS selector of the DOM element where the SVG containing the network will be placed (e.g. '#element')\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] network_warning_tag         :          the CSS selector of the DOM element where the any warning messages would go (e.g. '#element')\n  // [OPT] button_bar_ui               :          the ID of the control bar which can contain the following elements (prefix = button_bar_ui value)\n  //                                                - [prefix]_cluster_operations_container : a drop-down for operations on clusters\n  //                                                - [prefix]_attributes :  a drop-down for operations on attributes\n  //                                                - [prefix]_filter : a text box used to search the graph\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] attributes                  :          A JSON object with mapped node attributes\n\n  var self = {};\n  \n\n  self._is_CDC_ = options && options[\"no_cdc\"] ? false : true;\n  self.ww =\n    options && options[\"width\"]\n      ? options[\"width\"]\n      : d3.select(parent_container).property(\"clientWidth\");\n  self.container = network_container;\n  self.nodes = [];\n  self.edges = [];\n  self.clusters = [];\n  self.cluster_sizes = [];\n  self.cluster_mapping = {};\n  self.percent_format = _defaultPercentFormat;\n  self.missing = _networkMissing;\n  \n  if (options && _.isFunction (options[\"init_code\"])) {\n    options[\"init_code\"].call (null, self, options);\n  }\n  self.dom_prefix = options && options ['prefix'] ? options ['prefix'] : \"hiv-trace\";\n  self.extra_cluster_table_columns    = options && options ['cluster-table-columns'] ? options ['cluster-table-columns'] : null;\n  self.subcluster_table = null;\n  \n  if (self._is_CDC_) {\n    self.subcluster_table = options && options ['subcluster-table'] ?  d3.select(options ['subcluster-table']) : null;\n    self.extra_subcluster_table_columns = null;\n    var cdc_extra = [\n        {'description' : {\n             value: \"Cases dx within 36 months\",\n             sort: function (c) {return c.value.length ? c.value[0] : 0;},\n             help: \"Number of linked (0.5%) cases diagnosed in the past 36 months\"\n            },\n          'generator' : function (cluster) {\n            return {\n                'html' : true,\n                'value' : cluster.recent_nodes,\n                'format' : function (v) {\n                    if (v.length) {\n                        return v.join (\", \");\n                    } else {\n                        return \"\";\n                    }\n                }\n            }\n          }          \n        },\n        {'description' : {\n             value: \"Cases dx within 12 months\",\n             sort: \"value\",\n             help: \"Number of linked (0.5%, only through recent nodes) cases diagnosed in past 12 months\"\n            },\n          'generator' : function (cluster) {\n            return {\n                'html' : true,\n                'value' : cluster.priority_score,\n                'format' : function (v) {\n                    if (v.length) {\n                        var str = v.join (\", \");\n                        if (v[0] >= 3) {\n                            return \"<span style='color:red'>\" + str + \" <span class = 'fa fa-exclamation-circle'></span></span>\";\n                        }        \n                        return str;\n                    }\n                    return \"\";\n                }\n            }\n          }\n        }\n      ];\n      \n    if (self.subcluster_table) {\n        self.extra_subcluster_table_columns = cdc_extra;\n    } else {\n        if (self.extra_cluster_table_columns) {\n            self.extra_cluster_table_columns = self.extra_cluster_table_columns.concat (cdc_extra);\n        } else {\n            self.extra_cluster_table_columns = cdc_extra;\n        }\n    }\n  }\n\n    self.extra_node_table_columns = options && options ['node-table-columns'] ? options ['node-table-columns'] :\n    (\n        self._is_CDC_ ? [\n        {'description' : {\n             value: \"Recent and Rapid\",\n             sort: \"value\",\n             help: \"Is the node a member of a regular or recent & rapid subcluster?\"\n            },\n          'generator' : function (node) {\n            return {\n                'callback':   function  (element, payload) {\n                        //payload = _.filter (payload, function (d) {return d});\n                        var this_cell = d3.select(element);\n                        \n                        var data_to_use = [\n                            [payload[0][0],payload[0][1],payload[0][2]], \n                            [payload[1][0] ? \"36 months\" : \"\", payload[1][1]], \n                            [payload[2][0] ? \"12 months\" : \"\",payload[2][1]],\n                            [ (payload.length > 3 && payload[3][0] ? \"Recent cluster ≥ 3\" : \"\"), payload.length > 3 ? payload[3][1] : null]\n                            ];\n                    \n                        var buttons = this_cell.selectAll(\"span\").remove();\n                        \n                        _.each (data_to_use, function (button_text) {\n                            \n                             //self.open_exclusive_tab_view (cluster_id)\n                            if (button_text[0].length) {\n                                var button_obj = this_cell.append(\"span\")\n                                  .classed(\"btn btn-xs btn-node-property\", true)\n                                  .classed(button_text[1], true).text(button_text[0]); \n                                  \n                                if (_.isFunction (button_text[2])) {\n                                  button_obj.on (\"click\", button_text[2]);\n                                } else {\n                                  button_obj.attr(\"disabled\", true);\n                                }\n                                                        \n                            }\n                        });\n                        \n                      },\n                'value' : function () {\n                    return [[node.subcluster ? \"Subcluster \" + node.subcluster : \"\",\"btn-primary\", \n                             node.subcluster ? function () {self.view_subcluster(node.subcluster, \n                                                                                 function (n) {return n.subcluster == node.subcluster;}, \n                                                                                 \"Subcluster \" + node.subcluster)} : null, \n                             ], \n                             \n                            [node.priority_flag == 3,\"btn-warning\"], \n                            [node.priority_flag == 1,\"btn-danger\"],\n                            [node.priority_flag == 2,\"btn-danger\"]\n                           ];\n                }\n            }\n          }\n        }\n      ]\n    : null\n    ); \n     \n  self.colorizer = {\n    selected: function(d) {\n      return d == \"selected\" ? d3.rgb(51, 122, 183) : \"#FFF\";\n    }\n  };\n  \n  self.subcluster_threshold = options && options ['subcluster-thershold'] ? options ['subcluster-thershold'] : 0.005;\n  self.today = options && options ['today'] ? options ['today'] : new Date();\n\n  self.node_shaper = {\n    id: null,\n    shaper: function() {\n      return \"circle\";\n    }\n  };\n  (self.filter_edges = true), (self.hide_hxb2 = false), (self.charge_correction = 5), (self.margin = {\n    top: 20,\n    right: 10,\n    bottom: 30,\n    left: 10\n  }), (self.width =\n    self.ww - self.margin.left - self.margin.right), (self.height =\n    self.width * 9 / 16), (self.cluster_table = d3.select(\n    clusters_table\n  )), (self.node_table = d3.select(\n    nodes_table\n  )), (self.needs_an_update = false), (self.json = json), (self.hide_unselected = false), (self.show_percent_in_pairwise_table = false), (self.gradient_id = 0);\n\n  self._additional_node_pop_fields = [];\n  /** this array contains fields that will be appended to node pop-overs in the network tab\n      they will precede all the fields that are shown based on selected labeling */\n\n  if (options && \"minimum size\" in options) {\n    self.minimum_cluster_size = options[\"minimum size\"];\n  } else {\n    if (self._is_CDC_) {\n      self.minimum_cluster_size = 5;\n    } else {\n      self.minimum_cluster_size = 0;\n    }\n  }\n  \n  if (options && \"cluster-time\" in options) {\n    self.cluster_time_scale = options[\"cluster-time\"];\n  }  \n  \n  if (self._is_CDC_) {\n    self._additional_node_pop_fields.push(_networkCDCDateField);\n    self.cluster_time_scale = self.cluster_time_scale || _networkCDCDateField;\n  }\n\n  if (options && \"core-link\" in options) {\n    self.core_link_length  = options[\"core-link\"];   \n  } else {\n    self.core_link_length  = -1.;   \n  }\n  \n  if (options && \"edge-styler\" in options) {\n    self.additional_edge_styler = options[\"edge-styler\"];\n  } else {\n    self.additional_edge_styler = null;\n  }\n  \n  \n  self.filter_by_size = function(cluster) {\n    return cluster.children.length >= self.minimum_cluster_size;\n  };\n\n  self.cluster_filtering_functions = {'size' : self.filter_by_size};\n  self.cluster_display_filter = function (cluster) {return _.every (self.cluster_filtering_functions, \n    function (filter) {\n        return filter (cluster);\n    })}\n  \n  self.primary_graph = options && \"secondary\" in options ? false : true;\n  self.initial_packed = options && options [\"initial_layout\"] == \"tiled\" ? false : true;\n    \n  self.recent_rapid_definition = function (network, date) {\n       date = date || self.today;\n       var subcluster_enum = [\"Subcluster\", \n                              \"12 months (on ar after \" + _defaultDateViewFormat(_n_months_ago(date,12)) + \")\", \n                              \"12 months (on ar after \" + _defaultDateViewFormat(_n_months_ago(date,12)) + \") and R&R subcluster\", \n                              \"36 months (on ar after \" + _defaultDateViewFormat(_n_months_ago(date,36)) + \")\", \n                              \"Future node (after \" + _defaultDateViewFormat (date) + \")\", \n                              \"Not a member of subcluster (as of \" + _defaultDateViewFormat(date) + \")\",\n                              \"Not in a subcluster\"];\n\n       return {\n           depends: _networkCDCDateField,\n           label: \"Subcluster or Priority Node\",\n           enum: subcluster_enum,\n           type : \"String\",\n           volatile: true,\n           color_scale: function() {\n            return d3.scale\n              .ordinal()\n              .domain(subcluster_enum.concat ([_networkMissing]))\n              .range(_.union([\"#CCCCCC\",\"pink\",\"red\", \"blue\",\"#9A4EAE\",\"yellow\",\"#FFFFFF\"], [_networkMissingColor]));\n           },\n\n\n          map: function(node) {\n             if (node.subcluster) {\n                if (node.priority_flag > 0) {\n                    return subcluster_enum[node.priority_flag];\n                } \n                return subcluster_enum[0];\n             } \n             return subcluster_enum[6];\n          }         \n    };};\n  \n  self._networkPredefinedAttributeTransforms = {\n    /** runtime computed node attributes, e.g. transforms of existing attributes */\n\n    binned_vl_recent_value: {\n      depends: \"vl_recent_value\",\n      label: \"binned_vl_recent_value\",\n      enum: [\"≤200\", \"200-10000\", \">10000\"],\n      type : \"String\",\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain([\"≤200\", \"200-10000\", \">10000\", _networkMissing])\n          .range(_.union(_networkSequentialColor[3], [_networkMissingColor]));\n      },\n\n      map: function(node) {\n        var vl_value = self.attribute_node_value_by_id(node, \"vl_recent_value\", true);\n        if (vl_value != _networkMissing) {\n          if (vl_value <= 200) {\n            return \"≤200\";\n          }\n          if (vl_value <= 10000) {\n            return \"200-10000\";\n          }\n          return \">10000\";\n        }\n        return _networkMissing;\n      }\n    },\n\n    recent_rapid : self.recent_rapid_definition,\n    \n    subcluster_index: {\n           depends: _networkCDCDateField,\n           label: \"Subcluster ID\",\n           type : \"String\",\n\n\n          map: function(node) {\n             return node.subcluster;\n          }       \n    },\n    \n    age_dx: {\n      depends: \"age\",\n      label: \"age_dx\",\n      enum: [\"<13\", \"13-19\", \"20-29\", \"30-39\", \"40-49\", \"50-59\", \"≥60\"],\n      type : \"String\",\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain([\n            \"<13\",\n            \"13-19\",\n            \"20-29\",\n            \"30-39\",\n            \"40-49\",\n            \"50-59\",\n            \"≥60\",\n            _networkMissing\n          ])\n          .range([\n            \"#b10026\",\n            \"#e31a1c\",\n            \"#fc4e2a\",\n            \"#fd8d3c\",\n            \"#feb24c\",\n            \"#fed976\",\n            \"#ffffb2\",\n            \"#636363\"\n          ]);\n      },\n      map: function(node) {\n        var vl_value = self.attribute_node_value_by_id(node, \"age\");\n        if (vl_value == \">=60\") {\n          return \"≥60\";\n        }\n        return vl_value;\n      }\n    },\n\n    hiv_aids_dx_dt_year: {\n      depends: _networkCDCDateField,\n      label: \"hiv_aids_dx_dt_year\",\n      type: \"Number\",\n      map: function(node) {\n        try {\n          var value = self._parse_dates(\n            self.attribute_node_value_by_id(node, _networkCDCDateField)\n          );\n          if (value) {\n            value = \"\" + value.getFullYear();\n          } else {\n            value = _networkMissing;\n          }\n           return value;\n        } catch (err) {\n          return _networkMissing;\n        }\n      },\n      color_scale: function(attr) {\n        var range_without_missing = _.without(\n          attr.value_range,\n          _networkMissing\n        );\n        var color_scale = _.compose(\n          d3.interpolateRgb(\"#ffffcc\", \"#800026\"),\n          d3.scale\n            .linear()\n            .domain([\n              range_without_missing[0],\n              range_without_missing[range_without_missing.length - 1]\n            ])\n            .range([0, 1])\n        );\n        return function(v) {\n          if (v == _networkMissing) {\n            return _networkMissingColor;\n          }\n          return color_scale(v);\n        };\n      }\n    }\n  };\n \n  if (options && options [\"computed-attributes\"]) {\n    _.extend (self._networkPredefinedAttributeTransforms, options [\"computed-attributes\"]);\n  }\n \n  self._parse_dates = function (value) {\n  \n    if (value instanceof Date) {\n        return value;\n    }\n    var parsed_value = null;\n  \n    var passed = _.any (_defaultDateFormats, function (f) {\n        parsed_value = f.parse (value);\n        return parsed_value;\n    });\n    \n    //console.log (value + \" mapped to \" + parsed_value);\n    \n    if (passed) {\n        if (self._is_CDC_ && (parsed_value.getFullYear() < 1970 || parsed_value.getFullYear() > _networkUpperBoundOnDate )) {\n           throw (\"Invalid date\");\n        }\n        return parsed_value;\n    }\n    \n    throw (\"Invalid date\");\n  }\n\n  /*------------ Network layout code ---------------*/\n  var handle_cluster_click = function(cluster, release) {\n  \n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select(\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container\n        .append(\"ul\")\n        .attr(\"id\", id)\n        .attr(\"class\", \"dropdown-menu\")\n        .attr(\"role\", \"menu\");\n    }\n\n    menu_object.selectAll(\"li\").remove();\n\n    var already_fixed = cluster && cluster.fixed == 1;\n\n    if (cluster) {\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Expand cluster\")\n        .on(\"click\", function(d) {\n          cluster.fixed = 0;\n          self.expand_cluster_handler(cluster, true);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Center on screen\")\n        .on(\"click\", function(d) {\n          cluster.fixed = 0;\n          center_cluster_handler(cluster);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(function(d) {\n          if (cluster.fixed) return \"Allow cluster to float\";\n          return \"Hold cluster at current position\";\n        })\n        .on(\"click\", function(d) {\n          cluster.fixed = !cluster.fixed;\n          menu_object.style(\"display\", \"none\");\n        });\n\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(function(d) {\n          return \"Show this cluster in separate tab\";\n        })\n        .on(\"click\", function(d) {\n          self.open_exclusive_tab_view (cluster.cluster_id);\n          menu_object.style(\"display\", \"none\");\n        });\n\n\n      cluster.fixed = 1;\n\n      menu_object\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style(\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style(\"display\", \"block\");\n    } else {\n      if (release) {\n        release.fixed = 0;\n      }\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\n      \"click\",\n      function(d) {\n        handle_cluster_click(null, already_fixed ? null : cluster);\n      },\n      true\n    );\n  };\n  \n  self._check_for_time_series = function (export_items) {\n      if (self.cluster_time_scale) {\n         export_items.push (\n            [\n               \"Show time-course plots\",\n                function (network, e) {\n                    e = d3.select (e);\n                    \n                    if (!network.network_cluster_dynamics) {\n                        network.network_cluster_dynamics = network.network_svg.append (\"g\").attr(\"id\", self.dom_prefix + \"-dynamics-svg\").\n                                                           attr (\"transform\", \"translate (\" + network.width*0.45 + \",0)\")\n                                                            ;\n                                                  \n                                                  \n                        network.handle_inline_charts = function () {                           \n                            var attr = null;\n                            var color = null;\n                            if (network.colorizer[\"category_id\"] && !network.colorizer[\"continuous\"]) {\n                                var attr_desc = network.json [_networkGraphAttrbuteID][network.colorizer[\"category_id\"]];\n                                attr = {};\n                                attr[network.colorizer[\"category_id\"]] = attr_desc[\"label\"];\n                                color = {};\n                                color[attr_desc[\"label\"]] = network.colorizer[\"category\"];\n                            }\n\n                             misc.cluster_dynamics (network.extract_network_time_series (self.cluster_time_scale, attr), \n                                network.network_cluster_dynamics, \n                                \"Time\", \"Cluster Members\",null,null, {\n                                    base_line : 20,\n                                    top: network.margin.top,\n                                    right: network.margin.right,\n                                    bottom: 3 * 20,\n                                    left: 5 * 20,\n                                    font_size : 12,\n                                    rect_size : 14,\n                                    width : network.width/2,\n                                    height : network.height/2,\n                                    colorizer: color,\n                                    prefix : network.dom_prefix,\n                                    drag : {x : network.width*0.45 ,\n                                            y : 0 }\n                                });\n                            };\n                            network.handle_inline_charts();\n                            e.text (\"Hide time-course plots\");\n                    } else {\n                          e.text (\"Show time-course plots\");\n                          network.network_cluster_dynamics.remove();\n                          network.network_cluster_dynamics = null;\n                          network.handle_inline_charts = null;\n                    }\n                 }\n            ]        \n        );\n    }\n\n  };\n  \n  self.open_exclusive_tab_close = function (tab_element, tab_content, restore_to_tag) {  \n    $('#' + restore_to_tag).tab('show');\n    $('#' + tab_element).remove();\n    $('#' + tab_content).remove();\n  }\n  \n  self.open_exclusive_tab_view = function (cluster_id, custom_filter, custom_name, additional_options) {\n    var cluster = _.find (self.clusters, function (c) {\n        return c.cluster_id == cluster_id;}\n    );\n        \n        \n    if (!cluster) {\n        return;\n    }\n\n    additional_options = additional_options || {};\n\n    var filtered_json = _extract_single_cluster (custom_filter ? _.filter (self.json.Nodes, custom_filter) : cluster.children);\n                        \n    if (_networkGraphAttrbuteID in json) {\n        filtered_json [_networkGraphAttrbuteID] = {};\n        jQuery.extend (true, filtered_json [_networkGraphAttrbuteID], json [_networkGraphAttrbuteID]);\n    }\n    \n    var export_items = [\n                            [\n                            \"Export cluster to .CSV\",\n                                function (network) {\n                                    helpers.export_csv_button  (self._extract_attributes_for_nodes (self._extract_nodes_by_id (cluster_id), \n                                                                self._extract_exportable_attributes ()));\n                                }\n                            ]\n                        ];\n                        \n                         \n    self._check_for_time_series (export_items);\n    \n    if (\"extra_menu\" in additional_options) {\n        _.each (export_items, function (item) {\n            additional_options[\"extra_menu\"][\"items\"].push (item);\n        });\n    } else {\n        _.extend (additional_options,{\"extra_menu\" : \n                        {\"title\" : \"Action\",\n                         \"items\" : export_items\n                        }});\n    }\n\n    return self.open_exclusive_tab_view_aux (filtered_json, custom_name ? custom_name (cluster_id) : (\"Cluster \" + cluster_id),\n        additional_options   \n    );\n  }\n  \n  \n  self.open_exclusive_tab_view_aux = function (filtered_json, title, option_extras) {\n \n    var random_id = function (alphabet, length) {\n        var s = \"\";\n        for (var i = 0; i < length; i++) {\n            s += _.sample (alphabet);\n        }\n        return s;\n    };\n \n    var letters             = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n \n    var random_prefix       = random_id (letters, 32);\n    var random_tab_id       = random_prefix + \"_tab\";\n    var random_content_id   = random_prefix + \"_div\";\n    var random_button_bar   = random_prefix + \"_ui\";\n    \n    while ($(\"#\" + random_tab_id).length || $(\"#\" + random_content_id).length || $(\"#\" + random_button_bar).length) {\n         random_prefix       = random_id (letters, 32);\n         random_tab_id       = random_prefix + \"_tab\";   \n         random_content_id   = random_prefix + \"_div\";\n         random_button_bar   = random_prefix + \"_ui\";\n    }\n    \n    var tab_container       = \"top_level_tab_container\";\n    var content_container   = \"top_level_tab_content\";\n    var go_here_when_closed = \"trace-default-tab\";\n    \n\n    // add new tab to the menu bar and switch to it\n    var new_tab_header    = $(\"<li></li>\").attr (\"id\", random_tab_id);\n    var new_link = $ (\"<a></a>\").attr (\"href\", \"#\" + random_content_id).attr (\"data-toggle\",\"tab\").text (title);\n    $('<button type=\"button\" class=\"close\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>').appendTo (new_link).\n    on ('click', function () {\n        self.open_exclusive_tab_close (random_tab_id, random_content_id, go_here_when_closed);\n    });\n    \n    new_link.appendTo (new_tab_header);\n    $(\"#\" + tab_container).append (new_tab_header);\n\n    var new_tab_content   = $(\"<div></div>\").addClass (\"tab-pane\").attr (\"id\", random_content_id).data(\"cluster\", option_extras.cluster_id);\n\n    if(option_extras.type==\"subcluster\") {\n      new_tab_content.addClass(\"subcluster-view\").addClass(\"subcluster-\" + option_extras.cluster_id.replace('.','_'));\n    }\n\n    //     <li class='disabled' id=\"attributes-tab\"><a href=\"#trace-attributes\" data-toggle=\"tab\">Attributes</a></li>\n    var new_button_bar = $('[data-hivtrace=\"cluster-clone\"]').clone().attr('data-hivtrace', null);\n    new_button_bar.find(\"[data-hivtrace-button-bar='yes']\").attr(\"id\", random_button_bar).addClass(\"cloned-cluster-tab\").attr('data-hivtrace-button-bar', null);\n    \n    new_button_bar.appendTo (new_tab_content);\n    new_tab_content.appendTo (\"#\" + content_container);\n\n    // show the new tab\n    $(new_link).tab('show');\n    \n    var cluster_options = {\"no_cdc\" : options && options[\"no_cdc\"], \"minimum size\" : 0, \"secondary\": true, \"prefix\" : random_prefix, \n        \"extra_menu\" : (options && \"extra_menu\" in options) ? options [\"extra_menu\"] : null , \n        \"edge-styler\" : (options && \"edge-styler\" in options) ? options [\"edge-styler\"] : null,\n        \"no-subclusters\" : true };\n        \n            \n    if (option_extras) {\n        _.extend (cluster_options, option_extras);\n    }\n\n\n    var cluster_view = hivtrace.clusterNetwork(filtered_json, '#' + random_content_id, null, null, random_button_bar, attributes, null, null, null, parent_container, cluster_options);\n        \n    cluster_view.expand_cluster_handler (cluster_view.clusters[0], true);\n\n    if (self.colorizer[\"category_id\"]) {\n        if (self.colorizer[\"continuous\"]) {\n            cluster_view.handle_attribute_continuous (self.colorizer[\"category_id\"]);\n        } else {\n            cluster_view.handle_attribute_categorical (self.colorizer[\"category_id\"]);\n        }\n    }\n        \n    if (self.node_shaper[\"id\"]) {\n        cluster_view.handle_shape_categorical (self.node_shaper[\"id\"]);\n    }\n \n    if (self.colorizer[\"opacity_id\"]) {\n        cluster_view.handle_attribute_opacity (self.colorizer[\"opacity_id\"]);\n    }\n    \n    return cluster_view;\n        \n    // copy all the divs other than the one matching the network tab ID\n    /*var cloned_empty_tab  = $('#trace-results').clone();\n    cloned_empty_tab.attr (\"id\", random_content_id);\n    console.log (cloned_empty_tab);\n\n    cloned_empty_tab.appendTo (\".tab-content\");    */\n    \n    /*self.cluster_filtering_functions ['cluster_id'] = function (c) {return c.cluster_id == cluster.cluster_id;};\n    cluster.exclusive = 1;\n    self.has_exclusive_view = cluster.cluster_id;\n    self.draw_attribute_labels();\n    self.update(false);*/\n    \n    \n}\n  \n  self.get_ui_element_selector_by_role = function (role, not_nested) {\n    if (not_nested && !self.primary_graph) {\n        return undefined;    \n    }\n    return (not_nested ? \"\" : \"#\" + self.ui_container_selector) + \" [data-hivtrace-ui-role='\" + role +\"']\";\n  }\n\n  // ensure all checkboxes are unchecked at initialization\n  $('input[type=\"checkbox\"]').prop('checked', false);\n\n  var handle_node_click = function(node) {\n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select(\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container\n        .append(\"ul\")\n        .attr(\"id\", id)\n        .attr(\"class\", \"dropdown-menu\")\n        .attr(\"role\", \"menu\");\n    }\n\n    menu_object.selectAll(\"li\").remove();\n\n    if (node) {\n      node.fixed = 1;\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Collapse cluster\")\n        .on(\"click\", function(d) {\n          node.fixed = 0;\n          collapse_cluster_handler(node, true);\n          menu_object.style(\"display\", \"none\");\n        });\n        \n      // SW20180605 : To be implemented\n      \n      //menu_object\n      //  .append(\"li\")\n      //  .append(\"a\")\n      //  .attr(\"tabindex\", \"-1\")\n      //  .text(\"Show sequences used to make cluster\")\n      //  .on(\"click\", function(d) {\n      //    node.fixed = 0;\n      //    show_sequences_in_cluster (node, true);\n      //    menu_object.style(\"display\", \"none\");\n      //  });\n\n      menu_object\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style(\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style(\"display\", \"block\");\n    } else {\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\n      \"click\",\n      function(d) {\n        handle_node_click(null);\n      },\n      true\n    );\n  };\n\n  function get_initial_xy (packed) {\n    // create clusters from nodes\n    var mapped_clusters = get_all_clusters(self.nodes);\n\n    var d_clusters = {\n      id: \"root\",\n      children: []\n    };\n\n    // filter out clusters that are to be excluded\n    if (self.exclude_cluster_ids) {\n      mapped_clusters = _.omit(mapped_clusters, self.exclude_cluster_ids);\n    }\n\n    d_clusters.children = _.map(mapped_clusters, (value, key) => {\n      return {\n        cluster_id: key,\n        children: value\n      };\n    });\n    \n    var treemap = packed ? \n    \n       (\n       d3.layout\n      .pack()\n      .size([self.width, self.height])\n      //.sticky(true)\n      .children(function(d) {\n        return d.children;\n      })\n      .value(function(d) {\n        return Math.pow (d.parent.children.length, 1.5);\n      })\n      .sort (function (a,b) {\n        return b.value - a.value;\n      })\n      .padding (5)\n      )\n      \n      :\n\n      (d3.layout\n      .treemap ()\n      .size([self.width, self.height])\n      //.sticky(true)\n      .children(function(d) {\n        return d.children;\n      })\n      .value(function(d) {\n        return Math.pow (d.parent.children.length,1.0);\n      })\n      .sort (function (a,b) {\n        return a.value - b.value;\n      })\n      .ratio (1.)\n      );\n\n    var clusters = treemap.nodes(d_clusters);\n    _.each (clusters, function (c) {\n        //c.fixed = true;\n    });\n    return clusters;\n  }\n\n  function prepare_data_to_graph() {\n    var graphMe = {};\n    graphMe.all = [];\n    graphMe.edges = [];\n    graphMe.nodes = [];\n    graphMe.clusters = [];\n\n    var expandedClusters = [];\n    var drawnNodes = [];\n\n    self.clusters.forEach(function(x) {\n      if (self.cluster_display_filter(x)) {\n        // Check if hxb2_linked is in a child\n        var hxb2_exists =\n          x.children.some(function(c) {\n            return c.hxb2_linked;\n          }) && self.hide_hxb2;\n        if (!hxb2_exists) {\n          if (x.collapsed) {\n            graphMe.clusters.push(x);\n            graphMe.all.push(x);\n          } else {\n            expandedClusters[x.cluster_id] = true;\n          }\n        }\n      }\n    });\n\n    self.nodes.forEach(function(x, i) {\n      if (expandedClusters[x.cluster]) {\n        drawnNodes[i] = graphMe.nodes.length + graphMe.clusters.length;\n        graphMe.nodes.push(x);\n        graphMe.all.push(x);\n      }\n    });\n\n    self.edges.forEach(function(x) {\n      if (!(x.removed && self.filter_edges)) {\n        if (\n          drawnNodes[x.source] !== undefined &&\n          drawnNodes[x.target] !== undefined\n        ) {\n          var y = {};\n          for (var prop in x) {\n            y[prop] = x[prop];\n          }\n\n          y.source = drawnNodes[x.source];\n          y.target = drawnNodes[x.target];\n          graphMe.edges.push(y);\n        }\n      }\n    });\n\n    return graphMe;\n  }\n  \n  \n  self.view_subcluster = function (cluster, custom_filter, custom_name) {\n    \n    var filtered_json = _extract_single_cluster (custom_filter ? _.filter (self.json.Nodes, custom_filter) : cluster.children, function (e) {                                                            \n                                                                    return e.length < self.subcluster_threshold;\n                                                        });\n                                                        \n    _.each (filtered_json.Nodes, function (n) {\n        n.subcluster = \"1.1\";\n    });\n    \n    if (_networkGraphAttrbuteID in json) {\n        filtered_json [_networkGraphAttrbuteID] = {};\n        jQuery.extend (true, filtered_json [_networkGraphAttrbuteID], json [_networkGraphAttrbuteID]);\n    }\n    \n    var extra_menu_items = [\n                       [function (network, item) {\n                            var enclosure = item.append (\"div\").classed (\"form-group\", true);\n                            var label = enclosure.append (\"label\").text (\"Recalculate R&R from \").classed (\"control-label\", true);\n                            var date = enclosure.append (\"input\").attr ('type','date').classed (\"form-control\", true)\n                            .attr ('value', _defaultDateViewFormatSlider (self.today))\n                            .attr ('max', _defaultDateViewFormatSlider (self.today))\n                            .attr ('min', _defaultDateViewFormatSlider(d3.min (network.nodes, \n                                function (node) {\n                                    return network.attribute_node_value_by_id(node, _networkCDCDateField);\n                                })))\n                            .on (\"input\", function (e) {\n                                //d3.event.preventDefault();\n                                var set_date = _defaultDateViewFormatSlider.parse (this.value);\n                                if (this.value) {\n                                    network.annotate_priority_clusters (_networkCDCDateField, 36, 12, set_date);\n                                    var field_def = network.recent_rapid_definition (network, set_date);\n                                    network.inject_attribute_description (\"recent_rapid\", field_def);\n                                    network._aux_process_category_values(network._aux_populate_category_fields (field_def, \"recent_rapid\"));\n                                    network.handle_attribute_categorical (\"recent_rapid\");\n                                    enclosure.classed ('has-success',true).classed ('has-error',false);\n                                }  else {\n                                    enclosure.classed ('has-success',false).classed ('has-error',true);\n                                }\n                            });\n                        },\n                        null\n                       ],\n                       [\"Export cluster to .CSV\",\n                            function (network) {\n                                helpers.export_csv_button  (network._extract_attributes_for_nodes (network._extract_nodes_by_id (\"1.1\"), \n                                                            network._extract_exportable_attributes ()));\n                            }\n                       ]\n                     ];\n    \n    self._check_for_time_series (extra_menu_items);\n    self.open_exclusive_tab_view_aux (filtered_json, custom_name || (\"Subcluster \" + cluster.cluster_id), \n            { //\"core-link\" : self.subcluster_threshold,\n              \"type\" : \"subcluster\",\n              \"cluster_id\" : cluster.cluster_id,\n              \"extra_menu\" : \n                {\"title\" : \"Action\",\n                     \"items\" : extra_menu_items\n                    }\n            }\n    ).handle_attribute_categorical (\"recent_rapid\");\n\n    var selector = \".subcluster-\" + cluster.cluster_id.replace(\".\",\"_\") + \" .show-small-clusters-button\";\n    var item = $('<span class=\"input-group-addon btn view-parent-btn\">View Parent</span>').data(\"cluster_id\", cluster.parent_cluster.cluster_id).insertAfter(selector);\n\n    item.on(\"click\", function (e) {\n      self.open_exclusive_tab_view ($(this).data('cluster_id'));\n    });\n\n  }\n  \n  function _n_months_ago (reference_date, months) {\n  \n    var past_date = new Date (reference_date);\n    var past_months = past_date.getMonth();\n    var diff_year = Math.floor (months/12);\n    var left_over = months - diff_year * 12;\n    \n    if (left_over > past_months) {\n        past_date.setFullYear (past_date.getFullYear() - diff_year - 1);\n        past_date.setMonth (12-(left_over - past_months));\n    } else {\n        past_date.setFullYear (past_date.getFullYear() - diff_year);\n        past_date.setMonth (past_months-left_over);\n    }\n    \n    \n    //past_date.setTime (past_date.getTime () - months * 30 * 24 * 3600000);\n    return past_date;\n  } \n  \n  self.annotate_priority_clusters = function (date_field, span_months, recent_months, start_date) {\n  \n    try {\n\n        start_date = start_date || self.today;\n   \n        var filter_by_date = function (cutoff, node) {\n            var node_dx = self.attribute_node_value_by_id (node, date_field);\n            if (node_dx instanceof Date) {\n                return node_dx >= cutoff && node_dx <= start_date;\n            } else {\n                node_dx = self._parse_dates(self.attribute_node_value_by_id(node, date_field));\n                if (node_dx instanceof Date) {\n                    return node_dx >= cutoff && node_dx <= start_date;\n                } \n            }\n            return false;\n        };\n        \n        var cutoff_long  = _n_months_ago (start_date, span_months);\n        var cutoff_short = _n_months_ago (start_date, recent_months);\n \n        var node_iterator;\n        \n        if (start_date == self.today) {\n            node_iterator = self.nodes; \n        } else {\n            var beginning_of_time = new Date (); \n            beginning_of_time.setYear (1900);\n            node_iterator = [];\n            _.each (self.nodes, function (node) {\n                 if (filter_by_date (beginning_of_time, node)) {\n                    node.priority_flag = 5;\n                    node_iterator.push (node);\n                } else {\n                    node.priority_flag = 4;\n                }\n            });\n       }\n  \n       \n        var oldest_nodes_first = function (n1,n2) { \n        // consistent node sorting, older nodes first\n                        var node1_dx = self.attribute_node_value_by_id (n1, date_field);\n                        var node2_dx = self.attribute_node_value_by_id (n2, date_field);\n                        \n                        if (node1_dx == node2_dx) {\n                            return n1.id < n2.id ? -1 : 1;\n                        } else {\n                            return node1_dx < node2_dx ? -1 : 1;\n                        }\n                        return 0;\n                    };\n                    \n        // extract all clusters at once to avoid inefficiencies of multiple edge-set traverals\n        \n        var split_clusters = {};\n        var node_id_to_local_cluster = {};\n        \n        // reset all annotations \n  \n              \n        _.each (node_iterator, function (node) {\n            if (node.cluster) {\n                if (! (node.cluster in split_clusters)) {\n                    split_clusters [node.cluster] = {'Nodes' : [], 'Edges' : []};\n                }\n                node_id_to_local_cluster [node.id] = split_clusters [node.cluster][\"Nodes\"].length;\n                split_clusters [node.cluster][\"Nodes\"].push (node);\n            }\n            \n        });\n        \n        _.each (self.edges, function (edge) {\n            if (edge.length <= self.subcluster_threshold) {\n                var edge_cluster = json.Nodes[edge.source].cluster;\n                \n                var source_id = json.Nodes[edge.source].id,\n                    target_id = json.Nodes[edge.target].id;\n                    \n                \n                if ((source_id in node_id_to_local_cluster) && (target_id in node_id_to_local_cluster)) {\n                    var copied_edge = _.clone (edge);\n\n                    copied_edge.source = node_id_to_local_cluster[source_id];\n                    copied_edge.target = node_id_to_local_cluster[target_id];\n                \n                    split_clusters[edge_cluster][\"Edges\"].push (copied_edge);\n                }\n            }\n        });\n        \n         \n        _.each (split_clusters, function (cluster_nodes,cluster_index) {   \n        \n            /** extract subclusters; all nodes at given threshold */\n            /** Sub-Cluster: all nodes connected at 0.005 subs/site; there can be multiple sub-clusters per cluster */\n            \n            //var cluster_nodes       = _extract_single_cluster (cluster.children, null, true);\n            \n            var array_index = self.cluster_mapping [cluster_index];\n                        \n            self.clusters[array_index].priority_score = 0;\n                        \n            /** all clusters with more than one member connected at 'threshold' edge length */\n            var edges        = [];\n                        \n            var subclusters  = _.filter (hivtrace_cluster_depthwise_traversal (\n                cluster_nodes.Nodes, \n                cluster_nodes.Edges,null, edges), function (cc) {return cc.length > 1;});\n                \n                              \n            edges =  _.filter (edges, function (es) {return es.length > 1;});\n               \n            /** sort subclusters by oldest node */\n \n            _.each (subclusters, function (c,i) {\n                 c.sort (oldest_nodes_first);\n            });\n            \n            subclusters.sort (function (c1, c2) {\n                return oldest_nodes_first (c1[0], c2[0]);\n            });\n\n            \n            subclusters = _.map (subclusters, function (c, i) {\n                var label = self.clusters[array_index].cluster_id + \".\" + (i+1);\n                 \n                 \n                _.each (c, function (n) {\n                    n.subcluster = label;\n                    n.priority_flag = 0;\n                    n.in_rr         = 0;\n               });\n            \n                return {\n                    'children' : _.clone (c), \n                    'parent_cluster' : self.clusters[array_index], \n                    'cluster_id': label,\n                    'distances' : helpers.describe_vector(_.map (edges[i], function (e) {return e.length;}))\n                };\n            });\n\n\n\n            _.each (subclusters, function (c) {\n                 _compute_cluster_degrees (c);\n            });\n           \n            self.clusters[array_index].subclusters = subclusters;\n            \n \n            /** now, for each subcluster, extract the recent and rapid part */\n            \n            /** Recent & Rapid (R&R) Cluster: the part of the Sub-Cluster inferred using only cases dx’d in the previous 36 months \n                and at least two cases dx’d in the previous 12 months; there is a path between all nodes in an R&R Cluster\n                \n                20180406 SLKP: while unlikely, this definition could result in multiple R&R clusters \n                per subclusters; for now we will add up all the cases for prioritization, and \n                display the largest R&R cluster if there is more than one\n            */\n               \n            _.each (subclusters, function (sub) {\n                // extract nodes based on dates\n                 var subcluster_json = _extract_single_cluster (_.filter (sub.children, _.partial (filter_by_date, cutoff_long)), null, true, cluster_nodes);\n                 var rr_cluster = _.filter (hivtrace_cluster_depthwise_traversal (\n                    subcluster_json.Nodes, \n                    _.filter (subcluster_json.Edges, function (e) {return e.length <= self.subcluster_threshold;\n                    })), function (cc) {return cc.length > 1;});\n                    \n                 sub.rr_count           = rr_cluster.length;\n                 \n                 rr_cluster.sort (function (a,b) { return b.length - a.length});\n                 \n                 sub.priority_score     = [];\n                 sub.recent_nodes       = [];\n                 \n                 _.each (rr_cluster, function (recent_cluster) {                 \n                    var priority_nodes = _.groupBy (recent_cluster, _.partial (filter_by_date, cutoff_short));\n                    sub.recent_nodes.push (recent_cluster.length);\n                    if (true in priority_nodes) {\n                        sub.priority_score.push (priority_nodes[true].length);\n                        _.each (priority_nodes[true], function (n) { \n                            n.priority_flag = filter_by_date (start_date, n) ? 4 : 1;\n                            if (priority_nodes[true].length >= 3) {\n                                n.in_rr = true;\n                                if (n.priority_flag == 1) {\n                                    n.priority_flag = 2;\n                                }\n                            }\n                        });\n                    } \n                    if (false in priority_nodes) {\n                        _.each (priority_nodes[false], function (n) { n.priority_flag = 3;});                    \n                    }\n                 });\n                 \n                 //console.log (sub.recent_nodes);\n                 \n                 self.clusters[array_index].priority_score = sub.priority_score;\n                 \n            });\n            \n                       \n        });\n    } catch (err) {\n        console.log (err);\n        return;\n    }\n\n  }\n\n  function default_layout(packed) {\n    // let's create an array of clusters from the json\n    \n    var init_layout = get_initial_xy(packed);\n    \n    if (self.clusters.length == 0) {\n        self.clusters = init_layout.filter(function(v, i, obj) {\n          return !(typeof v.cluster_id === \"undefined\");\n        });\n        \n        \n    } else {\n        var coordinate_update = {};\n        _.each (self.clusters, function (c) {\n            coordinate_update [c.cluster_id] = c;\n        });        \n        _.each (init_layout, function (c) {\n            if (\"cluster_id\" in c) {\n               _.extendOwn (coordinate_update [c.cluster_id], c);\n            }\n        });\n    }\n\n    //var sizes = network_layout.size();\n    \n    var set_init_coords = packed ? function (n) {n.x += n.r * 0.5; n.y += n.r * 0.5;} :\n                                   function (n) {n.x += n.dx * 0.5; n.y += n.dy * 0.5;}\n    \n    _.each ([self.nodes, self.clusters], function (list) {\n        _.each (list, set_init_coords);\n    });\n   \n\n    self.clusters.forEach(collapse_cluster);\n  }\n\n  function change_spacing(delta) {\n    self.charge_correction = self.charge_correction * delta;\n    network_layout.start();\n  }\n\n  function change_window_size(delta, trigger) {\n    if (delta) {\n      var x_scale = (self.width + delta / 2) / self.width;\n      var y_scale = (self.height + delta / 2) / self.height;\n\n      self.width += delta;\n      self.height += delta;\n\n      var rescale_x = d3.scale.linear().domain(\n        d3.extent(network_layout.nodes(), function(node) {\n          return node.x;\n        })\n      );\n      rescale_x.range(\n        _.map(rescale_x.domain(), function(v) {\n          return v * x_scale;\n        })\n      );\n      //.range ([50,self.width-50]),\n      var rescale_y = d3.scale.linear().domain(\n        d3.extent(network_layout.nodes(), function(node) {\n          return node.y;\n        })\n      );\n      rescale_y.range(\n        _.map(rescale_y.domain(), function(v) {\n          return v * y_scale;\n        })\n      );\n\n      _.each(network_layout.nodes(), function(node) {\n        node.x = rescale_x(node.x);\n        node.y = rescale_y(node.y);\n      });\n    }\n\n    self.width = Math.min(Math.max(self.width, 200), 4000);\n    self.height = Math.min(Math.max(self.height, 200), 4000);\n\n    network_layout.size([self.width, self.height]);\n    self.network_svg.attr(\"width\", self.width).attr(\"height\", self.height);\n\n    if (trigger) {\n      network_layout.start();\n    } else {\n      if (delta) {\n        self.update(true);\n      }\n    }\n  }\n\n  self.compute_adjacency_list = _.once(function() {\n    self.nodes.forEach(function(n) {\n      n.neighbors = d3.set();\n    });\n\n    self.edges.forEach(function(e) {\n      self.nodes[e.source].neighbors.add(e.target);\n      self.nodes[e.target].neighbors.add(e.source);\n    });\n  });\n\n  self.compute_local_clustering_coefficients = _.once(function() {\n    self.compute_adjacency_list();\n\n    self.nodes.forEach(function(n) {\n      _.defer(function(a_node) {\n        neighborhood_size = a_node.neighbors.size();\n        if (neighborhood_size < 2) {\n          a_node.lcc = misc.undefined;\n        } else {\n          if (neighborhood_size > 500) {\n            a_node.lcc = misc.too_large;\n          } else {\n            // count triangles\n            neighborhood = a_node.neighbors.values();\n            counter = 0;\n            for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n              for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n                if (\n                  self.nodes[neighborhood[n1]].neighbors.has(neighborhood[n2])\n                ) {\n                  counter++;\n                }\n              }\n            }\n\n            a_node.lcc =\n              2 * counter / neighborhood_size / (neighborhood_size - 1);\n          }\n        }\n      }, n);\n    });\n  });\n\n  self.get_node_by_id = function(id) {\n    return self.nodes.filter(function(n) {\n      return n.id == id;\n    })[0];\n  };\n\n  self.compute_local_clustering_coefficients_worker = _.once(function() {\n    var worker = new Worker(\"workers/lcc.js\");\n\n    worker.onmessage = function(event) {\n      var nodes = event.data.Nodes;\n\n      nodes.forEach(function(n) {\n        node_to_update = self.get_node_by_id(n.id);\n        node_to_update.lcc = n.lcc ? n.lcc : misc.undefined;\n      });\n    };\n\n    var worker_obj = {};\n    worker_obj[\"Nodes\"] = self.nodes;\n    worker_obj[\"Edges\"] = self.edges;\n    worker.postMessage(worker_obj);\n  });\n\n  var estimate_cubic_compute_cost = _.memoize(\n    function(c) {\n      self.compute_adjacency_list();\n      return _.reduce(\n        _.first(_.pluck(c.children, \"degree\").sort(d3.descending), 3),\n        function(memo, value) {\n          return memo * value;\n        },\n        1\n      );\n    },\n    function(c) {\n      return c.cluster_id;\n    }\n  );\n\n  self.compute_global_clustering_coefficients = _.once(function() {\n    self.compute_adjacency_list();\n\n    self.clusters.forEach(function(c) {\n      _.defer(function(a_cluster) {\n        cluster_size = a_cluster.children.length;\n        if (cluster_size < 3) {\n          a_cluster.cc = misc.undefined;\n        } else {\n          if (estimate_cubic_compute_cost(a_cluster, true) >= 5000000) {\n            a_cluster.cc = misc.too_large;\n          } else {\n            // pull out all the nodes that have this cluster id\n            member_nodes = [];\n\n            var triads = 0;\n            var triangles = 0;\n\n            self.nodes.forEach(function(n, i) {\n              if (n.cluster == a_cluster.cluster_id) {\n                member_nodes.push(i);\n              }\n            });\n            member_nodes.forEach(function(node) {\n              my_neighbors = self.nodes[node].neighbors\n                .values()\n                .map(function(d) {\n                  return +d;\n                })\n                .sort(d3.ascending);\n              for (n1 = 0; n1 < my_neighbors.length; n1 += 1) {\n                for (n2 = n1 + 1; n2 < my_neighbors.length; n2 += 1) {\n                  triads += 1;\n                  if (\n                    self.nodes[my_neighbors[n1]].neighbors.has(my_neighbors[n2])\n                  ) {\n                    triangles += 1;\n                  }\n                }\n              }\n            });\n\n            a_cluster.cc = triangles / triads;\n          }\n        }\n      }, c);\n    });\n  });\n\n  self.mark_nodes_as_processing = function(property) {\n    self.nodes.forEach(function(n) {\n      n[property] = misc.processing;\n    });\n  };\n\n  self.compute_graph_stats = function() {\n    d3.select(this).classed(\"disabled\", true).select(\"i\").classed({\n      \"fa-calculator\": false,\n      \"fa-cog\": true,\n      \"fa-spin\": true\n    });\n    self.mark_nodes_as_processing(\"lcc\");\n    self.compute_local_clustering_coefficients_worker();\n    self.compute_global_clustering_coefficients();\n    d3.select(this).remove();\n  };\n\n  /*------------ Constructor ---------------*/\n  function initial_json_load() {\n    var connected_links = [];\n    var total = 0;\n    self.exclude_cluster_ids = {};\n    self.has_hxb2_links = false;\n    self.cluster_sizes = [];\n\n    graph_data.Nodes.forEach(function(d) {\n      if (typeof self.cluster_sizes[d.cluster - 1] === \"undefined\") {\n        self.cluster_sizes[d.cluster - 1] = 1;\n      } else {\n        self.cluster_sizes[d.cluster - 1]++;\n      }\n      if (\"is_lanl\" in d) {\n        d.is_lanl = d.is_lanl == \"true\";\n      }\n\n      if (d.attributes.indexOf(\"problematic\") >= 0) {\n        self.has_hxb2_links = d.hxb2_linked = true;\n      }\n    });\n\n    /* add buttons and handlers */\n    /* clusters first */\n    \n    self.ui_container_selector = button_bar_ui;\n    \n    self._extract_attributes_for_nodes = function (nodes, column_names) {\n        var result = [_.map (column_names, function (c) {return c.raw_attribute_key;})];\n        _.each (nodes, function (n) {\n            result.push (_.map (column_names, function (c) {return self.attribute_node_value_by_id(n, c.raw_attribute_key)}));       \n        });\n        return result;\n    };\n    \n    self._extract_exportable_attributes = function () {\n        var allowed_types = {\n          String: 1,\n          Date: 1,\n          Number: 1\n        };\n\n        return _.filter(self.json[_networkGraphAttrbuteID], function(\n          d\n        ) {\n          return d.type in allowed_types;\n        });\n        \n    };\n    \n    self._extract_nodes_by_id = function (id) {\n    \n        var string_id = id.toString();\n        return _.filter(self.nodes, function(n) {\n          return n.cluster == id || n.subcluster == string_id \n        });\n    };\n\n    self._cluster_list_view_render = function (cluster_id,group_by_attribute, the_list) {\n      \n      \n        the_list.selectAll(\"*\").remove();\n        var column_ids =   self._extract_exportable_attributes ();   \n        var cluster_nodes = self._extract_nodes_by_id (cluster_id);\n        \n        d3.select(self.get_ui_element_selector_by_role (\"cluster_list_data_export\", true)).on (\n        \"click\", function (d) {\n            helpers.export_csv_button (self._extract_attributes_for_nodes (cluster_nodes, column_ids));\n        }\n        );\n        \n        if (group_by_attribute) {\n          _.each(column_ids, function(column) {\n            var binned = _.groupBy(cluster_nodes, function(n) {\n              return self.attribute_node_value_by_id(n, column.raw_attribute_key);\n            });\n            var sorted_keys = _.keys(binned).sort();\n            var attribute_record = the_list.append(\"li\");\n            attribute_record.append(\"code\").text(column.raw_attribute_key);\n            var attribute_list = attribute_record\n              .append(\"dl\")\n              .classed(\"dl-horizontal\", true);\n            _.each(sorted_keys, function(key) {\n              attribute_list.append(\"dt\").text(key);\n              attribute_list.append(\"dd\").text(\n                _.map(binned[key], function(n) {\n                  return n.id;\n                }).join(\", \")\n              );\n            });\n          });\n        } else {\n          _.each(\n            cluster_nodes,\n            function(node) {\n              var patient_record = the_list.append(\"li\");\n              patient_record.append(\"code\").text(node.id);\n              var patient_list = patient_record\n                .append(\"dl\")\n                .classed(\"dl-horizontal\", true);\n              _.each(column_ids, function(column) {\n                patient_list.append(\"dt\").text(column.raw_attribute_key);\n                patient_list\n                  .append(\"dd\")\n                  .text(\n                    self.attribute_node_value_by_id(node, column.raw_attribute_key)\n                  );\n              });\n            }\n          );\n        }\n      };\n      \n    self._setup_cluster_list_view  = function () {\n        d3\n        .select(self.get_ui_element_selector_by_role (\"cluster_list_view_toggle\", true))\n        .on(\"click\", function() {\n          d3.event.preventDefault();\n          var group_by_id = false;\n\n          var button_clicked = $(this);\n          if (button_clicked.data(\"view\") == \"id\") {\n            button_clicked.data(\"view\", \"attribute\");\n            button_clicked.text(\"Group by ID\");\n            group_by_id = false;\n          } else {\n            button_clicked.data(\"view\", \"id\");\n            button_clicked.text(\"Group by attribute\");\n            group_by_id = true;\n          }\n          self._cluster_list_view_render(\n            button_clicked.data(\"cluster\").toString(),\n            !group_by_id,\n            d3.select(self.get_ui_element_selector_by_role (\"cluster_list_payload\", true))\n          );\n        });\n\n \n      $(self.get_ui_element_selector_by_role (\"cluster_list\", true)).on(\"show.bs.modal\", function(\n        event\n      ) {\n        var link_clicked = $(event.relatedTarget);\n        var cluster_id = link_clicked.data(\"cluster\");\n        var modal = d3.select(self.get_ui_element_selector_by_role (\"cluster_list\", true));\n        modal\n          .selectAll(\".modal-title\")\n          .text(\"Listing nodes in cluster \" + cluster_id);\n        $(self.get_ui_element_selector_by_role (\"cluster_list_view_toggle\", true)).data(\n          \"cluster\",\n          cluster_id\n        );\n\n  \n        self._cluster_list_view_render(\n          cluster_id,\n          $(self.get_ui_element_selector_by_role (\"cluster_list_view_toggle\", true)).data(\"view\") !=\n            \"id\",\n          modal.select(self.get_ui_element_selector_by_role (\"cluster_list_payload\", true))\n        );\n      });     \n    };\n   \n    if (button_bar_ui) {\n    \n      self._setup_cluster_list_view ();          \n\n      var cluster_ui_container = d3.select(\n        self.get_ui_element_selector_by_role (\"cluster_operations_container\")\n      );\n\n      cluster_ui_container.selectAll(\"li\").remove();\n      \n      var fix_handler = function (do_fix) {\n         _.each ([self.clusters, self.nodes], function (list) {\n                _.each (list, function (obj) {\n                    obj.fixed = do_fix;\n                });\n            });\n      };\n\n      var layout_reset_handler = function (packed) {\n            var fixed = [];\n            _.each (self.clusters, function (obj) {\n                if (obj.fixed) {\n                    fixed.push (obj);\n                }\n                obj.fixed = false;\n            });\n            default_layout(packed);\n            network_layout.tick();\n            self.update();\n            _.each (fixed, function (obj) {\n                obj.fixed = true;\n            });\n      };\n\n      var cluster_commands = [\n        [\n          \"Expand All\",\n          function() {\n            return self.expand_some_clusters();\n          },\n          true,\n          \"hivtrace-expand-all\"\n        ],\n        [\n          \"Collapse All\",\n          function() {\n            return self.collapse_some_clusters();\n          },\n          true,\n          \"hivtrace-collapse-all\"\n        ],\n        [\n          \"Expand Filtered\",\n          function() {\n            return self.expand_some_clusters(\n              self.select_some_clusters(function(n) {\n                return n.match_filter;\n              })\n            );\n          },\n          true,\n          \"hivtrace-expand-filtered\"\n        ],\n        [\n          \"Collapse Filtered\",\n          function() {\n            return self.collapse_some_clusters(\n              self.select_some_clusters(function(n) {\n                return n.match_filter;\n              })\n            );\n          },\n          true,\n          \"hivtrace-collapse-filtered\"\n        ],\n         [\n          \"Fix all objects in place\",\n          _.partial (fix_handler, true),\n          true,\n          \"hivtrace-fix-in-place\"\n         ],\n         [\n          \"Allow all objects to float\",\n          _.partial (fix_handler, false),\n          true,\n          \"hivtrace-allow-to-float\"\n        ],\n         [\n          \"Reset layout [packed]\",\n          _.partial (layout_reset_handler, true),\n          true,\n          \"hivtrace-reset-layout\"\n        ],\n        [\n          \"Reset layout [tiled]\",\n          _.partial (layout_reset_handler, false),\n          true,\n          \"hivtrace-reset-layout\"\n        ],       \n        [\n          \"Hide problematic clusters\",\n          function(item) {\n            d3\n              .select(item)\n              .text(\n                self.hide_hxb2\n                  ? \"Hide problematic clusters\"\n                  : \"Show problematic clusters\"\n              );\n            self.toggle_hxb2();\n          },\n          self.has_hxb2_links,\n          \"hivtrace-hide-problematic-clusters\"\n        ]\n      ];\n\n      if (!self._is_CDC_) {\n        cluster_commands.push([\n          \"Show removed edges\",\n          function(item) {\n            self.filter_edges = !self.filter_edges;\n            d3\n              .select(item)\n              .text(\n                self.filter_edges ? \"Show removed edges\" : \"Hide removed edges\"\n              );\n            self.update(false);\n          },\n          function() {\n            return _.some(self.edges, function(d) {\n              return d.removed;\n            });\n          },\n          \"hivtrace-show-removed-edges\"\n        ]);\n      }\n\n      cluster_commands.forEach(function(item, index) {\n        var handler_callback = item[1];\n        if (item[2]) {\n          this.append(\"li\")\n            .append(\"a\")\n            .text(item[0])\n            .attr(\"href\", \"#\")\n             //.attr(\"id\", item[3])\n            .on(\"click\", function(e) {\n              handler_callback(this);\n              d3.event.preventDefault();\n            });\n        }\n      }, cluster_ui_container);\n      \n\n      var button_group = d3.select(self.get_ui_element_selector_by_role(\"button_group\"));\n\n      if (!button_group.empty()) {\n        button_group.selectAll(\"button\").remove();\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Expand spacing\")\n          .on(\"click\", function(d) {\n            change_spacing(5 / 4);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-plus\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Compress spacing\")\n          .on(\"click\", function(d) {\n            change_spacing(4 / 5);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-minus\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Enlarge window\")\n          .on(\"click\", function(d) {\n            change_window_size(100, true);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-expand\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Shrink window\")\n          .on(\"click\", function(d) {\n            change_window_size(-100, true);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-compress\", true);\n\n        if (!self._is_CDC_) {\n          button_group\n            .append(\"button\")\n            .classed(\"btn btn-default btn-sm\", true)\n            .attr(\"title\", \"Compute graph statistics\")\n            .attr(\"id\", \"hivtrace-compute-graph-statistics\")\n            .on(\"click\", function(d) {\n              _.bind(self.compute_graph_stats, this)();\n            })\n            .append(\"i\")\n            .classed(\"fa fa-calculator\", true);\n        }\n\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Save Image\")\n          //.attr(\"id\", \"hivtrace-export-image\")\n          .on(\"click\", function(d) {\n             helpers.save_image(\"png\", \"#\" + self.dom_prefix + \"-network-svg\");\n          })\n          .append(\"i\")\n          .classed(\"fa fa-image\", true);\n      }\n\n      $(self.get_ui_element_selector_by_role (\"filter\")).on(\n        \"input propertychange\",\n        _.throttle(function(e) {\n          var filter_value = $(this).val();\n          self.filter(\n            filter_value\n              .split(\" \")\n              .filter(function(d) {\n                return d.length > 0;\n              })\n              .map(function(d) {\n                if (d.length > 2) {\n                  if (d[0] == '\"' && d[d.length - 1] == '\"') {\n                    return {\n                      type: \"re\",\n                      value: new RegExp(\n                        \"^\" + d.substr(1, d.length - 2) + \"$\",\n                        \"i\"\n                      )\n                    };\n                  }\n                  if (d[0] == \"<\") {\n                    var distance_threshold = parseFloat(d.substr(1));\n                    if (distance_threshold > 0) {\n                      return {\n                        type: \"distance\",\n                        value: distance_threshold\n                      };\n                    }\n                  }\n                }\n                return {\n                  type: \"re\",\n                  value: new RegExp(d, \"i\")\n                };\n              })\n          );\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role (\"hide_filter\")).on(\n        \"change\",\n        _.throttle(function(e) {\n          self.hide_unselected = !self.hide_unselected;\n          self.filter_visibility();\n          self.update(true);\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role (\"show_small_clusters\")).on(\n        \"change\",\n        _.throttle(function(e) {\n        \n          if ('size' in self.cluster_filtering_functions) {\n            delete self.cluster_filtering_functions['size'];\n          } else {\n            self.cluster_filtering_functions['size'] = self.filter_by_size;\n          }\n            \n          self.update(false);\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role (\"pairwise_table_pecentage\", true)).on(\n        \"change\",\n        _.throttle(function(e) {\n          self.show_percent_in_pairwise_table = !self.show_percent_in_pairwise_table;\n          render_binned_table(\n            \"attribute_table\",\n            self.colorizer[\"category_map\"],\n            self.colorizer[\"category_pairwise\"]\n          );\n        }, 250)\n      );\n    }\n\n    if (_networkGraphAttrbuteID in json) {\n      attributes = json[_networkGraphAttrbuteID];\n    } else {\n      if (attributes && \"hivtrace\" in attributes) {\n        attributes = attributes[\"hivtrace\"];\n      }\n    }\n\n\n    // Initialize class attributes\n    singletons = graph_data.Nodes.filter(function(v, i) {\n      return v.cluster === null;\n    }).length;\n    self.nodes = graph_data.Nodes.filter(function(v, i) {\n      if (\n        v.cluster &&\n        typeof self.exclude_cluster_ids[v.cluster] === \"undefined\"\n      ) {\n        connected_links[i] = total++;\n        return true;\n      }\n      return false;\n    });\n    self.edges = graph_data.Edges.filter(function(v, i) {\n      return (\n        connected_links[v.source] != undefined &&\n        connected_links[v.target] != undefined\n      );\n    });\n    self.edges = self.edges.map(function(v, i) {\n      v.source = connected_links[v.source];\n      v.target = connected_links[v.target];\n      v.id = i;\n      return v;\n    });\n\n    compute_node_degrees(self.nodes, self.edges);\n\n    default_layout(self.initial_packed);\n    self.clusters.forEach(function(d, i) {\n      self.cluster_mapping[d.cluster_id] = i;\n      d.hxb2_linked = d.children.some(function(c) {\n        return c.hxb2_linked;\n      });\n      _compute_cluster_degrees (d);\n      d.distances = [];\n    });\n    \n      try {\n        if (options && options [\"extra_menu\"]) {\n          var extra_ui_container = d3.select(\n            self.get_ui_element_selector_by_role (\"extra_operations_container\")\n          );\n            \n          d3.select(\n            self.get_ui_element_selector_by_role (\"extra_operations_enclosure\")\n          )  .selectAll (\"button\").text (options[\"extra_menu\"][\"title\"]).append (\"span\").classed(\"caret\",\"true\");\n          //extra_ui_container\n          extra_ui_container.selectAll(\"li\").remove();\n\n            options[\"extra_menu\"][\"items\"].forEach(function(item, index) {  \n                //console.log (item);\n                var handler_callback = item[1];\n                if (_.isFunction (item[0])) {\n                   item[0](self,this.append(\"li\"));\n                } else {\n                  this.append(\"li\")\n                    .append(\"a\")\n                    .text(item[0])\n                    .attr(\"href\", \"#\")\n                    .on(\"click\", function(e) {\n                      handler_callback(self, this);\n                      d3.event.preventDefault();\n                    });\n                }\n              }, extra_ui_container);\n                      \n          d3.select (self.get_ui_element_selector_by_role (\"extra_operations_enclosure\")).style (\"display\" , null);\n       \n        }\n      } catch (err) {\n        console.log (err);\n      }\n\n      self._aux_populate_category_menus = function ()  {\n       if (button_bar_ui) {\n        // decide if the variable can be considered categorical by examining its range\n\n        //console.log (\"self._aux_populate_category_menus\");\n        var valid_cats = _.filter(\n          _.map(graph_data[_networkGraphAttrbuteID], self._aux_populate_category_fields),\n          function(d) {\n            //console.log (d);\n            return (\n              d.discrete && \"value_range\" in d &&\n              d[\"value_range\"].length <= _maximumValuesInCategories\n            );\n          }\n        );\n        \n\n        var valid_shapes = _.filter(valid_cats, function(d) {\n          return (\n            d.discrete && d.dimension <= 7 ||\n            d[\"raw_attribute_key\"] in _networkPresetShapeSchemes\n          );\n        });\n\n        // sort values alphabetically for consistent coloring\n\n        _.each([valid_cats, valid_shapes], function(list) {\n          _.each(list, self._aux_process_category_values)});\n\n        var valid_scales = _.filter(\n          _.map(graph_data[_networkGraphAttrbuteID], function(d, k) {\n            function determine_scaling(d, values, scales) {\n              var low_var = Infinity;\n\n              _.each(scales, function(scl) {\n                d[\"value_range\"] = d3.extent(values);\n                var bins = _.map(\n                  _.range(_networkContinuousColorStops),\n                  function() {\n                    return 0;\n                  }\n                );\n                scl\n                  .range([0, _networkContinuousColorStops - 1])\n                  .domain(d[\"value_range\"]);\n                _.each(values, function(v) {\n                  bins[Math.floor(scl(v))]++;\n                });\n\n                var mean = values.length / _networkContinuousColorStops;\n                var vrnc = _.reduce(bins, function(p, c) {\n                  return p + (c - mean) * (c - mean);\n                });\n\n                //console.log (d['value_range'], bins);\n\n                if (vrnc < low_var) {\n                  low_var = vrnc;\n                  d[\"scale\"] = scl;\n                }\n              });\n            }\n\n            d[\"raw_attribute_key\"] = k;\n            if (d.type == \"Number\") {\n              var values = _.filter(\n                _.map(graph_data.Nodes, function(nd) {\n                  return self.attribute_node_value_by_id(nd, k, true);\n                }),\n                function(v) {\n                  return v != _networkMissing;\n                }\n              );\n               // automatically determine the scale and see what spaces the values most evenly\n              determine_scaling(d, values, [\n                d3.scale.linear(),\n                d3.scale.log(),\n                d3.scale.pow().exponent(1 / 3),\n                d3.scale.pow().exponent(0.25),\n                d3.scale.pow().exponent(0.5),\n                d3.scale.pow().exponent(1 / 8),\n                d3.scale.pow().exponent(1 / 16)\n              ]);\n            } else {\n              if (d.type == \"Date\") {\n                var values = _.filter(\n                  _.map(graph_data.Nodes, function(nd) {\n                    try {\n                      var a_date = self.attribute_node_value_by_id(nd, k);\n                      //console.log (k, a_date);\n                      inject_attribute_node_value_by_id(\n                        nd,\n                        k,\n                        self._parse_dates (a_date)\n                      );\n                    } catch (err) {\n                      inject_attribute_node_value_by_id(nd, k, _networkMissing);\n                    }\n                    return self.attribute_node_value_by_id(nd, k);\n                  }),\n                  function(v) {\n                    return v == _networkMissing ? null : v;\n                  }\n                );\n                // automatically determine the scale and see what spaces the values most evenly\n                if (values.length == 0) {// invalid scale \n                    return {};\n                }\n                determine_scaling(d, values, [d3.time.scale()]);\n              }\n            }\n            return d;\n          }),\n          function(d) {\n            return d.type == \"Number\" || d.type == \"Date\";\n          }\n        );\n\n        function _menu_label_gen (d) {\n            return (d[\"annotation\"] ? \"[\" + d[\"annotation\"] + \"] \": \"\") + d[\"label\"];\n        }\n\n        //console.log (valid_scales);\n        //valid_cats.splice (0,0, {'label' : 'None', 'index' : -1});\n\n        [\n          d3.select(self.get_ui_element_selector_by_role (\"attributes\")),\n          d3.select(self.get_ui_element_selector_by_role (\"attributes_cat\", true))\n        ].forEach(function(m) {\n        \n            \n          //console.log (m);  \n        \n          if (m.empty ()) {\n            return;\n          }\n          m.selectAll(\"li\").remove();\n\n          var menu_items = [\n            [[\"None\", null, _.partial(self.handle_attribute_categorical, null)]],\n            [[\"Categorical\", \"heading\", null]]\n          ].concat(\n            valid_cats.map(function(d, i) {\n              return [\n                [\n                  _menu_label_gen(d),\n                  d[\"raw_attribute_key\"],\n                  _.partial(\n                    self.handle_attribute_categorical,\n                    d[\"raw_attribute_key\"]\n                  )\n                ]\n              ];\n            })\n          );\n\n          if (valid_scales.length) {\n            menu_items = menu_items\n              .concat([[[\"Continuous\", \"heading\", null]]])\n              .concat(\n                valid_scales.map(function(d, i) {\n                  return [\n                    [\n                      _menu_label_gen(d),\n                      d[\"raw_attribute_key\"],\n                      _.partial(\n                        self.handle_attribute_continuous,\n                        d[\"raw_attribute_key\"]\n                      )\n                    ]\n                  ];\n                })\n              );\n          }\n\n          var cat_menu = m.selectAll(\"li\").data(menu_items);\n\n          cat_menu\n            .enter()\n            .append(\"li\")\n            .classed(\"disabled\", function(d) {\n              return d[0][1] == \"heading\";\n            })\n            .style(\"font-variant\", function(d) {\n              return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n            });\n\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (d[1] == \"heading\") return \"font-style: italic\";\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n\n        [d3.select(self.get_ui_element_selector_by_role (\"shapes\"))].forEach(function(m) {\n          m.selectAll(\"li\").remove();\n          var cat_menu = m.selectAll(\"li\").data(\n            [\n              [[\"None\", null, _.partial(self.handle_shape_categorical, null)]]\n            ].concat(\n              valid_shapes.map(function(d, i) {\n                return [\n                  [\n                    _menu_label_gen(d),\n                    d[\"raw_attribute_key\"],\n                    _.partial(self.handle_shape_categorical, d[\"raw_attribute_key\"])\n                  ]\n                ];\n              })\n            )\n          );\n\n          cat_menu.enter().append(\"li\").style(\"font-variant\", function(d) {\n            return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n          });\n\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n\n        $(self.get_ui_element_selector_by_role (\"opacity_invert\")).on(\"click\", function(e) {\n          if (self.colorizer[\"opacity_scale\"]) {\n            self.colorizer[\"opacity_scale\"].range(\n              self.colorizer[\"opacity_scale\"].range().reverse()\n            );\n            self.update(true);\n            self.draw_attribute_labels();\n          }\n          $(this).toggleClass(\"btn-active btn-default\");\n        });\n\n        $(self.get_ui_element_selector_by_role (\"attributes_invert\")).on(\"click\", function(e) {\n          if (self.colorizer[\"category_id\"]) {\n            graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n              \"scale\"\n            ].range(\n              graph_data[_networkGraphAttrbuteID][\n                self.colorizer[\"category_id\"]\n              ][\"scale\"]\n                .range()\n                .reverse()\n            );\n            self.clusters.forEach(function(the_cluster) {\n              the_cluster[\"gradient\"] = compute_cluster_gradient(\n                the_cluster,\n                self.colorizer[\"category_id\"]\n              );\n            });\n            self.update(true);\n            self.draw_attribute_labels();\n          }\n          $(this).toggleClass(\"btn-active btn-default\");\n        });\n\n        [d3.select(self.get_ui_element_selector_by_role (\"opacity\"))].forEach(function(m) {\n          m.selectAll(\"li\").remove();\n          var cat_menu = m.selectAll(\"li\").data(\n            [\n              [[\"None\", null, _.partial(self.handle_attribute_opacity, null)]]\n            ].concat(\n              valid_scales.map(function(d, i) {\n                return [\n                  [\n                    d[\"label\"],\n                    d[\"raw_attribute_key\"],\n                    _.partial(self.handle_attribute_opacity, d[\"raw_attribute_key\"])\n                  ]\n                ];\n              })\n            )\n          );\n\n          cat_menu.enter().append(\"li\").style(\"font-variant\", function(d) {\n            return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n          });\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n      }\n     };\n\n    if (attributes) {\n      /*\n         map attributes into nodes and into the graph object itself using\n         _networkGraphAttrbuteID as the key\n      */\n\n      if (\"attribute_map\" in attributes) {\n        var attribute_map = attributes[\"attribute_map\"];\n\n        if (\"map\" in attribute_map && attribute_map[\"map\"].length > 0) {\n          graph_data[_networkGraphAttrbuteID] = attribute_map[\n            \"map\"\n          ].map(function(a, i) {\n            return {\n              label: a,\n              type: null,\n              values: {},\n              index: i,\n              range: 0\n            };\n          });\n\n          graph_data.Nodes.forEach(function(n) {\n            n[_networkGraphAttrbuteID] = n.id.split(attribute_map[\"delimiter\"]);\n            n[_networkGraphAttrbuteID].forEach(function(v, i) {\n              if (i < graph_data[_networkGraphAttrbuteID].length) {\n                if (!(v in graph_data[_networkGraphAttrbuteID][i][\"values\"])) {\n                  graph_data[_networkGraphAttrbuteID][i][\"values\"][v] =\n                    graph_data[_networkGraphAttrbuteID][i][\"range\"];\n                  graph_data[_networkGraphAttrbuteID][i][\"range\"] += 1;\n                }\n              }\n              //graph_data [_networkGraphAttrbuteID][i][\"values\"][v] = 1 + (graph_data [_networkGraphAttrbuteID][i][\"values\"][v] ? graph_data [_networkGraphAttrbuteID][i][\"values\"][v] : 0);\n            });\n          });\n\n          graph_data[_networkGraphAttrbuteID].forEach(function(d) {\n            if (\n              d[\"range\"] < graph_data.Nodes.length &&\n              d[\"range\"] > 1 &&\n              d[\"range\"] <= 20\n            ) {\n              d[\"type\"] = \"category\";\n            }\n          });\n        }\n      }\n\n      _.each(self._networkPredefinedAttributeTransforms, function(\n        computed,\n        key\n      ) {\n      \n        if (_.isFunction (computed)) {\n            computed = computed (self);\n        }\n      \n        if (\n          !computed[\"depends\"] ||\n          _.has(graph_data[_networkGraphAttrbuteID], computed[\"depends\"])\n        ) {\n          var extension = {};\n          extension[key] = computed;\n          _.extend(graph_data[_networkGraphAttrbuteID], extension);\n          self.inject_attribute_description (key, computed);\n          _.each(graph_data.Nodes, function(node) {\n            inject_attribute_node_value_by_id(node, key, computed[\"map\"](node, self));\n          });\n        }\n      });\n\n      self._aux_populate_category_menus();\n    \n      // populate the UI elements\n    }\n\n    if (self.cluster_sizes.length > max_points_to_render) {\n      var sorted_array = self.cluster_sizes\n        .map(function(d, i) {\n          return [d, i + 1];\n        })\n        .sort(function(a, b) {\n          return a[0] - b[0];\n        });\n\n      for (var k = 0; k < sorted_array.length - max_points_to_render; k++) {\n        self.exclude_cluster_ids[sorted_array[k][1]] = 1;\n      }\n\n      warning_string =\n        \"Excluded \" +\n        (sorted_array.length - max_points_to_render) +\n        \" clusters (maximum size \" +\n        sorted_array[k - 1][0] +\n        \" nodes) because only \" +\n        max_points_to_render +\n        \" objects can be shown at once.\";\n    }\n\n\n    self.edges.forEach(function(e, i) {\n      self.clusters[\n        self.cluster_mapping[self.nodes[e.target].cluster]\n      ].distances.push(e.length);\n    });\n\n    self.clusters.forEach(function(d, i) {\n      d.distances = helpers.describe_vector(d.distances);\n    });\n    //self.clusters\n\n    self.update();\n  }\n\n  function sort_table_toggle_icon(element, value) {\n    if (value) {\n      $(element).data(\"sorted\", value);\n      d3\n        .select(element)\n        .selectAll(\"i\")\n        .classed(\"fa-sort-amount-desc\", value == \"desc\")\n        .classed(\"fa-sort-amount-asc\", value == \"asc\")\n        .classed(\"fa-sort\", value == \"unsorted\");\n    } else {\n      var sorted_state = $(element).data(\"sorted\");\n      sort_table_toggle_icon(element, sorted_state == \"asc\" ? \"desc\" : \"asc\");\n      return sorted_state == \"asc\" ? d3.descending : d3.ascending;\n    }\n  }\n\n  function sort_table_by_column(element, datum) {\n    d3.event.preventDefault();\n    var table_element = $(element).closest(\"table\");\n    if (table_element.length) {\n    \n      var sort_on = parseInt($(element).data(\"column-id\"));\n      var sort_key = datum.sort;\n      var sorted_state = $(element).data(\"sorted\");\n      var sorted_function = sort_table_toggle_icon(element);\n\n      var sort_accessor;\n            \n      if (sort_key) {\n        if (_.isFunction (sort_key)) {\n            sort_accessor = function (x) {\n                return sort_key (x);\n            }\n        } else {\n            sort_accessor = function(x) {\n                var val = x[sort_key];\n                if (_.isFunction (val)) return val();\n                return val;\n              };\n        }\n      } else {\n          sort_accessor = function(x) {\n            return x;\n          };\n       }\n        \n\n      d3\n        .select(table_element[0])\n        .select(\"tbody\")\n        .selectAll(\"tr\")\n        .sort(function(a, b) {\n          return sorted_function(\n            sort_accessor(a[sort_on]),\n            sort_accessor(b[sort_on])\n          );\n        });\n\n      // select all other elements from thead and toggle their icons\n\n      $(table_element)\n        .find(\"thead [data-column-id]\")\n        .filter(function() {\n          return parseInt($(this).data(\"column-id\")) != sort_on;\n        })\n        .each(function() {\n          sort_table_toggle_icon(this, \"unsorted\");\n        });\n    }\n  }\n  \n\n  function format_a_cell(data, index, item) {\n    var this_sel = d3.select(item);\n    var current_value =\n      typeof data.value === \"function\" ? data.value() : data.value;\n\n    \n    if (\"callback\" in data) {\n      data.callback(item, current_value);\n    } else {\n      var repr = \"format\" in data ? data.format(current_value) : current_value;\n      if (\"html\" in data) this_sel.html(repr);\n      else this_sel.text(repr);\n      if (\"sort\" in data) {\n        var clicker = this_sel\n          .append(\"a\")\n          .property(\"href\", \"#\")\n          .on(\"click\", function(d) {\n            sort_table_by_column(this, d);\n          })\n          .attr(\"data-sorted\", \"unsorted\")\n          .attr(\"data-column-id\", index)\n        clicker\n          .append(\"i\")\n          .classed(\"fa fa-sort\", true)\n          .style(\"margin-left\", \"0.2em\");\n      }\n    }\n    if (\"help\" in data) {\n      this_sel.attr(\"title\", data.help);\n    }\n  }\n\n  function add_a_sortable_table(container, headers, content, overwrite) {\n    var thead = container.selectAll(\"thead\");\n    if (thead.empty() || overwrite) {\n      thead.remove ();\n      thead = container.append(\"thead\");\n      thead\n        .selectAll(\"tr\")\n        .data(headers)\n        .enter()\n        .append(\"tr\")\n        .selectAll(\"th\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"th\")\n        .call(function(selection) {\n          return selection.each(function(d, i) {\n            format_a_cell(d, i, this);\n          });\n        });\n    }\n\n    var tbody = container.selectAll(\"tbody\");\n    if (tbody.empty() || overwrite) {\n      tbody.remove();\n      tbody = container.append(\"tbody\");\n      tbody\n        .selectAll(\"tr\")\n        .data(content)\n        .enter()\n        .append(\"tr\")\n        .selectAll(\"td\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"td\")\n        .call(function(selection) {\n          return selection.each(function(d, i) {\n            handle_cluster_click;\n            format_a_cell(d, i, this);\n          });\n        });\n    }\n  }\n\n  function _cluster_table_draw_id(element, payload) {\n    var this_cell = d3.select(element);\n    this_cell.selectAll(\"*\").remove();\n    var _is_subcluster = payload[1];\n    var cluster_id = payload[0];\n    \n    if (_is_subcluster) {\n        //this_cell.append(\"i\")\n        //      .classed(\"fa fa-arrow-circle-o-right\", true).style(\"padding-right\", \"0.25em\");  \n              \n        if (payload[2].rr_count) {\n            this_cell.append(\"i\")\n                 .classed(\"fa fa-exclamation-triangle\", true).attr (\"title\", \"Subcluster has recent/rapid nodes\"); \n        }  \n        this_cell.append(\"span\").text(cluster_id).style(\"padding-right\", \"0.5em\");\n        \n        this_cell\n          .append(\"button\")\n          .classed(\"btn btn-primary btn-xs pull-right\", true)\n          .text(\"View\")\n          .on (\"click\", function (e) {\n            self.view_subcluster (payload[2]);\n          });\n\n    } else {\n        this_cell.append(\"span\").text(cluster_id).style(\"padding-right\", \"0.5em\");\n        this_cell\n          .append(\"button\")\n          .classed(\"btn btn-primary btn-xs pull-right\", true)\n          .text(\"View\")\n          .on (\"click\", function (e) {\n            self.open_exclusive_tab_view (cluster_id);\n          });\n    }\n    this_cell\n      .append(\"button\")\n      .classed(\"btn btn-xs pull-right\", true)\n      .text(\"List\")\n      .attr(\"data-toggle\", \"modal\")\n      .attr(\"data-target\", self.get_ui_element_selector_by_role (\"cluster_list\", true))\n      .attr(\"data-cluster\", cluster_id);    \n  }\n\n  function _cluster_table_draw_buttons(element, payload) {\n    var this_cell = d3.select(element);\n    var labels = [[payload[0] ? \"expand\" : \"collapse\", 0]];\n    if (payload[1]) {\n      labels.push([\"problematic\", 1]);\n    }\n    if (payload[2]) {\n      labels.push([\"match\", 1]);\n    }\n    var buttons = this_cell.selectAll(\"button\").data(labels);\n    buttons.enter().append(\"button\");\n    buttons.exit().remove();\n    buttons\n      .classed(\"btn btn-primary btn-xs\", true)\n      .text(function(d) {\n        return d[0];\n      })\n      .attr(\"disabled\", function(d) {\n        return d[1] ? \"disabled\" : null;\n      })\n      .on(\"click\", function(d) {\n        if (d[1] == 0) {\n          if (payload[0]) {\n            expand_cluster(\n              self.clusters[payload[payload.length - 1] - 1],\n              true\n            );\n          } else {\n            collapse_cluster(self.clusters[payload[payload.length - 1] - 1]);\n          }\n          self.update_volatile_elements (self.cluster_table);\n          if (self.subcluster_table) {\n            self.update_volatile_elements (self.subcluster_table);\n          }\n        }\n      });\n  }\n  \n  function _extract_single_cluster (nodes, filter, no_clone, given_json) {\n    /** \n        Extract the nodes and edges between them into a separate objects \n        @param nodes [array]  the list of nodes to extract\n        @param filter [function, optional] (edge) -> bool filtering function for deciding which edges will be used to define clusters\n        @param no_clone [bool] if set to T, node objects are not shallow cloned in the return object\n        \n        @return [dict] the object representing \"Nodes\" and \"Edges\" in the extracted cluster\n        \n    */\n    \n    var cluster_json = {};\n    var map_to_id    = {};\n        \n    cluster_json.Nodes = _.map (nodes, function (c, i) {\n        map_to_id [c.id] = i; \n        if (no_clone) {\n            return c;\n        }\n        var cc = _.clone (c);\n        cc.cluster = 1;\n        return cc;\n    });\n    \n    given_json = given_json || json;\n    \n    cluster_json.Edges = _.filter (given_json.Edges, function (e) {\n        return given_json.Nodes[e.source].id in map_to_id && given_json.Nodes[e.target].id in map_to_id;\n    });\n    \n    if (filter) {\n        cluster_json.Edges = _.filter (cluster_json.Edges, filter);\n    }\n    \n    cluster_json.Edges = _.map (cluster_json.Edges, function (e) {\n        var ne = _.clone (e);\n        ne.source = map_to_id[given_json.Nodes[e.source].id];\n        ne.target = map_to_id[given_json.Nodes[e.target].id];\n        return ne;\n    });  \n    \n    return cluster_json;\n   }\n\n  function _node_table_draw_buttons(element, payload) {\n    var this_cell = d3.select(element);\n\tvar labels = [\n      payload.length == 1\n        ? (_.isString (payload[0]) ? [ payload[0],1,\"btn-warning\"] : [\"can't be shown\", 1 ])\n        : [payload[0] ? \"hide\" : \"show\", 0]\n\t];\n\t\n\tif (payload.length == 2 && payload[1] >= 1) {\n\t    labels.push ([\"View cluster\", function () {self.open_exclusive_tab_view (payload[1])}]);\n\t}\n\t\n    var buttons = this_cell.selectAll(\"button\").data(labels);\n    buttons.enter().append(\"button\");\n    buttons.exit().remove();\n    buttons\n      .classed(\"btn btn-xs btn-node-property\", true)\n      .classed(\"btn-primary\", true)\n      //.classed(function (d) {return d.length >=3 ? d[2] : \"\";}, function (d) {return d.length >= 3;})\n      .text(function(d) {\n        return d[0];\n      })\n      .attr(\"disabled\", function(d) {\n        return d[1] && !_.isFunction (d[1]) ? \"disabled\" : null;\n      })\n      .on(\"click\", function(d) {\n        if (_.isFunction (d[1])) {\n            d[1].call (d);\n        } else {\n            if (d[1] == 0) {\n              if (payload[0]) {\n                collapse_cluster(\n                  self.clusters[payload[payload.length - 1] - 1],\n                  true\n                );\n              } else {\n                expand_cluster(self.clusters[payload[payload.length - 1] - 1]);\n              }\n              //format_a_cell(d3.select(element).datum(), null, element);\n              self.update_volatile_elements (self.node_table);\n            }\n        }\n    \n      });\n      buttons.each (function (d,e) {\n        if (d.length >= 3 ) {\n            d3.select (this).classed (\"btn-primary\", false).classed (d[2], true);\n        }\n      });\n  }\n\n  self.update_volatile_elements = function(container) {\n    container\n      .selectAll(\"td\")\n      .filter(function(d, i) {\n        return \"volatile\" in d;\n      })\n      .each(function(d, i) {\n        format_a_cell(d, i, this);\n      });\n  };\n\n  self.draw_node_table = function (extra_columns, node_list) {\n    if (self.node_table) {\n    \n     node_list = node_list || self.nodes;\n    \n     var headers = [\n          [\n            {\n              value: \"ID\",\n              sort: \"value\",\n              help: \"Node ID\"\n            },\n            {\n              value: \"Status\",\n              sort: \"value\"\n            },\n            {\n              value: \"# of links\",\n              sort: \"value\",\n              help: \"Number of links (Node degree)\"\n            },\n            {\n              value: \"Cluster\",\n              sort: \"value\",\n              help: \"Which cluster does the node belong to\"\n            }\n          ]\n        ];\n\n      if (extra_columns) {\n        _.each (extra_columns, function (d) {\n            headers[0].push (d.description);\n        });\n      }\n    \n      var rows =         node_list.map(function(n, i) {\n          var this_row = [\n            {\n              value: n.id,\n              help: \"Node ID\"\n            },\n            {\n              value: function() {\n                if (n.node_class != \"injected\") {\n                    try {\n                      if (self.exclude_cluster_ids[n.cluster]) {\n                        // parent cluster can't be rendered\n                        // because of size restrictions\n                        return [n.cluster];\n                      }\n                      return [\n                        !self.clusters[self.cluster_mapping[n.cluster]].collapsed,\n                        n.cluster\n                      ];\n                    } catch (err) {\n                        return [-1]\n                    }\n                } else {\n                    return [n.node_annotation];\n                }\n              },\n              callback: _node_table_draw_buttons,\n              volatile: true\n            },\n            {\n              value: (\"degree\" in n ? n.degree : \"Not defined\"),\n              help: \"Node degree\"\n            },\n            {\n              value: (\"cluster\" in n ? n.cluster : \"Not defined\"),\n              help: \"Which cluster does the node belong to\"\n            }\n          ];\n          \n           if (extra_columns) {\n            _.each (extra_columns, function (ed) {\n                this_row.push (ed.generator (n, self));\n            });\n          }\n          return this_row;\n\n        });\n      \n      add_a_sortable_table(\n        self.node_table,\n        headers,\n        rows,\n        true\n        // rows\n      );\n    }\n  }\n\n  self.draw_cluster_table = function (extra_columns, element, skip_clusters, skip_subclusters) {\n    element = element || self.cluster_table;\n    if (element) {\n    \n      var headers = [\n          [\n            {\n              value: \"Cluster ID\",\n              sort: function (c) {return _.map (c.value[0].split ('.'), function (ss) {return _networkDotFormatPadder(+ss)}).join (\"|\");},\n              help: \"Unique cluster ID\"\n            },\n            {\n              value: \"Visibility\",\n              sort: \"value\",\n              help: \"Visibility in the network tab\"\n            },\n            {\n              value: \"Size\",\n              sort: \"value\",\n              help: \"Number of nodes in the cluster\"\n            }\n            \n          ]\n        ];\n        \n     if (!self._is_CDC) {\n        headers.push ({\n              value: \"# links/node<br>Mean [Median, IQR]\",\n              html: true\n            });\n            \n        headers.push ({\n              value: \"Genetic distance<br>Mean [Median, IQR]\",\n              help: \"Genetic distance among nodes in the cluster\",\n              html: true\n            });\n     }\n        \n      if (extra_columns) {\n        _.each (extra_columns, function (d) {\n            headers[0].push (d.description);\n        });\n      }\n      \n      var rows = [];\n      \n      _.each (self.clusters, function (cluster) {\n            var make_row = function (d, is_subcluster) {\n                    var this_row = [\n                    {\n                      value: [d.cluster_id, is_subcluster,d],//.cluster_id,\n                      callback: _cluster_table_draw_id\n                    },\n                    {\n                      value: function() {\n                        var actual_cluster = is_subcluster ? d.parent_cluster : d;\n                      \n                        return [\n                          actual_cluster.collapsed,\n                          actual_cluster.hxb2_linked,\n                          actual_cluster.match_filter,\n                          actual_cluster.cluster_id\n                        ];\n                      },\n                      callback: _cluster_table_draw_buttons,\n                      volatile: true\n                    },\n                    {\n                      value: d.children.length\n                    }\n                  ];\n                  \n                 if (!self._is_CDC_)  {\n                    this_row.push ({\n                      value: d.degrees,\n                      format: function(d) {\n                        try {\n                            return (\n                              _defaultFloatFormat(d[\"mean\"]) +\n                              \" [\" +\n                              _defaultFloatFormat(d[\"median\"]) +\n                              \", \" +\n                              _defaultFloatFormat(d[\"Q1\"]) +\n                              \" - \" +\n                              _defaultFloatFormat(d[\"Q3\"]) +\n                              \"]\"\n                            );\n                        } catch (e) {\n                            return \"\";\n                        }\n                      }\n                    });\n                    this_row.push ({\n                      value: d.distances,\n                      format: function(d) {\n                        try {\n                            return (\n                              _defaultFloatFormat(d[\"mean\"]) +\n                              \" [\" +\n                              _defaultFloatFormat(d[\"median\"]) +\n                              \", \" +\n                              _defaultFloatFormat(d[\"Q1\"]) +\n                              \" - \" +\n                              _defaultFloatFormat(d[\"Q3\"]) +\n                              \"]\"\n                            );\n                        } catch (e) {\n                            return \"\";\n                        }\n                      }\n                    });\n                    \n                 }    \n                  if (extra_columns) {\n                    _.each (extra_columns, function (ed) {\n                        this_row.push (ed.generator (d, self));\n                    });\n                  }  \n                  \n                  return this_row;          \n            };\n          \n          if (!skip_clusters) {\n            rows.push (make_row (cluster, false));\n          }\n          \n          if (!skip_subclusters) {\n              _.each (cluster.subclusters, function (sub_cluster) {\n                rows.push (make_row (sub_cluster, true));\n              });\n          }\n      });\n      \n    \n      add_a_sortable_table(\n        element,\n        headers,\n        rows,\n        true);\n    }\n  }\n\n  /*------------ Update layout code ---------------*/\n  function update_network_string(node_count, edge_count) {\n    if (network_status_string) {\n      var clusters_shown = _.filter(self.clusters, function(c) {\n          return !c.collapsed;\n        }).length,\n        clusters_removed = self.cluster_sizes.length - self.clusters.length,\n        nodes_removed =\n          graph_data.Nodes.length - singletons - self.nodes.length;\n          \n    var clusters_selected = _.filter(self.clusters, function(c) {\n          return !c.is_hidden && c.match_filter !== undefined && c.match_filter > 0;\n        }).length;\n        \n\n    \n    var nodes_selected = _.filter(self.nodes, function(n) {\n          return n.match_filter && ! n.is_hidden;\n        }).length;\n    \n    \n      /*var s = \"Displaying a network on <strong>\" + self.nodes.length + \"</strong> nodes, <strong>\" + self.clusters.length + \"</strong> clusters\"\n              + (clusters_removed > 0 ? \" (an additional \" + clusters_removed + \" clusters and \" + nodes_removed + \" nodes have been removed due to network size constraints)\" : \"\") + \". <strong>\"\n              + clusters_shown +\"</strong> clusters are expanded. Of <strong>\" + self.edges.length + \"</strong> edges, <strong>\" + draw_me.edges.length + \"</strong>, and of  <strong>\" + self.nodes.length  + \" </strong> nodes,  <strong>\" + draw_me.nodes.length + \" </strong> are displayed. \";\n      if (singletons > 0) {\n          s += \"<strong>\" +singletons + \"</strong> singleton nodes are not shown. \";\n      }*/\n      \n \n      var s =\n        \"<span class = 'badge'>\" +\n        self.clusters.length +\n        \"</span> clusters <span class = 'label label-primary'>\" +\n        clusters_shown +\n        \" expanded / \" + clusters_selected + \" match </span> <span class = 'badge'> \" +\n        self.nodes.length +\n        \"</span> nodes <span class = 'label label-primary'>\" +\n        node_count +\n        \" shown / \" + nodes_selected + \" match </span> <span class = 'badge'> \" +\n        self.edges.length +\n        \"</span> \" +\n        (self._is_CDC_ ? \"links\" : \"edges\") +\n        \" <span class = 'label label-primary'>\" +\n        edge_count +\n        \" shown</span>\";\n        \n      d3.select(network_status_string).html(s);\n    }\n  }\n\n  function draw_a_node(container, node) {\n  \n    if (node) {\n        container = d3.select(container);\n\n        var symbol_type =\n          node.hxb2_linked && !node.is_lanl\n            ? \"cross\"\n            : node.is_lanl ? \"triangle-down\" : self.node_shaper[\"shaper\"](node);\n\n        node.rendered_size = Math.sqrt(node_size(node)) / 2 + 2;\n\n        container\n          .attr(\"d\", misc.symbol(symbol_type).size(node_size(node)))\n          .attr(\"class\", \"node\")\n          .classed(\"selected_object\", function(d) {\n            return d.match_filter;\n          })\n          .classed(\"injected_object\", function(d) {\n            return d.node_class == \"injected\";\n          })\n          .attr(\"transform\", function(d) {\n            return \"translate(\" + d.x + \",\" + d.y + \")\";\n          })\n          .style(\"fill\", function(d) {\n            return node_color(d);\n          })\n          .style(\"opacity\", function(d) {\n            return node_opacity(d);\n          })\n          .style(\"display\", function(d) {\n            if (d.is_hidden) return \"none\";\n            return null;\n          })\n          .on(\"click\", handle_node_click)\n          .on(\"mouseover\", node_pop_on)\n          .on(\"mouseout\", node_pop_off)\n          .call(network_layout.drag().on(\"dragstart\", node_pop_off))\n          ;   \n        }\n  }\n\n  function draw_a_cluster(container, the_cluster) {\n    var container_group = d3.select(container);\n\n    var draw_from = the_cluster[\"binned_attributes\"]\n      ? the_cluster[\"binned_attributes\"].map(function(d) {\n          return d.concat([0]);\n        })\n      : [[null, 1, 0]];\n\n    if (the_cluster.match_filter) {\n      draw_from = draw_from.concat([\n        [\"selected\", the_cluster.match_filter, 1],\n        [\n          \"not selected\",\n          the_cluster.children.length - the_cluster.match_filter,\n          1\n        ]\n      ]);\n    }\n\n    var sums = [\n      d3.sum(\n        draw_from.filter(function(d) {\n          return d[2] == 0;\n        }),\n        function(d) {\n          return d[1];\n        }\n      ),\n      d3.sum(\n        draw_from.filter(function(d) {\n          return d[2] != 0;\n        }),\n        function(d) {\n          return d[1];\n        }\n      )\n    ];\n\n    var running_totals = [0, 0];\n\n    draw_from = draw_from.map(function(d) {\n      var index = d[2];\n      var v = {\n        container: container,\n        cluster: the_cluster,\n        startAngle: running_totals[index] / sums[index] * 2 * Math.PI,\n        endAngle: (running_totals[index] + d[1]) / sums[index] * 2 * Math.PI,\n        name: d[0],\n        rim: index > 0\n      };\n      running_totals[index] += d[1];\n      return v;\n    });\n\n    var arc_radius = cluster_box_size(the_cluster) * 0.5;\n    the_cluster.rendered_size = arc_radius + 2;\n    var paths = container_group.selectAll(\"path\").data(draw_from);\n    paths.enter().append(\"path\");\n    paths.exit().remove();\n\n    paths\n      .classed(\"cluster\", true)\n      .classed(\"hiv-trace-problematic\", function(d) {\n        return the_cluster.hxb2_linked && !d.rim;\n      })\n      .classed(\"hiv-trace-selected\", function(d) {\n        return d.rim;\n      })\n      .attr(\"d\", function(d) {\n        return (d.rim\n          ? d3.svg.arc().innerRadius(arc_radius + 2).outerRadius(arc_radius + 5)\n          : d3.svg.arc().innerRadius(0).outerRadius(arc_radius))(d);\n      })\n      .style(\"fill\", function(d, i) {\n        return d.rim\n          ? self.colorizer[\"selected\"](d.name)\n          : the_cluster[\"gradient\"]\n            ? \"url(#\" + the_cluster[\"gradient\"] + \")\"\n            : cluster_color(the_cluster, d.name);\n      })\n      .style(\"stroke-linejoin\", function(d, i) {\n        return draw_from.length > 1 ? \"round\" : \"\";\n      })\n      .style(\"display\", function(d) {\n        if (the_cluster.is_hidden) return \"none\";\n        return null;\n      });\n  }\n\n  function check_for_predefined_shapes(cat_id) {\n    //console.log (cat_id);\n\n    if (cat_id in _networkPresetShapeSchemes) {\n      var domain = _.range(\n        0,\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_range\"].length\n      );\n\n      return {\n        domain: domain,\n        range: _.map(domain, function(v) {\n          return _networkPresetShapeSchemes[\n            cat_id\n          ][graph_data[_networkGraphAttrbuteID][cat_id][\"value_range\"][v]];\n        })\n      };\n    } else {\n      return {\n        domain: _.range(\n          0,\n          graph_data[_networkGraphAttrbuteID][cat_id].dimension\n        ),\n        range: _networkShapeOrdering\n      };\n    }\n  }\n\n  self.handle_shape_categorical = function (cat_id) {\n    var set_attr = \"None\";\n\n    [\"shapes\"].forEach(function(lbl) {\n      d3.select(self.get_ui_element_selector_by_role (lbl)).selectAll(\"li\").selectAll(\"a\").attr(\"style\", function(d, i) {\n        if (d[1] == cat_id) {\n          set_attr = d[0];\n          return \" font-weight: bold;\";\n        }\n        return null;\n      });\n      d3\n        .select(self.get_ui_element_selector_by_role (lbl + \"_label\"))\n        .html(\"Shape: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    if (cat_id) {\n      var domain_range = check_for_predefined_shapes(cat_id);\n\n      var shape_mapper = d3.scale\n        .ordinal()\n        .domain(domain_range[\"domain\"])\n        .range(domain_range[\"range\"]);\n      self.node_shaper[\"id\"] = cat_id;\n      self.node_shaper[\"shaper\"] = function(d) {\n        return shape_mapper(\n          graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"](\n            self.attribute_node_value_by_id(d, cat_id)\n          )\n        );\n      };\n      self.node_shaper[\"category_map\"] =\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"];\n    } else {\n      self.node_shaper.id = null;\n      self.node_shaper.shaper = function() {\n        return \"circle\";\n      };\n      self.node_shaper[\"category_map\"] = null;\n    }\n    //console.log (graph_data [_networkGraphAttrbuteID][cat_id]['value_map'], self.node_shaper.domain(), self.node_shaper.range());\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n  self.draw_attribute_labels = function () {\n  \n    self.legend_svg.selectAll(\"g.hiv-trace-legend\").remove();\n    \n    var offset = 10;\n    \n    if (self.legend_caption) {\n        self.legend_svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .classed(\"hiv-trace-legend\", true)\n            .append(\"text\")\n            .text(self.legend_caption)\n            .style(\"font-weight\", \"bold\");\n        offset += 18;\n    }\n    \n    if (self.edge_legend) {\n        self.legend_svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .classed(\"hiv-trace-legend\", true)\n            .append(\"text\")\n            .text(self.edge_legend[\"caption\"])\n            .style(\"font-weight\", \"bold\");\n        offset += 18;\n\n        _.each(self.edge_legend[\"types\"], function(\n          value,\n          key\n        ) {\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(key);\n            \n          value.call (self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"line\")\n            .attr(\"x1\", \"0\")\n            .attr(\"y1\", \"-4\")\n            .attr(\"x2\", \"12\")\n            .attr(\"y2\", \"-4\")\n            .classed(\"legend\", true));\n\n          offset += 18;\n        });    \n    }\n    \n\n    if (self.colorizer[\"category_id\"]) {\n    \n        //console.log (self.colorizer);\n        //_.each (self.colorizer[\"category_map\"](null, \"map\"), function (v){ console.log (v); });\n\n\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Color: \" + self.colorizer[\"category_id\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      if (self.colorizer[\"continuous\"]) {\n        var anchor_format =\n          graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n            \"type\"\n          ] == \"Date\"\n            ? _defaultDateViewFormatShort\n            : d3.format(\",.4r\");\n        var scale =\n          graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n            \"scale\"\n          ];\n\n        _.each(_.range(_networkContinuousColorStops), function(value) {\n          var x = scale.invert(value);\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(anchor_format(x));\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"circle\")\n            .attr(\"cx\", \"8\")\n            .attr(\"cy\", \"-4\")\n            .attr(\"r\", \"8\")\n            .classed(\"legend\", true)\n            .style(\"fill\", self.colorizer[\"category\"](x));\n\n          offset += 18;\n        });\n\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(\"missing\");\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"circle\")\n          .attr(\"cx\", \"8\")\n          .attr(\"cy\", \"-4\")\n          .attr(\"r\", \"8\")\n          .classed(\"legend\", true)\n          .style(\"fill\", _networkMissingColor);\n\n        offset += 18;\n      } else {\n        _.each(self.colorizer[\"category_map\"](null, \"map\"), function(\n          value,\n          key\n        ) {\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(key);\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"circle\")\n            .attr(\"cx\", \"8\")\n            .attr(\"cy\", \"-4\")\n            .attr(\"r\", \"8\")\n            .classed(\"legend\", true)\n            .style(\"fill\", self.colorizer[\"category\"](key));\n\n          offset += 18;\n        });\n      }\n    }\n\n    if (self.node_shaper[\"id\"]) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Shape: \" + self.node_shaper[\"id\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      var domain_range = check_for_predefined_shapes(self.node_shaper[\"id\"]);\n      var shape_mapper = d3.scale\n        .ordinal()\n        .domain(domain_range[\"domain\"])\n        .range(domain_range[\"range\"]);\n\n      _.each(self.node_shaper[\"category_map\"](null, \"map\"), function(\n        value,\n        key\n      ) {\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(key);\n\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"path\")\n          .attr(\"transform\", \"translate(5,-5)\")\n          .attr(\"d\", misc.symbol(shape_mapper(value)).size(128))\n          .classed(\"legend\", true)\n          .style(\"fill\", \"none\");\n\n        offset += 18;\n      });\n    }\n\n    if (self.colorizer[\"opacity_id\"]) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Opacity: \" + self.colorizer[\"opacity_id\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      var anchor_format =\n        graph_data[_networkGraphAttrbuteID][self.colorizer[\"opacity_id\"]][\n          \"type\"\n        ] == \"Date\"\n          ? _defaultDateViewFormatShort\n          : d3.format(\",.4r\");\n      var scale =\n        graph_data[_networkGraphAttrbuteID][self.colorizer[\"opacity_id\"]][\n          \"scale\"\n        ];\n\n      _.each(_.range(_networkContinuousColorStops), function(value) {\n        var x = scale.invert(value);\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(anchor_format(x));\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"circle\")\n          .attr(\"cx\", \"8\")\n          .attr(\"cy\", \"-4\")\n          .attr(\"r\", \"8\")\n          .classed(\"legend\", true)\n          .style(\"fill\", \"black\")\n          .style(\"opacity\", self.colorizer[\"opacity\"](x));\n\n        offset += 18;\n      });\n\n      self.legend_svg\n        .append(\"g\")\n        .classed(\"hiv-trace-legend\", true)\n        .attr(\"transform\", \"translate(20,\" + offset + \")\")\n        .append(\"text\")\n        .text(\"missing\");\n      self.legend_svg\n        .append(\"g\")\n        .classed(\"hiv-trace-legend\", true)\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .append(\"circle\")\n        .attr(\"cx\", \"8\")\n        .attr(\"cy\", \"-4\")\n        .attr(\"r\", \"8\")\n        .classed(\"legend\", true)\n        .style(\"fill\", \"black\")\n        .style(\"opacity\", _networkMissingOpacity);\n\n      offset += 18;\n    }\n  }\n\n  function compute_cluster_gradient(cluster, cat_id) {\n    if (cat_id) {\n      var id = self.dom_prefix + \"-cluster-gradient-\" + self.gradient_id++;\n      var gradient = self.network_svg\n        .selectAll(\"defs\")\n        .append(\"radialGradient\")\n        .attr(\"id\", id);\n      var values = _.map(cluster.children, function(node) {\n        var value = self.attribute_node_value_by_id(node, cat_id);\n        return value == _networkMissing ? Infinity : value;\n      }).sort(function(a, b) {\n        return 0 + a - (0 + b);\n      });\n      var finite = _.filter(values, function(d) {\n        return d < Infinity;\n      });\n      var infinite = values.length - finite.length;\n\n      if (infinite) {\n        gradient\n          .append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", _networkMissingColor);\n        gradient\n          .append(\"stop\")\n          .attr(\"offset\", \"\" + infinite / values.length * 100 + \"%\")\n          .attr(\"stop-color\", _networkMissingColor);\n      }\n\n      _.each(finite, function(value, index) {\n        gradient\n          .append(\"stop\")\n          .attr(\n            \"offset\",\n            \"\" + (1 + index + infinite) * 100 / values.length + \"%\"\n          )\n          .attr(\"stop-color\", self.colorizer[\"category\"](value));\n      });\n      //gradient.append (\"stop\").attr (\"offset\", \"100%\").attr (\"stop-color\", self.colorizer['category'] (dom[1]));\n\n      return id;\n    }\n    return null;\n  }\n\n  self.handle_attribute_opacity= function (cat_id) {\n    var set_attr = \"None\";\n\n    [\"opacity\"].forEach(function(lbl) {\n      d3.select(self.get_ui_element_selector_by_role (lbl)).selectAll(\"li\").selectAll(\"a\").attr(\"style\", function(d, i) {\n        if (d[1] == cat_id) {\n          set_attr = d[0];\n          return \" font-weight: bold;\";\n        }\n        return null;\n      });\n      d3\n        .select(self.get_ui_element_selector_by_role (lbl+\"_label\"))\n        .html(\"Opacity: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3\n      .select(self.get_ui_element_selector_by_role (\"opacity_invert\"))\n      .style(\"display\", set_attr == \"None\" ? \"none\" : \"inline\")\n      .classed(\"btn-active\", false)\n      .classed(\"btn-default\", true);\n\n    self.colorizer[\"opacity_id\"] = cat_id;\n    if (cat_id) {\n      var scale = graph_data[_networkGraphAttrbuteID][cat_id][\"scale\"];\n      self.colorizer[\"opacity_scale\"] = d3.scale\n        .linear()\n        .domain([0, _networkContinuousColorStops - 1])\n        .range([0.25, 1]);\n      self.colorizer[\"opacity\"] = function(v) {\n        if (v == _networkMissing) {\n          return _networkMissingOpacity;\n        }\n        return self.colorizer[\"opacity_scale\"](scale(v));\n      };\n    } else {\n      self.colorizer[\"opacity\"] = null;\n      self.colorizer[\"opacity_scale\"] = null;\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n  self.handle_attribute_continuous = function (cat_id) {\n  \n     var set_attr = \"None\";\n\n    render_chord_diagram(\"aux_svg_holder\", null, null);\n    render_binned_table (\"attribute_table\", null, null);\n\n    self.network_svg.selectAll(\"radialGradient\").remove();\n\n    self.clusters.forEach(function(the_cluster) {\n      delete the_cluster[\"binned_attributes\"];\n      delete the_cluster[\"gradient\"];\n    });\n\n    [\n      [\"attributes\",false],\n      [\"attributes_cat\",true]\n    ].forEach(function(lbl) {\n      d3.select(self.get_ui_element_selector_by_role (lbl[0], lbl[1])).selectAll(\"li\").selectAll(\"a\").attr(\"style\", function(d, i) {\n        if (d[1] == cat_id) {\n          set_attr = d[0];\n          return \" font-weight: bold;\";\n        }\n        return null;\n      });\n      d3.select(self.get_ui_element_selector_by_role (lbl[0] + \"_label\", lbl[1]))\n        .html(\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3\n      .select(self.get_ui_element_selector_by_role (\"attributes_invert\"))\n      .style(\"display\", set_attr == \"None\" ? \"none\" : \"inline\")\n      .classed(\"btn-active\", false)\n      .classed(\"btn-default\", true);\n\n    if (cat_id) {\n      //console.log (graph_data [_networkGraphAttrbuteID][cat_id]);\n\n      self.colorizer[\"category\"] = _.wrap(\n        d3.scale\n          .linear()\n          .range([\n            \"#fff7ec\",\n            \"#fee8c8\",\n            \"#fdd49e\",\n            \"#fdbb84\",\n            \"#fc8d59\",\n            \"#ef6548\",\n            \"#d7301f\",\n            \"#b30000\",\n            \"#7f0000\"\n          ])\n          .domain(_.range(_networkContinuousColorStops)),\n        function(func, arg) {\n          return func(\n            graph_data[_networkGraphAttrbuteID][cat_id][\"scale\"](arg)\n          );\n        }\n      ); //console.log (self.colorizer['category'].exponent ());\n\n      //console.log (self.colorizer['category'] (graph_data [_networkGraphAttrbuteID][cat_id]['value_range'][0]), self.colorizer['category'] (d['value_range'][1]));\n\n      self.colorizer[\"category_id\"] = cat_id;\n      self.colorizer[\"continuous\"] = true;\n      self.clusters.forEach(function(the_cluster) {\n        the_cluster[\"gradient\"] = compute_cluster_gradient(the_cluster, cat_id);\n      });\n\n      var points = [];\n\n      _.each(self.edges, function(e) {\n        var src = self.attribute_node_value_by_id(self.nodes[e.source], cat_id, true),\n          tgt = self.attribute_node_value_by_id(self.nodes[e.target], cat_id, true);\n\n        if (src != _networkMissing && tgt != _networkMissing) {\n          points.push({\n            x: src,\n            y: tgt,\n            title:\n              self.nodes[e.source].id +\n              \" (\" +\n              src +\n              \") -- \" +\n              self.nodes[e.target].id +\n              \" (\" +\n              tgt +\n              \")\"\n          });\n        }\n      });\n      d3\n        .select(self.get_ui_element_selector_by_role (\"aux_svg_holder_enclosed\", true))\n        .style(\"display\", null);\n\n\n      scatterPlot.scatterPlot(\n        points,\n        400,\n        400,\n        self.get_ui_element_selector_by_role (\"aux_svg_holder\", true),\n        {\n          x: \"Source\",\n          y: \"Target\"\n        },\n        graph_data[_networkGraphAttrbuteID][cat_id][\"type\"] == \"Date\"\n      );\n    } else {\n      self.colorizer[\"category\"] = null;\n      self.colorizer[\"category_id\"] = null;\n      self.colorizer[\"continuous\"] = false;\n      self.colorizer[\"category_pairwise\"] = null;\n      self.colorizer[\"category_map\"] = null;\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n\n  self.handle_attribute_categorical = function (cat_id) {\n                \n    var set_attr = \"None\";\n    d3\n      .select(self.get_ui_element_selector_by_role (\"attributes_invert\"))\n      .style(\"display\", \"none\");\n\n    self.network_svg.selectAll(\"radialGradient\").remove();\n\n    [\n      [\"attributes\",false],\n      [\"attributes_cat\",true]\n    ].forEach(function(lbl) {\n      \n      d3.select(self.get_ui_element_selector_by_role (lbl[0], lbl[1])).selectAll(\"li\").selectAll(\"a\").attr(\"style\", function(d, i) {\n        if (d[1] == cat_id) {\n          set_attr = d[0];\n          return \" font-weight: bold;\";\n        }\n        return null;\n      });\n      d3\n        .select(self.get_ui_element_selector_by_role (lbl[0] + \"_label\", lbl[1]))\n        .html(\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    self.clusters.forEach(function(the_cluster) {\n      delete the_cluster[\"gradient\"];\n      the_cluster[\"binned_attributes\"] = stratify(\n        attribute_cluster_distribution(the_cluster, cat_id)\n      );\n    });\n    \n    self.colorizer[\"continuous\"] = false;\n\n    if (cat_id) {\n    \n      if (cat_id in _networkPresetColorSchemes) {\n        var domain = [],\n          range = [];\n        _.each(_networkPresetColorSchemes[cat_id], function(value, key) {\n          domain.push(key);\n          range.push(value);\n        });\n        self.colorizer[\"category\"] = d3.scale\n          .ordinal()\n          .domain(domain)\n          .range(range);\n      } else {\n        if (graph_data[_networkGraphAttrbuteID][cat_id][\"color_scale\"]) {\n          self.colorizer[\"category\"] = graph_data[_networkGraphAttrbuteID][\n            cat_id\n          ][\"color_scale\"](graph_data[_networkGraphAttrbuteID][cat_id], self);\n        } else {\n          self.colorizer[\"category\"] = d3.scale\n            .ordinal()\n            .range(_networkCategorical);\n          var extended_range = _.clone(self.colorizer[\"category\"].range());\n          extended_range.push(_networkMissingColor);\n\n          self.colorizer[\"category\"].domain(\n            _.range(_maximumValuesInCategories + 1)\n          );\n          self.colorizer[\"category\"].range(extended_range);\n\n          if (graph_data[_networkGraphAttrbuteID][cat_id][\"stable-ish order\"]) {\n            self.colorizer[\"category\"] = _.wrap(\n              self.colorizer[\"category\"],\n              function(func, arg) {\n                if (arg == _networkMissing) {\n                  return func(_maximumValuesInCategories);\n                }\n                return func(\n                  graph_data[_networkGraphAttrbuteID][cat_id][\n                    \"stable-ish order\"\n                  ][arg]\n                );\n              }\n            );\n            //console.log (graph_data[_networkGraphAttrbuteID][cat_id]['stable-ish order']);\n          }\n        }\n      }\n      self.colorizer[\"category_id\"] = cat_id;\n      self.colorizer[\"category_map\"] =\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"];\n        \n      //console.log (cat_id, self.json[_networkGraphAttrbuteID][cat_id], graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"] (null, \"lookup\"));\n      //self.colorizer['category_map'][null] =  graph_data [_networkGraphAttrbuteID][cat_id]['range'];\n      \n      //try {\n          self.colorizer[\"category_pairwise\"] = attribute_pairwise_distribution(\n            cat_id,\n            graph_data[_networkGraphAttrbuteID][cat_id].dimension,\n            self.colorizer[\"category_map\"]\n          );\n      //} catch (err) {\n        // TODO: there are still lingering issues with this \"category_map\"\n      //}\n\n      render_chord_diagram(\n        \"aux_svg_holder\",\n        self.colorizer[\"category_map\"],\n        self.colorizer[\"category_pairwise\"]\n      );\n      render_binned_table(\n        \"attribute_table\",\n        self.colorizer[\"category_map\"],\n        self.colorizer[\"category_pairwise\"]\n      );\n    } else {\n      self.colorizer[\"category\"] = null;\n      self.colorizer[\"category_id\"] = null;\n      self.colorizer[\"category_pairwise\"] = null;\n      self.colorizer[\"category_map\"] = null;\n      render_chord_diagram(\"aux_svg_holder\", null, null);\n      render_binned_table(\"attribute_table\", null, null);\n    }\n    if (self.handle_inline_charts) {\n        self.handle_inline_charts();\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n  self.filter_visibility = function() {\n    self.clusters.forEach(function(c) {\n      c.is_hidden = self.hide_unselected && !c.match_filter;\n    });\n    self.nodes.forEach(function(n) {\n      n.is_hidden = self.hide_unselected && !n.match_filter;\n    });\n  };\n\n  self.filter = function(conditions, skip_update) {\n    var anything_changed = false;\n\n    conditions = _.map([\"re\", \"distance\"], function(cnd) {\n      return _.map(\n        _.filter(conditions, function(v) {\n          return v.type == cnd;\n        }),\n        function(v) {\n          return v.value;\n        }\n      );\n    });\n\n    if (conditions[1].length) {\n      self.nodes.forEach(function(n) {\n        n.length_filter = false;\n      });\n\n      _.each(self.edges, function(e) {\n        var did_match = _.some(conditions[1], function(d) {\n          return e.length <= d;\n        });\n\n        if (did_match) {\n          self.nodes[e.source].length_filter = true;\n          self.nodes[e.target].length_filter = true;\n        }\n      });\n    } else {\n      self.nodes.forEach(function(n) {\n        n.length_filter = false;\n      });\n    }\n\n    self.clusters.forEach(function(c) {\n       c.match_filter = 0;\n    });\n\n    self.nodes.forEach(function(n) {\n      var did_match = _.some(conditions[0], function(regexp) {\n        return (\n          regexp.test(n.id) ||\n          _.some(n[_networkNodeAttributeID], function(attr) {\n            return regexp.test(attr);\n          })\n        );\n      });\n\n      did_match = did_match || n.length_filter;\n      \n      if (did_match != n.match_filter) {\n        n.match_filter = did_match;\n        anything_changed = true;\n      }\n\n      if (n.match_filter) {\n        n.parent.match_filter += 1;\n      }\n    });\n\n    if (anything_changed && !skip_update) {\n      if (self.hide_unselected) {\n        self.filter_visibility();\n      }\n\n      self.update(true);\n    }\n  };\n\n  self.is_empty = function() {\n    return self.cluster_sizes.length == 0;\n  };\n  \n  self.display_warning = function (warning_string, is_html) {\n    if (network_warning_tag) {\n      if (warning_string.length) {\n        var warning_box = d3.select(network_warning_tag);\n          warning_box.selectAll (\"div\").remove();\n          if (is_html) {\n            warning_box.append (\"div\").html(warning_string);\n          } else {          \n            warning_box.append (\"div\").text(warning_string);\n          }\n          warning_box.style(\"display\", \"block\");\n        warning_string = \"\";\n      } else {\n        d3.select(network_warning_tag).style(\"display\", \"none\");\n      }\n    }\n  };\n  \n  self.link_generator_function = function (d) {\n    \n        var pull      = d.pull || 0.0;\n        var path;\n        \n        if (pull != 0.0) {\n            var dist_x = d.target.x - d.source.x;\n            var dist_y = d.target.y - d.source.y;\n            var pull   = pull * (Math.sqrt (dist_x * dist_x + dist_y * dist_y));\n        \n        \n            var theta = Math.PI / 6; // 18deg additive angle\n        \n            var alpha = dist_x ? Math.atan (-dist_y / dist_x) : Math.PI/2; // angle with the X axis\n        \n            if (pull < 0) {\n                theta = -theta;\n                pull = -pull;\n            }\n\n      \n            var dx  = Math.cos (theta+alpha) * pull,\n                dx2 = Math.cos (theta-alpha) * pull;\n            \n            var dy  = Math.sin (theta+alpha) * pull,\n                dy2 = Math.sin (theta-alpha) * pull;\n                \n            var s1, s2;\n            if (d.target.x >= d.source.x) {\n                s1 = [dx, -dy];\n                s2 = [-dx2, -dy2];        \n            } else {\n                s1 = [-dx2, -dy2];\n                s2 = [dx, -dy];        \n            }\n\n       \n            path =  \"M\" + d.source.x + \" \" + d.source.y +\n                \" C \" + (d.source.x+s1[0]) + \" \" + (d.source.y+s1[1]) + \n                \", \"  + (d.target.x+s2[0]) + \" \" + (d.target.y+s2[1]) +\n                \", \" + d.target.x + \" \" + d.target.y;\n              \n        } else {\n            path  = \"M\" + d.source.x + \" \" + d.source.y +\n                \" L \" + d.target.x + \" \" + d.target.y;\n        }\n        \n         d3.select (this).attr (\"d\",     \n            path\n         );\n   }\n\n  self.update = function(soft, friction) {\n    self.needs_an_update = false;\n\n    if (friction) {\n      network_layout.friction(friction);\n    }\n    self.display_warning (warning_string);\n    \n\n    var rendered_nodes, rendered_clusters, link;\n\n    if (!soft) {\n      var draw_me = prepare_data_to_graph();\n\n      network_layout.nodes(draw_me.all).links(draw_me.edges);\n      update_network_string(draw_me.nodes.length, draw_me.edges.length);\n      \n      var edge_set = {\n      \n      };\n      \n      _.each (draw_me.edges, function (d) {\n        d.pull = 0.0;\n        var tag = \"\";\n        \n        if (d.source < d.target) {\n            tag =    \"\"+d.source + \"|\" + d.target;\n        } else {\n            tag =    \"\"+d.target + \"|\" + d.source;\n        }\n        if (tag in edge_set) {\n            edge_set[tag].push (d);\n        } else {\n            edge_set[tag] = [d];\n        }\n      });\n      \n      _.each (edge_set, function (v) {\n        if (v.length > 1) {\n            var step = 1/(v.length - 1);\n            _.each (v, function (edge, index) {\n                edge.pull = -0.5 + index * step;\n            });\n        }\n      });\n\n      link = self.network_svg.selectAll(\".link\").data(draw_me.edges, function(d) {\n        return d.id;\n      });\n      \n\n      //link.enter().append(\"line\").classed(\"link\", true);\n      link.enter().append(\"path\").classed(\"link\", true);\n      link.exit().remove();\n\n\n      link\n        .classed(\"removed\", function(d) {\n          return d.removed;\n        })\n        .classed(\"unsupported\", function(d) {\n          return \"support\" in d && d[\"support\"] > 0.05;\n        })\n        .classed(\"core-link\", function(d) {\n          //console.log (d[\"length\"] <= self.core_link_length);\n          return d[\"length\"] <= self.core_link_length ;\n          //return false;\n        });\n        \n        \n      link.on(\"mouseover\", edge_pop_on)\n        .on(\"mouseout\", edge_pop_off)\n        .filter(function(d) {\n          return d.directed;\n        })\n        .attr(\"marker-end\", \"url(#\" + self.dom_prefix + \"_arrowhead)\");\n\n      rendered_nodes = self.network_svg\n        .selectAll(\".node\")\n        .data(draw_me.nodes, function(d) {\n          return d.id;\n        });\n        \n      rendered_nodes.exit().remove();\n      rendered_nodes.enter().append(\"path\");\n\n      rendered_clusters = self.network_svg\n        .selectAll(\".cluster-group\")\n        .data(\n          draw_me.clusters.map(function(d) {\n            return d;\n          }),\n          function(d) {\n            return d.cluster_id;\n          }\n        );\n\n      rendered_clusters.exit().remove();\n      rendered_clusters\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"cluster-group\")\n        .attr(\"transform\", function(d) {\n          return \"translate(\" + d.x + \",\" + d.y + \")\";\n        })\n        .on(\"click\", handle_cluster_click)\n        .on(\"mouseover\", cluster_pop_on)\n        .on(\"mouseout\", cluster_pop_off)\n        .call(network_layout.drag().on(\"dragstart\", cluster_pop_off));\n\n      self.draw_cluster_table(self.extra_cluster_table_columns, self.cluster_table, false, self.subcluster_table);\n      \n      if (self._is_CDC_ && ! (options && options[\"no-subclusters\"])) {\n        self.annotate_priority_clusters (_networkCDCDateField, 36, 12);\n      }\n    \n      if (self.subcluster_table) {\n          self.draw_cluster_table(self.extra_subcluster_table_columns, self.subcluster_table, true, false);  \n      }\n      self.draw_node_table(self.extra_node_table_columns);\n    } else {\n      rendered_nodes = self.network_svg.selectAll(\".node\");\n      rendered_clusters = self.network_svg.selectAll(\".cluster-group\");\n      link = self.network_svg.selectAll(\".link\");\n      update_network_string(rendered_nodes.size(), link.size());\n\n    }\n\n    rendered_nodes.each(function(d) {\n      draw_a_node(this, d);\n    });\n    \n    rendered_clusters.each(function(d) {\n      draw_a_cluster(this, d);\n    });\n\n    link.style(\"opacity\", function(d) {\n      return Math.max(node_opacity(d.target), node_opacity(d.source));\n    });\n    \n      if (self.additional_edge_styler) {\n        link.each (function (d) {\n            self.additional_edge_styler (this, d, self);\n        });\n      }  \n\n    link.style(\"display\", function(d) {\n     \n      if (d.target.is_hidden || d.source.is_hidden || d.is_hidden) {   \n        return \"none\";\n      }\n      return null;\n    });\n\n\n\n    if (!soft) {\n      currently_displayed_objects =\n        rendered_clusters[0].length + rendered_nodes[0].length;\n\n      network_layout.on(\"tick\", function() {\n        var sizes = network_layout.size();\n\n        rendered_nodes.attr(\"transform\", function(d) {\n        \n          return (\n            \"translate(\" +\n            (d.x = Math.max(\n              d.rendered_size,\n              Math.min(sizes[0] - d.rendered_size, d.x)\n            )) +\n            \",\" +\n            (d.y = Math.max(\n              d.rendered_size,\n              Math.min(sizes[1] - d.rendered_size, d.y)\n            )) +\n            \")\"\n          );\n        });\n        rendered_clusters.attr(\"transform\", function(d) {\n          return (\n            \"translate(\" +\n            (d.x = Math.max(\n              d.rendered_size,\n              Math.min(sizes[0] - d.rendered_size, d.x)\n            )) +\n            \",\" +\n            (d.y = Math.max(\n              d.rendered_size,\n              Math.min(sizes[1] - d.rendered_size, d.y)\n            )) +\n            \")\"\n          );\n        });\n\n        link.each (self.link_generator_function);\n      });\n      \n                \n      network_layout.start();\n\n    } else {\n        link.each (self.link_generator_function);\n    }\n  };\n\n  function tick() {\n    var sizes = network_layout.size();\n\n    node\n      .attr(\"cx\", function(d) {\n        return (d.x = Math.max(10, Math.min(sizes[0] - 10, d.x)));\n      })\n      .attr(\"cy\", function(d) {\n        return (d.y = Math.max(10, Math.min(sizes[1] - 10, d.y)));\n      });\n\n    link\n      .attr(\"x1\", function(d) {\n        return d.source.x;\n      })\n      .attr(\"y1\", function(d) {\n        return d.source.y;\n      })\n      .attr(\"x2\", function(d) {\n        return d.target.x;\n      })\n      .attr(\"y2\", function(d) {\n        return d.target.y;\n      });\n  }\n\n  /*------------ Node Methods ---------------*/\n  function compute_node_degrees(nodes, edges) {\n    for (var n in nodes) {\n      nodes[n].degree = 0;\n    }\n\n    for (var e in edges) {\n      nodes[edges[e].source].degree++;\n      nodes[edges[e].target].degree++;\n    }\n  }\n\n  self.attribute_node_value_by_id = function (d, id, number) {\n    try {\n        if (_networkNodeAttributeID in d && id) {\n    \n          if (id in d[_networkNodeAttributeID]) {\n      \n            var v; \n        \n            if (self.json[_networkGraphAttrbuteID][id].volatile) {\n                v = self.json[_networkGraphAttrbuteID][id].map (d, self);\n            } else {\n                v = d[_networkNodeAttributeID][id];\n            }\n        \n            if (_.isString(v) ) {\n              if (v.length == 0) {\n                return _networkMissing;\n              } else {\n                if (number) {\n                    v = +v;\n                    return _.isNaN (v) ? _networkMissing : v;\n                }\n              }\n            }\n            return v;\n          }\n        }\n    }\n    catch (e) {\n        console.log (\"self.attribute_node_value_by_id\", e, d, id, number);\n    }\n    return _networkMissing;\n  }\n\n  function inject_attribute_node_value_by_id(d, id, value) {\n    //console.log (\"Injecting \" + id + \" with value \" + value);\n    if (_networkNodeAttributeID in d && id) {\n      d[_networkNodeAttributeID][id] = value;\n    }\n  }\n\n\n  self.inject_attribute_description = function (key,d) {\n    if (_networkGraphAttrbuteID in self.json) {\n        var new_attr = {};\n        new_attr[key] = d;    \n        _.extend (self.json[_networkGraphAttrbuteID], new_attr);\n        //self.json[_networkGraphAttrbuteID][key] = _.clone (d);\n    }\n  }\n    function node_size(d) {\n        var r = 5 + Math.sqrt(d.degree); //return (d.match_filter ? 10 : 4)*r*r;\n        return 4 * r * r;\n  }\n\n  function node_color(d) {\n    /*if (d.match_filter) {\n        return \"white\";\n    }*/\n\n    if (self.colorizer[\"category_id\"]) {\n      var v = self.attribute_node_value_by_id(d, self.colorizer[\"category_id\"]);\n      if (self.colorizer[\"continuous\"]) {\n        if (v == _networkMissing) {\n          return _networkMissingColor;\n        }\n        //console.log (v, self.colorizer['category'](v));\n      }\n      return self.colorizer[\"category\"](v);\n    }\n    return d.hxb2_linked ? \"black\" : d.is_lanl ? \"red\" : \"gray\";\n  }\n\n  function node_opacity(d) {\n    if (self.colorizer[\"opacity\"]) {\n      return self.colorizer[\"opacity\"](\n        self.attribute_node_value_by_id(d, self.colorizer[\"opacity_id\"], true)\n      );\n    }\n    return 1;\n  }\n\n  function cluster_color(d, type) {\n    if (d[\"binned_attributes\"]) {\n      return self.colorizer[\"category\"](type);\n    }\n    return \"#bdbdbd\";\n  }\n\n  function hxb2_node_color(d) {\n    return \"black\";\n  }\n\n  function node_info_string(n) {\n    var str;\n\n    if (!self._is_CDC_) {\n      str =\n        \"Degree <em>\" +\n        n.degree +\n        \"</em><br>Clustering coefficient <em> \" +\n        misc.format_value(n.lcc, _defaultFloatFormat) +\n        \"</em>\";\n    } else {\n      str = \"# links <em>\" + n.degree + \"</em>\";\n    }\n\n    _.each(\n      _.union(self._additional_node_pop_fields, [\n        self.colorizer[\"category_id\"],\n        self.node_shaper[\"id\"],\n        self.colorizer[\"opacity_id\"]\n      ]),\n      function(key) {\n        if (key) {\n          if (key in graph_data[_networkGraphAttrbuteID]) {\n            var attribute = self.attribute_node_value_by_id(n, key);\n\n            if (graph_data[_networkGraphAttrbuteID][key][\"type\"] == \"Date\") {\n              try {\n                attribute = _defaultDateViewFormat(attribute);\n              } catch (err) {}\n            }\n            if (attribute) {\n              str += \"<br>\" + key + \" <em>\" + attribute + \"</em>\";\n            }\n          }\n        }\n      }\n    );\n\n    return str;\n  }\n\n  function edge_info_string(n) {\n    var str = \"Length <em>\" + _defaultFloatFormat(n.length) + \"</em>\";\n    if (\"support\" in n) {\n      str +=\n        \"<br>Worst triangle-based support (p): <em>\" +\n        _defaultFloatFormat(n.support) +\n        \"</em>\";\n    }\n\n    var attribute = self.attribute_node_value_by_id(\n      n,\n      self.colorizer[\"category_id\"]\n    );\n\n    return str;\n  }\n\n  function node_pop_on(d) {\n    toggle_tooltip(\n      this,\n      true,\n      (self._is_CDC_ ? \"Individual \" : \"Node \") + d.id,\n      node_info_string(d),\n      self.container\n    );\n  }\n\n  function node_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  function edge_pop_on(e) {\n    toggle_tooltip(\n      this,\n      true,\n      e.source.id + \" - \" + e.target.id,\n      edge_info_string(e),\n      self.container\n    );\n  }\n\n  function edge_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  /*------------ Cluster Methods ---------------*/\n\n  /* Creates a new object that groups nodes by cluster\n   * @param nodes\n   * @returns clusters\n   */\n  function get_all_clusters(nodes) {\n    var by_cluster = _.groupBy(nodes, \"cluster\");\n    return by_cluster;\n  }\n\n  function compute_cluster_centroids(clusters) {\n    for (var c in clusters) {\n      var cls = clusters[c];\n      cls.x = 0;\n      cls.y = 0;\n      if (_.has(cls, \"children\")) {\n        cls.children.forEach(function(x) {\n          cls.x += x.x;\n          cls.y += x.y;\n        });\n        cls.x /= cls.children.length;\n        cls.y /= cls.children.length;\n      }\n    }\n  }\n\n  function collapse_cluster(x, keep_in_q) {\n    self.needs_an_update = true;\n    x.collapsed = true;\n    currently_displayed_objects -= self.cluster_sizes[x.cluster_id - 1] - 1;\n    if (!keep_in_q) {\n      var idx = open_cluster_queue.indexOf(x.cluster_id);\n      if (idx >= 0) {\n        open_cluster_queue.splice(idx, 1);\n      }\n    }\n    compute_cluster_centroids([x]);\n    return x.children.length;\n  }\n\n  function expand_cluster(x, copy_coord) {\n  \n    self.needs_an_update = true;\n    x.collapsed = false;\n    currently_displayed_objects += self.cluster_sizes[x.cluster_id - 1] - 1;\n    open_cluster_queue.push(x.cluster_id);\n        \n    if (copy_coord) {\n      x.children.forEach(function(n) {\n        n.x = x.x + (Math.random() - 0.5) * x.children.length;\n        n.y = x.y + (Math.random() - 0.5) * x.children.length;\n      });\n    } else {\n      x.children.forEach(function(n) {\n        n.x = self.width * 0.25 + (Math.random() - 0.5) * x.children.length;\n        n.y = 0.25 * self.height + (Math.random() - 0.5) * x.children.length;\n      });\n    }\n  }\n\n  function render_binned_table(id, the_map, matrix) {\n    var the_table = d3.select(self.get_ui_element_selector_by_role(id, true));\n    if (the_table.empty()) {\n        return;\n    }\n\n    the_table.selectAll(\"thead\").remove();\n    the_table.selectAll(\"tbody\").remove();\n\n    d3.select(self.get_ui_element_selector_by_role  (id + \"_enclosed\", true)).style(\"display\", matrix ? null : \"none\");\n\n    if (matrix) {\n      var fill = self.colorizer[\"category\"];\n      var lookup = the_map(null, \"lookup\");\n\n      var headers = the_table.append(\"thead\").append(\"tr\").selectAll(\"th\").data(\n        [\"\"].concat(\n          matrix[0].map(function(d, i) {\n            return lookup[i];\n          })\n        )\n      );\n\n      headers.enter().append(\"th\");\n      headers\n        .html(function(d) {\n          return \"<span>&nbsp;\" + d + \"</span>\";\n        })\n        .each(function(d, i) {\n          if (i) {\n            d3\n              .select(this)\n              .insert(\"i\", \":first-child\")\n              .classed(\"fa fa-circle\", true)\n              .style(\"color\", function() {\n                return fill(d);\n              });\n          }\n        });\n\n      if (self.show_percent_in_pairwise_table) {\n        var sum = _.map(matrix, function(row) {\n          return _.reduce(\n            row,\n            function(p, c) {\n              return p + c;\n            },\n            0\n          );\n        });\n\n        matrix = _.map(matrix, function(row, row_index) {\n          return _.map(row, function(c) {\n            return c / sum[row_index];\n          });\n        });\n      }\n\n      var rows = the_table.append(\"tbody\").selectAll(\"tr\").data(\n        matrix.map(function(d, i) {\n          return [lookup[i]].concat(d);\n        })\n      );\n\n      rows.enter().append(\"tr\");\n      rows\n        .selectAll(\"td\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"td\")\n        .html(function(d, i) {\n          return i == 0\n            ? \"<span>&nbsp;\" + d + \"</span>\"\n            : self.show_percent_in_pairwise_table\n              ? _defaultPercentFormat(d)\n              : d;\n        })\n        .each(function(d, i) {\n          if (i == 0) {\n            d3\n              .select(this)\n              .insert(\"i\", \":first-child\")\n              .classed(\"fa fa-circle\", true)\n              .style(\"color\", function() {\n                return fill(d);\n              });\n          }\n        });\n    }\n  }\n\n  function render_chord_diagram(id, the_map, matrix) {\n  \n    var container = d3.select(self.get_ui_element_selector_by_role (id, true));\n        \n    if (container.empty()) {\n        return;\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    d3.select(self.get_ui_element_selector_by_role  (id + \"_enclosed\", true)).style(\"display\", matrix ? null : \"none\");\n\n    if (matrix) {\n      var lookup = the_map(null, \"lookup\");\n\n      var svg = container.append(\"svg\");\n\n      var chord = d3.layout\n        .chord()\n        .padding(0.05)\n        .sortSubgroups(d3.descending)\n        .matrix(matrix);\n\n      var text_offset = 20,\n        width = 450,\n        height = 450,\n        innerRadius = Math.min(width, height - text_offset) * 0.41,\n        outerRadius = innerRadius * 1.1;\n\n      var fill = self.colorizer[\"category\"],\n        font_size = 12;\n\n      var text_label = svg\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + width / 2 + \",\" + (height - text_offset) + \")\"\n        )\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", font_size)\n        .text(\"\");\n\n      svg = svg\n        .attr(\"width\", width)\n        .attr(\"height\", height - text_offset)\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + width / 2 + \",\" + (height - text_offset) / 2 + \")\"\n        );\n\n      svg\n        .append(\"g\")\n        .selectAll(\"path\")\n        .data(chord.groups)\n        .enter()\n        .append(\"path\")\n        .style(\"fill\", function(d) {\n          return fill(lookup[d.index]);\n        })\n        .style(\"stroke\", function(d) {\n          return fill(lookup[d.index]);\n        })\n        .attr(\n          \"d\",\n          d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius)\n        )\n        .on(\"mouseover\", fade(0.1, true))\n        .on(\"mouseout\", fade(1, false));\n\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"chord\")\n        .selectAll(\"path\")\n        .data(chord.chords)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", d3.svg.chord().radius(innerRadius))\n        .style(\"fill\", function(d) {\n          return fill(d.target.index);\n        })\n        .style(\"opacity\", 1);\n\n      // Returns an event handler for fading a given chord group.\n      function fade(opacity, t) {\n        return function(g, i) {\n          text_label.text(t ? lookup[i] : \"\");\n          svg\n            .selectAll(\".chord path\")\n            .filter(function(d) {\n              return d.source.index != i && d.target.index != i;\n            })\n            .transition()\n            .style(\"opacity\", opacity);\n        };\n      }\n    }\n  }\n\n  function attribute_pairwise_distribution(id, dim, the_map, only_expanded) {\n  \n    var scan_from = only_expanded ? draw_me.edges : self.edges;\n    var the_matrix = [];\n    for (var i = 0; i < dim; i += 1) {\n      the_matrix.push([]);\n      for (var j = 0; j < dim; j += 1) {\n        the_matrix[i].push(0);\n      }\n    }\n\n\n    _.each(scan_from, function(edge) {\n      //console.log (self.attribute_node_value_by_id(self.nodes[edge.source], id), self.attribute_node_value_by_id(self.nodes[edge.target], id));\n      the_matrix[\n        the_map(self.attribute_node_value_by_id(self.nodes[edge.source], id))\n      ][the_map(self.attribute_node_value_by_id(self.nodes[edge.target], id))] += 1;\n    });\n    // check if there are null values\n\n\n    var haz_null = the_matrix.some(function(d, i) {\n      if (i == dim - 1) {\n        return d.some(function(d2) {\n          return d2 > 0;\n        });\n      }\n      return d[dim - 1] > 0;\n    });\n    if (!haz_null) {\n      the_matrix.pop();\n      for (i = 0; i < dim - 1; i += 1) {\n        the_matrix[i].pop();\n      }\n    }\n\n    // symmetrize the matrix\n\n    dim = the_matrix.length;\n\n    for (i = 0; i < dim; i += 1) {\n      for (j = i; j < dim; j += 1) {\n        the_matrix[i][j] += the_matrix[j][i];\n        the_matrix[j][i] = the_matrix[i][j];\n      }\n    }\n\n    return the_matrix;\n  }\n  \n  self._aux_populate_category_fields = function (d, k) {\n        d[\"raw_attribute_key\"] = k;\n        d.discrete = false;\n        if (d[\"type\"] == \"String\") {\n          d.discrete = true;\n          d[\"value_range\"] = _.keys(\n            _.countBy(graph_data.Nodes, function(nd) {\n              return self.attribute_node_value_by_id(nd, k);\n            })\n          );\n          d[\"dimension\"] = d[\"value_range\"].length;\n        } else {\n          if (\"enum\" in d) {\n            d.discrete = true;\n            d[\"value_range\"] = _.clone(d[\"enum\"]);\n            if (!(_networkMissing in d[\"value_range\"])) {\n                d[\"value_range\"].push(_networkMissing);\n            }\n            d[\"dimension\"] = d[\"value_range\"].length;\n            d[\"no-sort\"] = true;\n          }\n        }\n        return d;\n    }\n    \n    self._aux_process_category_values = function (d) {\n        var values;\n        if (d[\"no-sort\"]) {\n          values = d[\"value_range\"];\n        } else {\n          if (d[\"type\"] == \"String\") {\n            values = d[\"value_range\"].sort();\n\n            if (d.dimension <= _maximumValuesInCategories) {\n              var string_hash = function(str) {\n                var hash = 5801;\n                for (var ci = 0; ci < str.length; ci++) {\n                  var charCode = str.charCodeAt(ci);\n                  hash = (hash << (5 + hash)) + charCode;\n                }\n                return hash;\n              };\n\n              var hashed = _.map(values, string_hash);\n              var available_keys = {};\n              var reindexed = {};\n\n              for (var i = 0; i < _maximumValuesInCategories; i++) {\n                available_keys[i] = true;\n              }\n\n              _.each(hashed, function(value, index) {\n                if (value < 0) {\n                  value = -value;\n                }\n\n                var first_try = value % _maximumValuesInCategories;\n                if (first_try in available_keys) {\n                  reindexed[values[index]] = first_try;\n                  delete available_keys[first_try];\n                  return;\n                }\n\n                var second_try =\n                  Math.floor(value / _maximumValuesInCategories) %\n                  _maximumValuesInCategories;\n                if (second_try in available_keys) {\n                  reindexed[values[index]] = second_try;\n                  delete available_keys[second_try];\n                  return;\n                }\n\n                var last_resort = parseInt(\n                  _.keys(available_keys).sort()[0]\n                );\n                reindexed[values[index]] = last_resort;\n                delete available_keys[last_resort];\n              });\n\n              d[\"stable-ish order\"] = reindexed;\n            }\n            //values = _.unzip(_.zip (d['value_range'], ordering_map).sort (function (a,b) { if (a[1] < b[1]) return -1; if (a[1] > b[1]) return 1; return 0}))[0]; //d['value_range'].sort ();\n          } else {\n            values = d[\"value_range\"].sort();\n          }\n        }\n\n        var map = new Object();\n\n        _.each(values, function(d2, i) {\n          map[d2] = i;\n        });\n        \n        d[\"value_map\"] = function(v, key) {\n          return key ? (key == \"lookup\" ? _.invert(map) : map) : map[v];\n        };\n        return d;\n      }\n   \n\n  function attribute_cluster_distribution(the_cluster, attribute_id) {\n    if (attribute_id && the_cluster) {\n      return the_cluster.children.map(function(d) {\n        return self.attribute_node_value_by_id(d, attribute_id);\n      });\n    }\n    return null;\n  }\n\n  function cluster_info_string(id) {\n    var the_cluster = self.clusters[self.cluster_mapping[id]],\n      attr_info = the_cluster[\"binned_attributes\"];\n\n    var str;\n\n    if (self._is_CDC_) {\n      str =\n        \"<strong>\" +\n        self.cluster_sizes[id - 1] +\n        \"</strong> individuals.\" +\n        \"<br>Mean links/individual <em> = \" +\n        _defaultFloatFormat(the_cluster.degrees[\"mean\"]) +\n        \"</em>\" +\n        \"<br>Max links/individual <em> = \" +\n        the_cluster.degrees[\"max\"] +\n        \"</em>\";\n    } else {\n      str =\n        \"<strong>\" +\n        self.cluster_sizes[id - 1] +\n        \"</strong> nodes.\" +\n        \"<br>Mean degree <em>\" +\n        _defaultFloatFormat(the_cluster.degrees[\"mean\"]) +\n        \"</em>\" +\n        \"<br>Max degree <em>\" +\n        the_cluster.degrees[\"max\"] +\n        \"</em>\" +\n        \"<br>Clustering coefficient <em> \" +\n        misc.format_value(the_cluster.cc, _defaultFloatFormat) +\n        \"</em>\";\n    }\n\n    if (attr_info) {\n      attr_info.forEach(function(d) {\n        str += \"<br>\" + d[0] + \" <em>\" + d[1] + \"</em>\";\n      });\n    }\n\n    return str;\n  }\n\n  function cluster_pop_on(d) {\n    toggle_tooltip(\n      this,\n      true,\n      \"Cluster \" + d.cluster_id,\n      cluster_info_string(d.cluster_id),\n      self.container\n    );\n  }\n\n  function cluster_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  self.expand_cluster_handler = function (d, do_update, move_out) {\n    if (d.collapsed) {\n      var new_nodes = self.cluster_sizes[d.cluster_id - 1] - 1;\n\n      if (new_nodes > max_points_to_render) {\n        warning_string = \"This cluster is too large to be displayed\";\n      } else {\n        var leftover =\n          new_nodes + currently_displayed_objects - max_points_to_render;\n        if (leftover > 0) {\n          var k = 0;\n          for (; k < open_cluster_queue.length && leftover > 0; k++) {\n            var cluster =\n              self.clusters[self.cluster_mapping[open_cluster_queue[k]]];\n            leftover -= cluster.children.length - 1;\n            collapse_cluster(cluster, true);\n          }\n          if (k || open_cluster_queue.length) {\n            open_cluster_queue.splice(0, k);\n          }\n        }\n\n        if (leftover <= 0) {\n          expand_cluster(d, !move_out);\n        }\n      }\n\n      if (do_update) {\n        self.update(false, 0.6);\n      }\n    }\n    return \"\";\n  }\n\n  function show_sequences_in_cluster(d) {\n    var sequences = new Object();\n    _.each (_extract_single_cluster(self.clusters[self.cluster_mapping[d.cluster]].children, null, true).Edges, function (e) {\n        _.each (e.sequences, function (s) {\n            if (!(s in sequences)){\n                sequences[s] = 1;\n            }\n        });\n    });\n    //console.log (_.keys(sequences));\n    \n  }\n\n\n  function _compute_cluster_degrees (d) {\n       var degrees = d.children.map(function(c) {\n        return c.degree;\n      });\n      degrees.sort(d3.ascending);\n      d.degrees = helpers.describe_vector(degrees);\n\n  }\n  \n  function collapse_cluster_handler(d, do_update) {\n    collapse_cluster(self.clusters[self.cluster_mapping[d.cluster]]);\n    if (do_update) {\n      self.update(false, 0.4);\n    }\n  }\n\n  function center_cluster_handler(d) {\n    d.x = self.width / 2;\n    d.y = self.height / 2;\n    self.update(false, 0.4);\n  }\n\n  function cluster_box_size(c) {\n    return 8 * Math.sqrt(c.children.length);\n  }\n  \n  self.extract_network_time_series = function (time_attr, other_attributes, node_filter) {\n    var use_these_nodes = node_filter ? _.filter (self.nodes, node_filter) : self.nodes;\n\n    var result = _.map (use_these_nodes, function (node) {\n        var series = {\n            \"time\" : self.attribute_node_value_by_id (node, time_attr),\n        };\n        if (other_attributes) {\n            _.each (other_attributes, function (attr, key) {\n                series[attr] = self.attribute_node_value_by_id (node, key);\n            });\n        }\n        return series;\n    });\n    \n    result.sort (function (a,b) {\n        if (a.time < b.time) return -1;\n        if (a.time == b.time) return 0;\n        return 1;\n    });\n        \n        \n    return result;\n    \n  };\n\n  self.expand_some_clusters = function(subset) {\n    subset = subset || self.clusters;\n    subset.forEach(function(x) {\n      if (!x.is_hidden) {\n        self.expand_cluster_handler(x, false);\n      }\n    });\n    self.update();\n  };\n\n  self.select_some_clusters = function(condition) {\n    return self.clusters.filter(function(c, i) {\n      return _.some(c.children, function(n) {\n        return condition(n);\n      });\n    });\n  };\n\n  self.collapse_some_clusters = function(subset) {\n    subset = subset || self.clusters;\n    subset.forEach(function(x) {\n      if (!x.collapsed) collapse_cluster(x);\n    });\n    self.update();\n  };\n\n  self.toggle_hxb2 = function() {\n    self.hide_hxb2 = !self.hide_hxb2;\n    self.update();\n  };\n\n  function stratify(array) {\n    if (array) {\n      var dict = {},\n        stratified = [];\n\n      array.forEach(function(d) {\n        if (d in dict) {\n          dict[d] += 1;\n        } else {\n          dict[d] = 1;\n        }\n      });\n      for (var uv in dict) {\n        stratified.push([uv, dict[uv]]);\n      }\n      return stratified.sort(function(a, b) {\n        return a[0] - b[0];\n      });\n    }\n    return array;\n  }\n  \n  /*------------ Node injection (social network) ---------------*/\n  \n  self.load_nodes_edges = function (nodes_and_attributes, index_id, edges_and_attributes, annotation ) {\n     annotation = annotation || \"Social\";\n     /** \n        1. Scan the list of nodes for \n            a. Nodes not present in the existing network\n            b. Attribute names\n            c. Attribute values\n        \n        2. Scan the list of edges for \n            a. Edges not present in the existing network \n            b. Attribute names\n            c. Attribute values\n     */\n     \n     var new_nodes = [];\n     var edge_types_dict = {};\n     var existing_nodes = 0;\n     try {\n         if (nodes_and_attributes && nodes_and_attributes.length) {\n     \n             var injected_nodes  = {};\n             var node_attributes = {};\n             \n         \n             if (!(index_id in nodes_and_attributes[0])) {\n                throw (index_id + \" is not one of the attributes in the imported node records\");\n             } \n     \n             _.each (nodes_and_attributes[0], function (r, i) {\n                if (i != index_id) {\n                    var attribute_definition = {\n                        label: i,\n                        type : \"String\",\n                        annotation : annotation\n                    };\n                    self.inject_attribute_description (i, attribute_definition);\n                }\n            });\n     \n            var existing_network_nodes = {},\n                node_name_2_id = {};\n            \n            _.each (self.json.Nodes, function (n, i) {\n                existing_network_nodes[n.id] = n;\n                node_name_2_id [n.id] = i;\n            });\n            \n            _.each (nodes_and_attributes, function (n) {\n                function handle_node_attributes (target) {\n                    _.each (n, function (attribute_value, attribute_key) {\n                        if (attribute_key != index_id) {\n                            inject_attribute_node_value_by_id (target, attribute_key, attribute_value);\n                        }\n                    });\n                }\n                    \n                if (n[index_id] in existing_network_nodes) {\n                    handle_node_attributes (existing_network_nodes[n[index_id]]);\n                    existing_nodes ++;\n                } else {\n                    var new_node = {_networkNodeAttributeID : {}, node_class : \"injected\", node_annotation : annotation, attributes : [], degree: 0};\n                    new_node.id = n[index_id];\n                    handle_node_attributes (new_node);\n                    node_name_2_id [new_node.id] = self.json.Nodes.length;\n                    self.json.Nodes.push (new_node);\n                    new_nodes.push (new_node);\n                }\n            });\n\n\n            _.each (edges_and_attributes, function (e) {\n                try {\n                    if ((\"Index\" in e ) && (\"Partner\" in e) && (\"Contact\" in e)) {\n                        if ((! e[\"Index\"] in node_name_2_id)) {\n                            throw (\"Invalid index node\");\n                        }\n                        if ((! e[\"Partner\"] in node_name_2_id)) {\n                            throw (\"Invalid partner node\");\n                        }\n                        \n                        edge_types_dict [e[\"Contact\"]] = (edge_types_dict [e[\"Contact\"]] ? edge_types_dict [e[\"Contact\"]] : 0) + 1;\n                        \n                        var new_edge = {'source' :  node_name_2_id[e[\"Index\"]],\n                                        'target' :  node_name_2_id[e[\"Partner\"]],\n                                        'edge_type' : e[\"Contact\"],\n                                        'length' : 0.005,\n                                        'directed' : true};\n                        \n                        self.json.Edges.push (new_edge);                                    \n                    } else {\n                        throw (\"Missing required attribute\");\n                    }\n                } catch (err) {\n                    throw (\"Invalid edge specification ( \" + err + \") \" + JSON.stringify(e));\n                }\n            });\n            \n            self._aux_populate_category_menus(); \n            self.update_clusters_with_injected_nodes (null, null, annotation);\n            self.draw_node_table (self.extra_node_table_columns, self.json.Nodes);    \n            if (!self.extra_cluster_table_columns) {\n                self.extra_cluster_table_columns = [];\n            }\n            if (!self.extra_subcluster_table_columns) {\n                self.extra_subcluster_table_columns = [];\n            }\n            \n \n            var edge_types_by_cluster = {};\n            _.each (self.json.Edges, function (e) {\n                var edge_clusters = _.union (_.keys(self.json.Nodes[e.source].extended_cluster), _.keys(self.json.Nodes[e.target].extended_cluster));\n                _.each (edge_clusters, function (c){\n                    if (!(c in edge_types_by_cluster)) {\n                         edge_types_by_cluster [c] = {};\n                    }\n                    if (e.edge_type) {\n                        edge_types_by_cluster[c][e.edge_type] = 1;\n                    }\n                })\n            });\n            \n            \n            var edge_types_by_cluster_sorted = {};\n            _.each (edge_types_by_cluster, function (v,c) {\n                var my_keys = _.keys (v);\n                my_keys.sort();\n                edge_types_by_cluster_sorted[c] = my_keys;\n            });\n           \n            var edge_types = _.keys (edge_types_dict);\n            edge_types.sort ();\n            var _edge_colorizer = d3.scale.ordinal ().range (_networkCategoricalBase).domain (edge_types);\n            \n            var injected_column =                 [\n                {'description' : {\n                     value: annotation + \" network\",\n                     sort: function (c) {return c.value[0];},\n                     help: \"Nodes added and clusters merged through \" + annotation\n                    },\n                  'generator' : function (cluster) {\n                    \n                    return {\n                        value : [cluster.injected [annotation],\n                                 cluster.linked_clusters,\n                                 cluster.cluster_id],\n                        \n                        callback : function (element, payload) {\n                        \n                            var this_cell = d3.select(element);\n                            this_cell.text (+payload[0] + \" \" + annotation + \" nodes. \");\n                            var other_clusters = [];\n                            if (payload [1]) {\n                                other_clusters = _.without (_.keys(payload [1]), payload[2]);\n                                if (other_clusters.length) {\n                                    other_clusters.sort();\n                                    this_cell.append (\"span\").classed (\"label label-info\", true).text (\n                                    \"Bridges to \" + other_clusters.length + \" clusters\"\n                                    ).attr (\"title\", other_clusters.join (\", \"));\n                                }\n                            }\n\n                            var labeled_links = _.clone(edge_types_by_cluster_sorted[payload[2]]);\n                        \n                            if (payload[0] > 0 || other_clusters.length || \n                                (edge_types_by_cluster_sorted[payload[2]] && labeled_links.length)) {\n                                \n                                labeled_links.push (\"\");\n                                                                \n                                var shown_types = {};\n                                _.each (labeled_links, function (t) {\n                                    shown_types [t] = 1;\n                                });\n                                \n                                this_cell\n                                  .append(\"button\")\n                                  .classed(\"btn btn-primary btn-xs pull-right\", true)\n                                  .text(\"View \" + annotation)\n                                  .on (\"click\", function (e) {\n                                    self.open_exclusive_tab_view (payload[2],\n                                          function (n) {return (n.extended_cluster && payload[2] in n.extended_cluster);},\n                                          function (id) { return \"Cluster \" + id + \" with \" + annotation;},\n                                          {\n                                                \"edge-styler\" : function (element, d, network) {\n                                                    if (_.has (d, \"edge_type\")) {   \n                                                        d3.select (element).style (\"stroke\", network._edge_colorizer (d[\"edge_type\"])); \n                                                        d.is_hidden = !network.shown_types[d[\"edge_type\"]];                                                       \n                                                    } else {\n                                                        d.is_hidden = !network.shown_types[\"\"];                                                       \n                                                    }\n                                                },\n                                                \n                                                \"init_code\" : function (network) {\n                                                    function style_edge (type) {\n                                                        \n                                                        this.style(\"stroke-width\", \"5px\");\n                                                        if (type.length) {\n                                                            this.style (\"stroke\", network._edge_colorizer(type));\n                                                        } else {\n                                                            this.classed (\"link\", true);\n                                                            var def_color = this.style (\"stroke\");\n                                                            this.classed (\"link\", null);\n                                                            this.style (\"stroke\", def_color);\n                                                        }\n                                                    };\n                                                    network._edge_colorizer = _edge_colorizer;\n                                                    network.shown_types = _.clone(shown_types);\n                                                    network.edge_legend = {\"caption\" : \"Network links\",\n                                                                           \"types\" : {}};\n                                                                           \n                                                    _.each (network.shown_types, function (ignore, t) {\n                                                        if (t.length) {\n                                                            network.edge_legend.types[t] = _.partial (style_edge, t);\n                                                        } else {\n                                                            network.edge_legend.types[\"Molecular links\"] = _.partial (style_edge, t);\n                                                        }\n                                                    \n                                                    });\n                                                                                \n                                               },\n                                                \n                                                \"extra_menu\" : {\n                                                    \"title\" : \"Additional options\",\n                                                    \"items\" :   _.map (labeled_links, function (edge_class) {\n                                                                return [function (network, element) {\n                                                        function toggle_element  () {\n                                                            network.shown_types [edge_class] = !network.shown_types[edge_class];\n                                                            checkbox.attr (\"checked\", network.shown_types [edge_class] ? \"\" : null);\n                                                            network.update (true);\n                                                        }\n                                                        \n                                                        var link;\n                                                        \n                                                        if (edge_class.length) {                                                                        \n                                                            link = element.append (\"a\").text  (edge_class + \" links\")\n                                                                                .style (\"color\", network._edge_colorizer(edge_class)).on (\"click\", toggle_element);\n                                                                            \n                                                        } else {\n                                                            link = element.append (\"a\").text  (\"Molecular links\")\n                                                                                    .on (\"click\", toggle_element);\n                                                        \n                                                        }\n                                                        var checkbox = link.append (\"input\").attr (\"type\", \"checkbox\").attr (\"checked\", \"\");\n                                                                            \n                                                                            \n                                                    }]})\n                                                }\n                                          }\n                                    );\n                                  });\n                            }\n                        }\n                    }\n                  }\n                }\n              ];\n            \n            self.extra_cluster_table_columns = self.extra_cluster_table_columns.concat (injected_column);\n            self.draw_cluster_table (self.extra_cluster_table_columns, self.cluster_table, false, self.subcluster_table);    \n       }\n    } catch (e) {\n        throw (e);\n    }\n     \n    return {'nodes' : new_nodes, 'existing_nodes' : existing_nodes, 'edges' : edge_types_dict};\n  }\n  \n  self.update_clusters_with_injected_nodes = function (node_filter, edge_filter, annotation) {\n  \n    var cluster_report = {};\n    \n    try {\n\n\n        node_filter = node_filter || function () {return true};\n        edge_filter = edge_filter || function () {return true};\n        \n        var split_clusters = {};\n        var node_id_to_local_cluster = {};\n        \n        \n        var recomputed_clusters = hivtrace_cluster_depthwise_traversal (_.filter (self.json.Nodes, node_filter), \n                                             self.json.Edges,\n                                             null,\n                                             false\n        );\n        \n        _.each (recomputed_clusters, function (c) {\n            var cluster_ids = {};    \n            var injected_count = 0;\n    \n            _.each (c, function (n) {\n                cluster_ids [n.cluster] = 1;\n                injected_count += n.cluster ? 0 : 1;\n            });\n            \n            //var cluster_ids = _.keys (cluster_ids);\n            \n            //console.log (cluster_ids.length);\n            \n            // count how many \"injected\" nodes are there in the new cluster\n            \n\n            if (injected_count) {\n                delete cluster_ids[undefined];\n            }\n            \n            var cluster_count  = _.keys (cluster_ids).length;\n\n            _.each (c, function (n) {\n                if ('extended_cluster' in n) {\n                    _.extend (n ['extended_cluster'] , cluster_ids);\n                } else {\n                    n ['extended_cluster'] = cluster_ids;\n                }            \n             });\n\n            _.each (cluster_ids, function (c,k) {\n                //console.log (k);\n                var existing_cluster = self.clusters[k-1];\n                if (!(existing_cluster.injected)) {\n                    existing_cluster.injected = {};\n                }\n                existing_cluster.injected [annotation] = injected_count;\n                if ('linked_clusters' in existing_cluster) {\n                    _.extend (existing_cluster ['linked_clusters'] , cluster_ids);\n                } else {\n                    existing_cluster ['linked_clusters'] = cluster_ids;\n                }\n            });         \n\n        });\n        \n        \n    } catch (err) {\n        console.log (err);\n        throw (err);\n    }\n\n    return recomputed_clusters;\n  }\n  /*------------ Event Functions ---------------*/\n  function toggle_tooltip(element, turn_on, title, tag, container) {\n    //if (d3.event.defaultPrevented) return;\n\n    if (turn_on && !element.tooltip) {\n      // check to see if there are any other tooltips shown\n      $(\"[role='tooltip']\").each(function(d) {\n        $(this).remove();\n      });\n\n      var this_box = $(element);\n      var this_data = d3.select(element).datum();\n      element.tooltip = this_box.tooltip({\n        title: title + \"<br>\" + tag,\n        html: true,\n        container: container ? container : \"body\"\n      });\n\n      //this_data.fixed = true;\n\n      _.delay(_.bind(element.tooltip.tooltip, element.tooltip), 500, \"show\");\n    } else {\n      if (turn_on == false && element.tooltip) {\n        element.tooltip.tooltip(\"destroy\");\n        element.tooltip = undefined;\n      }\n    }\n  }\n\n  /*------------ Init code ---------------*/\n\n  var l_scale = 5000, // link scale\n    graph_data = self.json, // the raw JSON network object\n    max_points_to_render = 2048,\n    warning_string = \"\",\n    singletons = 0,\n    open_cluster_queue = [],\n    currently_displayed_objects,\n    gravity_scale = d3.scale\n      .pow()\n      .exponent(0.5)\n      .domain([1, 100000])\n      .range([0.1, 0.15]);\n\n  /*------------ D3 globals and SVG elements ---------------*/\n\n  var network_layout = d3.layout\n    .force()\n    .on(\"tick\", tick)\n    .charge(function(d) {\n      if (d.cluster_id)\n        return (\n          self.charge_correction * (-20 - 5 * Math.pow(d.children.length, 0.7))\n        );\n      return self.charge_correction * (-5 - 20 * Math.sqrt(d.degree));\n    })\n    .linkDistance(function(d) {\n      return Math.max(d.length, 0.005) * l_scale;\n    })\n    .linkStrength(function(d) {\n      if (d.support !== undefined) {\n        return 2 * (0.5 - d.support);\n      }\n      return 1;\n    })\n    .chargeDistance(l_scale * 0.25)\n    .gravity(gravity_scale(json.Nodes.length))\n    .friction(0.25);\n\n  d3.select(self.container).selectAll(\".my_progress\").style(\"display\", \"none\");\n  d3.select(self.container).selectAll(\"svg\").remove();\n  self.node_table.selectAll(\"*\").remove();\n  self.cluster_table.selectAll(\"*\").remove();\n\n  self.network_svg = d3\n    .select(self.container)\n    .append(\"svg:svg\")\n    //.style (\"border\", \"solid black 1px\")\n    .attr(\"id\", self.dom_prefix + \"-network-svg\")\n    .attr(\"width\", self.width + self.margin.left + self.margin.right)\n    .attr(\"height\", self.height + self.margin.top + self.margin.bottom);\n\n  self.network_cluster_dynamics = null;\n \n    \n  //.append(\"g\")\n  // .attr(\"transform\", \"translate(\" + self.margin.left + \",\" + self.margin.top + \")\");\n\n  self.legend_svg = self.network_svg.append(\"g\").attr(\"transform\", \"translate(5,5)\");\n\n  self.network_svg\n    .append(\"defs\")\n    .append(\"marker\")\n    .attr(\"id\", self.dom_prefix + \"_arrowhead\")\n    .attr(\"refX\", 9) /* there must be a smarter way to calculate shift*/\n    .attr(\"refY\", 2)\n    .attr(\"markerWidth\", 6)\n    .attr(\"markerHeight\", 4)\n    .attr(\"orient\", \"auto\")\n    .attr(\"stroke\", \"#666666\")\n    .attr(\"fill\", \"#AAAAAA\")\n    .append(\"path\")\n    .attr(\"d\", \"M 0,0 V 4 L6,2 Z\"); //this is actual shape for arrowhead\n\n  change_window_size();\n\n  initial_json_load();\n\n  d3.select(self.container).selectAll(\".my_progress\").style(\"display\", \"none\");\n\n  if (options) {\n    if (_.isNumber(options[\"charge\"])) {\n      self.charge_correction = options[\"charge\"];\n    }\n\n    if (\"colorizer\" in options) {\n      self.colorizer = options[\"colorizer\"];\n    }\n\n    if (\"node_shaper\" in options) {\n      self.node_shaper = options[\"node_shaper\"];\n    }\n    \n    if (\"callbacks\" in options) {\n       options[\"callbacks\"] (self);\n    }\n    \n\n    self.draw_attribute_labels();\n    network_layout.start();\n\n    if (_.isArray(options[\"expand\"])) {\n      self.expand_some_clusters(\n        _.filter(self.clusters, function(c) {\n          return options[\"expand\"].indexOf(c.cluster_id) >= 0;\n        })\n      );\n    }\n  }\n  return self;\n};\n\nvar hivtrace_cluster_graph_summary = function(graph, tag) {\n  var summary_table = d3.select(tag);\n\n  summary_table = d3.select(tag).select(\"tbody\");\n  if (summary_table.empty()) {\n    summary_table = d3.select(tag).append(\"tbody\");\n  }\n\n  var table_data = [];\n\n  if (!summary_table.empty()) {\n    _.each(graph[\"Network Summary\"], function(value, key) {\n      if (self._is_CDC_ && key == \"Edges\") {\n        key = \"Links\";\n      }\n      if (_.isNumber(value)) {\n        table_data.push([key, value]);\n      }\n    });\n  }\n\n  var degrees = [];\n  _.each(graph[\"Degrees\"][\"Distribution\"], function(value, index) {\n    for (var k = 0; k < value; k++) {\n      degrees.push(index + 1);\n    }\n  });\n  degrees = helpers.describe_vector(degrees);\n  table_data.push([\"Links/node\", \"\"]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Mean</i>\",\n    _defaultFloatFormat(degrees[\"mean\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Median</i>\",\n    _defaultFloatFormat(degrees[\"median\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Range</i>\",\n    degrees[\"min\"] + \" - \" + degrees[\"max\"]\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n    degrees[\"Q1\"] + \" - \" + degrees[\"Q3\"]\n  ]);\n\n  degrees = helpers.describe_vector(graph[\"Cluster sizes\"]);\n  table_data.push([\"Cluster sizes\", \"\"]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Mean</i>\",\n    _defaultFloatFormat(degrees[\"mean\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Median</i>\",\n    _defaultFloatFormat(degrees[\"median\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Range</i>\",\n    degrees[\"min\"] + \" - \" + degrees[\"max\"]\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n    degrees[\"Q1\"] + \" - \" + degrees[\"Q3\"]\n  ]);\n\n  if (self._is_CDC_) {\n    degrees = helpers.describe_vector(\n      _.map(graph[\"Edges\"], function(e) {\n        return e.length;\n      })\n    );\n    table_data.push([\"Genetic distances (links only)\", \"\"]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Mean</i>\",\n      _defaultPercentFormat(degrees[\"mean\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Median</i>\",\n      _defaultPercentFormat(degrees[\"median\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Range</i>\",\n      _defaultPercentFormat(degrees[\"min\"]) +\n        \" - \" +\n        _defaultPercentFormat(degrees[\"max\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n      _defaultPercentFormat(degrees[\"Q1\"]) +\n        \" - \" +\n        _defaultPercentFormat(degrees[\"Q3\"])\n    ]);\n  }\n\n  var rows = summary_table.selectAll(\"tr\").data(table_data);\n  rows.enter().append(\"tr\");\n  rows.exit().remove();\n  var columns = rows.selectAll(\"td\").data(function(d) {\n    return d;\n  });\n  columns.enter().append(\"td\");\n  columns.exit();\n  columns.html(function(d) {\n    return d;\n  });\n};\n\nmodule.exports.computeCluster = hivtrace_cluster_depthwise_traversal;\nmodule.exports.clusterNetwork = hivtrace_cluster_network_graph;\nmodule.exports.graphSummary = hivtrace_cluster_graph_summary;\n\n\n\n// WEBPACK FOOTER //\n// ./src/clusternetwork.js","var d3 = require('d3'),\n  _ = require('underscore'),\n  helpers = require('./helpers.js');\n\nfunction hivtrace_cluster_adjacency_list(obj) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  var adjacency_list = {};\n\n  edges.forEach(function(e, i) {\n\n    function in_nodes(n, id) {\n      return n.id == id;\n    }\n\n    var seq_ids = e[\"sequences\"];\n\n    var n1 = nodes.filter(function(n) {\n        return in_nodes(n, seq_ids[0]);\n      })[0],\n      n2 = nodes.filter(function(n) {\n        return in_nodes(n, seq_ids[1]);\n      })[0];\n\n    adjacency_list[n1.id] ? adjacency_list[n1.id].push(n2) : adjacency_list[n1.id] = [n2];\n    adjacency_list[n2.id] ? adjacency_list[n2.id].push(n1) : adjacency_list[n2.id] = [n1];\n\n  });\n\n  return adjacency_list;\n\n}\n\nvar hivtrace_generate_svg_polygon_lookup = {};\n\n_.each(_.range(3, 20), function(d) {\n  var angle_step = Math.PI * 2 / d;\n  hivtrace_generate_svg_polygon_lookup[d] = _.map(_.range(1, d), function(i) {\n    return [Math.cos(angle_step * i), Math.sin(angle_step * i)];\n  });\n});\n\nfunction hivtrace_generate_svg_symbol(type) {\n\n\n  switch (type) {\n    case 'circle':\n    case 'cross':\n    case 'diamond':\n    case 'square':\n    case 'triangle-down':\n    case 'triangle-up':\n      return d3.svg.symbol().type(type);\n    case 'triangle':\n      return new hivtrace_generate_svg_polygon().sides(3);\n    case 'pentagon':\n      return new hivtrace_generate_svg_polygon().sides(5);\n    case 'hexagon':\n      return new hivtrace_generate_svg_polygon().sides(6);\n    case 'septagon':\n      return new hivtrace_generate_svg_polygon().sides(7);\n    case 'octagon':\n      return new hivtrace_generate_svg_polygon().sides(8);\n    case 'ellipse' :\n      return new hivtrace_generate_svg_ellipse();\n  }\n  //console.log (type);\n  return d3.svg.symbol().type('circle');\n}\n\nvar hivtrace_generate_svg_ellipse = function () {\n\n  var self = this;\n\n  self.ellipse = function() {\n\n    var path = \"M \" + self.radius  + \" 0 A \" + self.radius * 1  + \" \" + self.radius * 0.75 + \" 0 1 0 \" +  self.radius  + \" 0.00001\"\n    return path;\n\n  };\n\n  self.ellipse.type = function() {\n    return self.ellipse;\n  };\n\n  self.ellipse.size = function(attr) {\n\n    if (_.isNumber(attr)) {\n      self.size = attr;\n      self.radius = Math.sqrt(1.25 * attr / Math.PI);\n      return self.ellipse;\n    }\n\n    return self.size;\n\n  };\n\n  self.ellipse.size(64);\n\n  return self.ellipse;\n}\n\nvar hivtrace_generate_svg_polygon = function() {\n\n  var self = this;\n\n  self.polygon = function() {\n\n    var path = \" M\" + self.radius + \" 0\";\n\n    if (self.sides in hivtrace_generate_svg_polygon_lookup) {\n      path += hivtrace_generate_svg_polygon_lookup[self.sides].map(function(value) {\n        return \" L\" + self.radius * value[0] + \" \" + self.radius * value[1];\n      }).join(\" \");\n    } else {\n      var angle_step = Math.PI * 2 / self.sides,\n        current_angle = 0;\n      for (i = 0; i < self.sides - 1; i++) {\n        current_angle += angle_step;\n        path += \" L\" + self.radius * Math.cos(current_angle) + \" \" + self.radius * Math.sin(current_angle);\n      }\n    }\n\n    path += \" Z\";\n    return path;\n  };\n\n  self.polygon.sides = function(attr) {\n\n    if (_.isNumber(attr) && attr > 2) {\n      self.sides = attr;\n      return self.polygon;\n    }\n\n    return self.sides;\n\n  };\n\n  self.polygon.type = function() {\n    return self.polygon;\n  };\n\n  self.polygon.size = function(attr) {\n\n    if (_.isNumber(attr)) {\n      self.size = attr;\n      self.radius = Math.sqrt(attr / Math.PI);\n      return self.polygon;\n    }\n\n    return self.size;\n\n  };\n\n  self.polygon.size(64);\n  self.sides = 6;\n\n  return self.polygon;\n\n};\n\nfunction hivtrace_new_cluster_adjacency_list(obj) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n\n  nodes.forEach(function(n) {\n    n.neighbors = d3.set();\n  });\n\n  edges.forEach(function(e) {\n    nodes[e.source].neighbors.add(e.target);\n    nodes[e.target].neighbors.add(e.source);\n  });\n\n}\n\n// Reconstructs path from floyd-warshall algorithm\nfunction hivtrace_get_path(next, i, j) {\n\n  var all_paths = [];\n  i = parseInt(i);\n  j = parseInt(j);\n\n  for (var c = 0; c < next[i][j].length; c++) {\n\n    var k = next[i][j][c];\n    var intermediate = k;\n\n    if (intermediate === null || intermediate == i) {\n      return [\n        [parseInt(i), parseInt(j)]\n      ];\n    } else {\n\n      var paths_i_k = hivtrace_get_path(next, i, intermediate);\n      var paths_k_j = hivtrace_get_path(next, intermediate, j);\n\n      for (var i_k_index = 0; i_k_index < paths_i_k.length; i_k_index++) {\n        var i_k = paths_i_k[i_k_index];\n        for (var k_j_index = 0; k_j_index < paths_k_j.length; k_j_index++) {\n          var k_j = paths_k_j[k_j_index];\n          if (i_k.length) {\n            if ((i_k[0] == i) && (i_k[i_k.length - 1] == k) && (k_j[0] == k) && (k_j[k_j.length - 1] == j)) {\n              i_k.pop();\n              all_paths.push(i_k.concat(k_j));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return all_paths;\n\n}\n\nfunction hivtrace_paths_with_node(node, next, i, j) {\n\n  var paths = hivtrace_get_path(next, i, j);\n\n  // Retrieve intermediary paths\n  paths = paths.map(function(sublist) {\n    return sublist.slice(1, -1);\n  });\n\n  if (!paths) {\n    return 0;\n  }\n\n  var num_nodes = [];\n\n  for (var k = 0; i < paths.length; k++) {\n    sublist = paths[k];\n    num_nodes.push(d3.sum(sublist.map(function(n) {\n      return n == node;\n    })));\n  }\n\n  var mean = d3.mean(num_nodes);\n\n  if (mean === undefined) {\n    mean = 0;\n  }\n\n  return mean;\n\n}\n\n\n// Same as compute shortest paths, but with an additional next parameter for reconstruction\nfunction hivtrace_compute_shortest_paths_with_reconstruction(obj, subset, use_actual_distances) {\n\n  // Floyd-Warshall implementation\n  var distances = [];\n  var next = [];\n  var nodes = obj.Nodes;\n  var edges = obj.Edges;\n  var node_ids = [];\n\n  var adjacency_list = hivtrace_cluster_adjacency_list(obj);\n\n  if (!subset) {\n    subset = Object.keys(adjacency_list);\n  }\n\n  var node_count = subset.length;\n\n  for (var i = 0; i < subset.length; i++) {\n    var a_node = subset[i];\n    var empty_arr = _.range(node_count).map(function(d) {\n      return null;\n    });\n    var zeroes = _.range(node_count).map(function(d) {\n      return null;\n    });\n    distances.push(zeroes);\n    next.push(empty_arr);\n  }\n\n  for (var index = 0; index < subset.length; index++) {\n    var a_node = subset[index];\n    for (var index2 = 0; index2 < subset.length; index2++) {\n      var second_node = subset[index2];\n      if (second_node != a_node) {\n        if (adjacency_list[a_node].map(function(n) {\n            return n.id;\n          }).indexOf(second_node) != -1) {\n          distances[index][index2] = 1;\n          distances[index2][index] = 1;\n        }\n      }\n    }\n  }\n\n  for (var index_i = 0; index_i < subset.length; index_i++) {\n    var n_i = subset[index_i];\n    for (var index_j = 0; index_j < subset.length; index_j++) {\n      var n_j = subset[index_j];\n      if (index_i == index_j) {\n        next[index_i][index_j] = [];\n      } else {\n        next[index_i][index_j] = [index_i];\n      }\n    }\n  }\n\n  // clone distances\n  var distances2 = _.map(distances, _.clone);\n  var c = 0;\n\n  for (var index_k = 0; index_k < subset.length; index_k++) {\n    var n_k = subset[index_k];\n    for (var index_i = 0; index_i < subset.length; index_i++) {\n      var n_i = subset[index_i];\n      for (var index_j = 0; index_j < subset.length; index_j++) {\n        var n_j = subset[index_j];\n\n        if (n_i != n_j) {\n\n          d_ik = distances[index_k][index_i];\n          d_jk = distances[index_k][index_j];\n          d_ij = distances[index_i][index_j];\n\n          if (d_ik !== null && d_jk !== null) {\n            d_ik += d_jk;\n            if (d_ij === null || (d_ij > d_ik)) {\n              distances2[index_i][index_j] = d_ik;\n              distances2[index_j][index_i] = d_ik;\n              next[index_i][index_j] = [];\n              next[index_i][index_j] = next[index_i][index_j].concat(next[index_k][index_j]);\n              continue;\n            } else if (d_ij == d_ik) {\n              next[index_i][index_j] = next[index_i][index_j].concat(next[index_k][index_j]);\n            }\n          }\n          c++;\n          distances2[index_j][index_i] = distances[index_j][index_i];\n          distances2[index_i][index_j] = distances[index_i][index_j];\n        }\n      }\n    }\n\n    var t = distances2;\n    distances2 = distances;\n    distances = t;\n\n  }\n\n  return {\n    'ordering': subset,\n    'distances': distances,\n    'next': next\n  };\n\n}\n\nfunction hivtrace_filter_to_node_in_cluster(node, obj) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges,\n    cluster_id = null;\n\n  // Retrieve nodes that are part of the cluster\n  var node_obj = nodes.filter(function(n) {\n    return node == n.id;\n  });\n\n  if (node_obj) {\n    cluster_id = node_obj[0].cluster;\n  } else {\n    console.log('could not find node');\n    return null;\n  }\n\n  // Filter out all edges and nodes that belong to the cluster\n  var nodes_in_cluster = nodes.filter(function(n) {\n    return cluster_id == n.cluster;\n  });\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n  var edges_in_cluster = edges.filter(function(e) {\n    return node_ids.indexOf(e.sequences[0]) != -1;\n  });\n\n  var filtered_obj = {};\n  filtered_obj[\"Nodes\"] = nodes_in_cluster;\n  filtered_obj[\"Edges\"] = edges_in_cluster;\n  return filtered_obj;\n\n}\n\nfunction hivtrace_compute_betweenness_centrality_all_nodes_in_cluster(cluster, obj, cb) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n\n  var nodes_in_cluster = nodes.filter(function(n) {\n    return cluster == n.cluster;\n  });\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n  var edges_in_cluster = edges.filter(function(e) {\n    return node_ids.indexOf(e.sequences[0]) != -1;\n  });\n\n  var filtered_obj = {};\n  filtered_obj[\"Nodes\"] = nodes_in_cluster;\n  filtered_obj[\"Edges\"] = edges_in_cluster;\n\n  // get length of cluster\n  if (nodes_in_cluster.length > 70) {\n    cb('cluster too large', null);\n    return;\n  }\n\n  // get paths\n  var paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n\n  var betweenness = {};\n  nodes_in_cluster.forEach(function(n) {\n    betweenness[n.id] = hivtrace_compute_betweenness_centrality(n.id, filtered_obj, paths);\n  });\n\n  cb(null, betweenness);\n  return;\n\n}\n\n// Returns dictionary of nodes' betweenness centrality\n// Utilizes the Floyd-Warshall Algorithm with reconstruction\nfunction hivtrace_compute_betweenness_centrality(node, obj, paths) {\n\n  if (!paths) {\n    var filtered_obj = hivtrace_filter_to_node_in_cluster(node, obj);\n    paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n  }\n\n  // find index of id\n  var index = paths.ordering.indexOf(node);\n\n  if (index == -1) {\n    return null;\n  }\n\n  var length = paths.distances.length;\n\n  if (length != 2) {\n    scale = 1 / ((length - 1) * (length - 2));\n  } else {\n    scale = 1;\n  }\n\n\n  // If s->t goes through 1, add to sum\n  // Reconstruct each shortest path and check if node is in it\n  var paths_with_node = [];\n  for (var i in _.range(length)) {\n    for (var j in _.range(length)) {\n      paths_with_node.push(hivtrace_paths_with_node(index, paths.next, i, j));\n    }\n  }\n\n  return d3.sum(paths_with_node) * scale;\n\n}\n\n\nfunction hivtrace_compute_node_degrees(obj) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  for (var n in nodes) {\n    nodes[n].degree = 0;\n  }\n\n  for (var e in edges) {\n    nodes[edges[e].source].degree++;\n    nodes[edges[e].target].degree++;\n  }\n\n}\n\nfunction hivtrace_get_node_by_id(id, obj) {\n  return obj.Nodes.filter(function(n) {\n    return id == n.id;\n  })[0] || undefined;\n}\n\nfunction hivtrace_compute_cluster_betweenness(obj, callback) {\n\n  var nodes = obj.Nodes;\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  // Get all unique clusters\n  var clusters = nodes.map(function(n) {\n    return n.cluster;\n  });\n  var unique_clusters = clusters.filter(onlyUnique);\n\n  var cb_count = 0;\n\n  function cb(err, results) {\n\n    cb_count++;\n\n    for (var node in results) {\n      hivtrace_get_node_by_id(node, obj)['betweenness'] = results[node];\n    }\n\n    if (cb_count >= unique_clusters.length) {\n      callback('done');\n    }\n\n  }\n\n  // Compute betweenness in parallel\n  unique_clusters.forEach(function(cluster_id) {\n    hivtrace_betweenness_centrality_all_nodes_in_cluster(cluster_id, obj, cb);\n  });\n\n  // once all settled callback\n\n}\n\n\nfunction hivtrace_is_contaminant(node) {\n  return node.attributes.indexOf('problematic') != -1;\n}\n\nfunction hivtrace_convert_to_csv(obj, callback) {\n  //Translate nodes to rows, and then use d3.format\n  hivtrace_compute_node_degrees(obj);\n\n  hivtrace_compute_cluster_betweenness(obj, function(err) {\n    var node_array = obj.Nodes.map(function(d) {\n      return [d.id, d.cluster, d.degree, d.betweenness, hivtrace_is_contaminant(d), d.attributes.join(';')];\n    });\n    node_array.unshift(['seqid', 'cluster', 'degree', 'betweenness', 'is_contaminant', 'attributes']);\n    node_csv = d3.csv.format(node_array);\n    callback(null, node_csv);\n  });\n}\n\nfunction hivtrace_export_csv_button(graph, tag) {\n\n  var data = hivtrace_convert_to_csv(graph, function(err, data) {\n    if (data !== null) {\n      var pom = document.createElement('a');\n      pom.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));\n      pom.setAttribute('download', 'export.csv');\n      pom.className = 'btn btn-default btn-sm';\n      pom.innerHTML = '<span class=\"glyphicon glyphicon-floppy-save\"></span> Export Results';\n      $(tag).append(pom);\n    }\n  });\n\n}\n\n\nfunction hiv_trace_export_table_to_text(parent_id, table_id, sep) {\n\n  var the_button = d3.select(parent_id);\n  the_button.selectAll(\"[data-type='download-button']\").remove();\n\n  the_button = the_button.append(\"a\")\n    .attr(\"target\", \"_blank\")\n    .attr(\"data-type\", \"download-button\")\n    .on(\"click\", function(data, element) {\n      d3.event.preventDefault();\n      var table_tag = d3.select(this).attr(\"data-table\");\n      var table_text = helpers.table_to_text(table_tag);\n      helpers.export_handler(table_text, table_tag.substring(1) + \".tsv\", \"text/tab-separated-values\");\n    })\n    .attr(\"data-table\", table_id);\n\n  the_button.append(\"i\").classed(\"fa fa-download fa-2x\", true);\n  return the_button;\n\n}\n\nvar hivtrace_compute_local_clustering_coefficients = _.once(function(obj) {\n\n  hivtrace_new_cluster_adjacency_list(obj);\n\n  var nodes = obj.Nodes;\n\n  nodes.forEach(function(n) {\n\n    var a_node = n;\n    var neighborhood_size = a_node.neighbors.size();\n\n    if (neighborhood_size < 2) {\n      a_node.lcc = undefined;\n    } else {\n\n      if (neighborhood_size > 500) {\n        a_node.lcc = hivtrace_too_large;\n      } else {\n        // count triangles\n        neighborhood = a_node.neighbors.values();\n        counter = 0;\n        for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n          for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n            if (nodes[neighborhood[n1]].neighbors.has(neighborhood[n2])) {\n              counter++;\n            }\n          }\n        }\n        a_node.lcc = 2 * counter / neighborhood_size / (neighborhood_size - 1);\n      }\n    }\n\n  });\n\n});\n\nfunction hivtrace_render_settings(settings, explanations) {\n  // TODO:\n  //d3.json (explanations, function (error, expl) {\n  //    //console.log (settings);\n  //});\n}\n\nfunction hivtrace_format_value(value, formatter) {\n\n  if (typeof value === 'undefined') {\n    return \"Not computed\";\n  }\n  if (value === hivtrace_undefined) {\n    return \"Undefined\";\n  }\n  if (value === hivtrace_too_large) {\n    return \"Size limit\";\n  }\n\n  if (value === hivtrace_processing) {\n    return '<span class=\"fa fa-spin fa-spinner\"></span>';\n  }\n\n  return formatter ? formatter(value) : value;\n\n}\n\nfunction hivtrace_plot_cluster_dynamics (time_series, container, x_title, y_title, y_scale, bin_by, options) {\n        \n    options = options || {\n        base_line : 20,\n        top: 40,\n        right: 30,\n        bottom: 3 * 20,\n        left: 5 * 20,\n        font_size : 18,\n        rect_size : 22,\n        width : 1024,\n        height : 600\n    };\n\n    var skip_cumulative = options && options[\"skip_cumulative\"];\n    \n    var width =  options.width - options.left - options.right;\n    var height =  options.height - options.top - options.bottom;\n\n    bin_by = bin_by || function (date) {\n        var year = date.getFullYear (),\n            nearest_quarter = new Date(),\n            mid_point = new Date ();\n            \n        nearest_quarter.setDate (1);\n        nearest_quarter.setFullYear (year);\n        mid_point.setFullYear (year);\n       \n        \n        var quarter = Math.floor (date.getMonth() / 3) + 1;\n        nearest_quarter.setMonth ((quarter) * 3);\n        nearest_quarter.setHours (0,0,0);\n        mid_point.setHours (0,0,0);\n        \n        nearest_quarter.setFullYear (year + (quarter == 4 ? 1 : 0));\n        mid_point.setMonth ((quarter) * 3 + 1);\n        mid_point.setDate (15);\n                        \n        return [\"Q\" + quarter + \" \" + year, nearest_quarter, mid_point];\n        \n    };\n\n    /** plot_data is an array with entries like \n        {\n            \"time\": DATE,\n            \"sex_trans\":\"IDU-Male\"\n        }\n        \n        \"time\" is required, everything else are optional attributes\n        \n        1. First, we bin everything into ranges (like years or quarters, this is returned by the mapper callback)\n        2. Second, we compute growth dynamics of total counts and individual attributes\n        3. Third, if additional attributes are present, one that's tagged for display is stratified by values and \n           converted into time series\n        \n    */\n            \n    var x = d3.time.scale()\n        .range([0, width]);\n\n    var y = y_scale ? y_scale : d3.scale.linear();\n    \n    y.range([height, 0]);\n                        \n   \n\n    var xAxis = d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\")\n        .ticks (8).tickFormat(d3.time.format (\"%m/%Y\"));\n\n    var yAxis = d3.svg.axis()\n        .scale(y)\n        .orient(\"left\").ticks (8, \"f\");\n    \n    \n    var binned              = {};\n    var values_by_attribute = {};\n    var total_id            = \"total\";\n    var total_color         = \"#555555\";\n    var prefix              = options && options [\"prefix\"]  ? options [\"prefix\"] : null;\n    var max_bin             = 0;\n    \n    _.each (time_series, function (point, index) {\n        var bin_tag = bin_by (point[\"time\"]);\n        if (! (bin_tag [0] in binned)) {\n            binned [bin_tag[0]] = {\"time\" : bin_tag[1], \"x\" : bin_tag[2]};\n            binned [bin_tag[0]][total_id] = 0;\n            _.each (point, function (v, k) {\n                if (k != \"time\") {\n                    binned [bin_tag[0]][k] = {};\n                }\n            });\n        }\n        \n        binned [bin_tag[0]][total_id] += 1;\n        max_bin = Math.max (max_bin, binned [bin_tag[0]][total_id]);\n        \n        var y = {};\n        y [total_id] = index + 1;\n        _.each (point, function (v, k) {\n                if (k != \"time\") {\n                   binned [bin_tag[0]][k][v] = binned [bin_tag[0]][k][v] ? binned [bin_tag[0]][k][v] + 1 : 1;\n                    if (! (k in values_by_attribute)) {\n                        values_by_attribute [k] = {};\n                    }\n                    if (v in values_by_attribute [k]) {\n                        values_by_attribute [k][v] ++;\n                    } else {\n                        values_by_attribute [k][v] = 1;\n                    }\n                    max_bin = Math.max (max_bin, binned [bin_tag[0]][k][v]);\n                    y [k] = _.clone (values_by_attribute[k]);\n                }\n            });\n            \n        point [\"y\"] = y;    \n        point [\"_bin\"] = bin_tag[1];\n    }); \n    \n    \n    var binned_array = [];\n    _.each (binned, function (v,k) {\n        v[\"id\"] = k;\n        binned_array.push (v);\n        \n    });\n        \n    binned_array.sort (function (a,b) {\n        return b['time'] > a['time'] ? 1 : (b['time'] == a['time'] ? 0 : -1);\n    });\n    \n        \n    var min_x = d3.min (time_series, function(d) {\n        return d[\"time\"] < d[\"_bin\"] ? d[\"time\"] : d[\"_bin\"];\n    });\n    var max_x = d3.max (time_series, function(d) {\n        return d[\"time\"] > d[\"_bin\"] ? d[\"time\"] : d[\"_bin\"];\n    });\n              \n    x.domain([min_x,max_x]).clamp (true);\n    y.domain ([0.0, Math.round (skip_cumulative ? max_bin + 1 : time_series.length * 1.2)]).clamp (true);\n    \n    \n    /* step-plot generator*/\n\n    /*var svg = container.append(\"svg\")//.style(\"display\", \"table-cell\")\n        .attr(\"width\", width + options.left + options.right)\n        .attr(\"height\", height + options.top + options.bottom);*/\n        \n        \n    container.selectAll(\"*\").remove(); // clean up previous plots\n        \n    var legend_area = container.append(\"g\").attr(\"transform\", \"translate(\" + (options.left + options.font_size * 2.5) + \",\" + (options.top + options.font_size) + \")\")\n\n    var svg = container.append(\"g\")\n        .attr(\"transform\", \"translate(\" + options.left + \",\" + options.top + \")\");\n\n\n    /* set the domain for the codons */\n        \n    var y_key = _.keys (values_by_attribute)[0];\n    \n    \n    var color_scale = ((\"colorizer\" in options) && options[\"colorizer\"] && (y_key in options[\"colorizer\"])) ? options[\"colorizer\"][y_key]: d3.scale.category10();\n    \n    color_scale = _.wrap (color_scale, function(func, arg) {\n          if (arg == total_id) return total_color;\n          return func(\n            arg\n          );\n        });\n    \n    var plot_types = _.keys (values_by_attribute[y_key]);\n    plot_types.push (total_id);\n    plot_types.sort();\n    \n    if (options && options [\"drag\"]) {\n        var drag = d3.behavior.drag();\n        drag.on (\"drag\", function () {\n            options [\"drag\"].x += d3.event.dx;\n            options [\"drag\"].y += d3.event.dy;\n            d3.select (this).attr (\"transform\", \"translate(\" + options [\"drag\"].x + ',' + options [\"drag\"].y + \")\");\n        }); \n        container.call(drag);\n    }\n    \n    \n    \n    var legend_lines = legend_area.selectAll(\"g\").data(plot_types);\n    \n    legend_lines.enter().append(\"g\").attr(\"class\", \"annotation-text\");\n\n    function opacity_toggle (tag, on_off) {\n        d3.select ('[data-plotid=\"' + tag + '\"]').style (\"fill-opacity\", on_off ? 0.5 : 0.1);\n        d3.select ('[data-curveid=\"' + tag + '\"]').style (\"stroke-width\", on_off ? 3 : 1);\n    }\n\n    legend_lines.selectAll(\"text\").data(function(d) {\n            return [d];\n        }).enter().append(\"text\")\n        .attr(\"transform\", function(d, i, j) {\n            return \"translate(\" + options.rect_size + \",\" + (options.rect_size * (plot_types.length - 1 - j) - (options.rect_size - options.font_size)) + \")\";\n        })\n        .attr(\"dx\", \"0.2em\")\n        .style (\"font-size\", options.font_size)\n        .text(function(d) {\n            return d;\n        }).on (\"mouseover\", function (d) {\n            opacity_toggle (prefix + d, true);\n        }).on (\"mouseout\", function (d) {\n            opacity_toggle (prefix + d, false);\n        });\n\n\n\n    legend_lines.selectAll(\"rect\").data(function(d) {\n            return [d];\n        }).enter().append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", function(d, i, j) {\n            return options.rect_size * (plot_types.length - 2 - j);\n        })\n        .attr(\"width\", options.rect_size)\n        .attr(\"height\", options.rect_size)\n        .attr(\"class\", \"area\")\n        .style(\"fill\", function(d, i, j) {\n            return color_scale (d);\n        }).on (\"mouseover\", function (d) {\n            opacity_toggle (prefix + d, true);\n        }).on (\"mouseout\", function (d) {\n            opacity_toggle (prefix + d, false);\n        });\n\n\n      var last = _.clone (time_series[time_series.length - 1]);\n      last ['time'] = x.domain ()[1];\n      time_series.push (last);\n\n     _.each (plot_types, function (plot_key, idx) {\n    \n        var plot_color = color_scale (plot_key);\n        var y_accessor = function (d) {\n            //console.log ((plot_key in d['y']) ? d['y'][plot_key] : 0);\n            if (plot_key in d['y']) {\n                return d['y'][plot_key];\n            }\n            if (y_key in d['y']) {\n                if (plot_key in d['y'][y_key]) {\n                    return d['y'][y_key][plot_key];\n                }\n            }\n            return 0.0;\n        };\n        \n       var bin_accessor = function (d) {\n            if (y_key && plot_key in d[y_key]) {\n                return d[y_key][plot_key];\n            } else {\n                if (plot_key in d) {\n                    return d[plot_key];\n                }\n            }\n            return 0.0;\n        };\n       \n\n        if (!skip_cumulative) {\n            var curve = d3.svg.area()\n                .x(function(d)  { return x(d['time']); })\n                .y1(function(d) { return y(y_accessor(d)); })\n                .y0(function(d) { return y(0); })\n                .interpolate (\"step\");\n        \n               svg.append(\"path\")\n                  .datum(time_series)\n                  .classed (\"trend\", true)\n                  .style (\"fill\", plot_color)\n                  .style (\"stroke\", plot_color)\n                  .attr(\"d\", curve)\n                  .attr (\"data-plotid\", prefix + plot_key);\n        }\n              \n        binned_array.forEach (function (d) {\n            svg.append (\"circle\").attr (\"cx\", x(d['time'])).attr (\"cy\", y(bin_accessor (d))).attr (\"r\", \"5\")\n            .classed (\"node\", true)\n            .style (\"fill\", plot_color)\n            .style (\"stroke\", plot_color)\n            .attr (\"title\", plot_key + \" : \" + bin_accessor (d));\n        });            \n\n        var curve_year = d3.svg.line()\n            .x(function(d)  { return x(d['time']); })\n            .y(function(d) { return y(bin_accessor(d)); })\n            .interpolate (\"cardinal\");\n        \n           svg.append(\"path\")\n              .datum(binned_array)\n              .classed (\"tracer\", true)\n              .style (\"stroke\", plot_color)\n              .attr(\"d\", curve_year)\n              .attr (\"data-curveid\", prefix + plot_key);\n\n\n    }\n    );\n\n     /* x-axis */\n    var x_axis = svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .style (\"font-size\", options.font_size)\n        .call(xAxis);\n        \n    x_axis.selectAll (\"text\").attr(\"transform\", \"rotate(45)\")\n                        .attr(\"dy\", \"1em\")\n                        .attr(\"dx\", \"1em\");\n\n    \n    x_axis.append(\"text\")\n        .attr(\"x\", width)\n        .attr(\"dy\", \"-.5em\")\n        .style(\"text-anchor\", \"end\")\n        .style (\"font-size\", options.font_size)\n        .text(x_title);\n        \n    \n\n   /* y-axis*/\n    svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .style (\"font-size\", options.font_size)\n        .call(yAxis)\n        .append(\"text\")\n        .style (\"font-size\", options.font_size)\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 6)\n        .attr(\"dy\", \".71em\")\n        .style(\"text-anchor\", \"end\")\n        .text(y_title); // beta - alpha\n\n}\n\nmodule.exports.compute_node_degrees = hivtrace_compute_node_degrees;\nmodule.exports.export_csv_button = hivtrace_export_csv_button;\nmodule.exports.convert_to_csv = hivtrace_convert_to_csv;\nmodule.exports.betweenness_centrality = hivtrace_compute_betweenness_centrality;\nmodule.exports.betweenness_centrality_all_nodes_in_cluster = hivtrace_compute_betweenness_centrality_all_nodes_in_cluster;\nmodule.exports.cluster_adjacency_list = hivtrace_cluster_adjacency_list;\nmodule.exports.new_cluster_adjacency_list = hivtrace_new_cluster_adjacency_list;\nmodule.exports.analysis_settings = hivtrace_render_settings;\nmodule.exports.export_table_to_text = hiv_trace_export_table_to_text;\nmodule.exports.compute_local_clustering = hivtrace_compute_local_clustering_coefficients;\nmodule.exports.undefined = {};\nmodule.exports.too_large = {};\nmodule.exports.processing = {};\nmodule.exports.format_value = hivtrace_format_value;\nmodule.exports.polygon = hivtrace_generate_svg_polygon;\nmodule.exports.symbol = hivtrace_generate_svg_symbol;\nmodule.exports.cluster_dynamics = hivtrace_plot_cluster_dynamics;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc.js","var download = require('downloadjs');\n\nvar datamonkey_error_modal = function(msg) {\n  $('#modal-error-msg').text(msg);\n  $('#errorModal').modal();\n};\n\nfunction b64toBlob(b64, onsuccess, onerror) {\n  var img = new Image();\n\n  img.onerror = onerror;\n\n  img.onload = function onload() {\n    var canvas = document.getElementById(\"hyphy-chart-canvas\");\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    var ctx = canvas.getContext('2d');\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n    if(canvas.msToBlob) {\n      var blob = canvas.msToBlob(onsuccess);\n      onsuccess(blob);\n      window.navigator.msSaveBlob(blob, 'image.png');\n    } else {\n      canvas.toBlob(onsuccess);\n    }\n  };\n\n  img.src = b64;\n}\n\nvar datamonkey_export_csv_button = function(data) {\n  data = d3.csv.format(data);\n  if (data !== null) {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));\n    pom.setAttribute('download', 'export.csv');\n    pom.className = 'btn btn-default btn-sm';\n    pom.innerHTML = '<span class=\"glyphicon glyphicon-floppy-save\"></span> Download CSV';\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n};\n\nvar datamonkey_save_image = function(type, container) {\n\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  };\n\n  function get_styles(doc) {\n\n    function process_stylesheet(ss) {\n      try {\n        if (ss.cssRules) {\n          for (var i = 0; i < ss.cssRules.length; i++) {\n            var rule = ss.cssRules[i];\n            if (rule.type === 3) {\n              // Import Rule\n              process_stylesheet(rule.styleSheet);\n            } else {\n              // hack for illustrator crashing on descendent selectors\n              if (rule.selectorText) {\n                if (rule.selectorText.indexOf(\">\") === -1) {\n                  styles += \"\\n\" + rule.cssText;\n                }\n              }\n            }\n          }\n        }\n      } catch (e) {\n        console.log('Could not process stylesheet : ' + ss);\n      }\n    }\n\n    var styles = \"\",\n      styleSheets = doc.styleSheets;\n\n    if (styleSheets) {\n      for (var i = 0; i < styleSheets.length; i++) {\n        process_stylesheet(styleSheets[i]);\n      }\n    }\n\n    return styles;\n\n  }\n\n  var convert_svg_to_png = function(image_string) {\n\n    var image = document.getElementById(\"hyphy-chart-image\");\n\n    image.onload = function() {\n\n      var canvas = document.getElementById(\"hyphy-chart-canvas\");\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var context = canvas.getContext(\"2d\");\n      context.fillStyle = \"#FFFFFF\";\n      context.fillRect(0, 0, image.width, image.height);\n      context.drawImage(image, 0, 0);\n      var img = canvas.toDataURL(\"image/png\");\n      var pom = document.createElement('a');\n      pom.setAttribute('download', 'image.png');\n      pom.href = canvas.toDataURL(\"image/png\");\n      $(\"body\").append(pom);\n      pom.click();\n      pom.remove();\n\n    };\n\n    image.src = image_string;\n\n  };\n\n  var svg = $(container).find(\"svg\")[0];\n  if (!svg) {\n    svg = $(container)[0];\n  }\n\n  var styles = get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = (new XMLSerializer()).serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n  var rect = svg.getBoundingClientRect();\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source];\n  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\n  if (navigator.msSaveBlob) { // IE10\n    download(image_string, \"image.svg\", \"image/svg+xml\");\n  } else if (type == \"png\") {\n    b64toBlob(image_string,\n      function(blob) {\n        var url = window.URL.createObjectURL(blob);\n        var pom = document.createElement('a');\n        pom.setAttribute('download', 'image.png');\n        pom.setAttribute('href', url);\n        $(\"body\").append(pom);\n        pom.click();\n        pom.remove();\n      },\n      function(error) {\n        console.log(error);\n      });\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'image.svg');\n    pom.setAttribute('href', image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n\n};\n\nvar datamonkey_validate_date = function() {\n\n  // Check that it is not empty\n  if ($(this).val().length === 0) {\n    $(this).next('.help-block').remove();\n    $(this).parent().removeClass('has-success');\n    $(this).parent().addClass('has-error');\n\n    jQuery('<span/>', {\n      class: 'help-block',\n      text: 'Field is empty'\n    }).insertAfter($(this));\n\n  } else if (isNaN(Date.parse($(this).val()))) {\n    $(this).next('.help-block').remove();\n    $(this).parent().removeClass('has-success');\n    $(this).parent().addClass('has-error');\n\n    jQuery('<span/>', {\n      class: 'help-block',\n      text: 'Date format should be in the format YYYY-mm-dd'\n    }).insertAfter($(this));\n\n  } else {\n    $(this).parent().removeClass('has-error');\n    $(this).parent().addClass('has-success');\n    $(this).next('.help-block').remove();\n  }\n\n};\n\nfunction datamonkey_get_styles(doc) {\n  var styles = \"\",\n    styleSheets = doc.styleSheets;\n\n  if (styleSheets) {\n    for (var i = 0; i < styleSheets.length; i++) {\n      processStyleSheet(styleSheets[i]);\n    }\n  }\n\n  function processStyleSheet(ss) {\n    if (ss.cssRules) {\n      for (var i = 0; i < ss.cssRules.length; i++) {\n        var rule = ss.cssRules[i];\n        if (rule.type === 3) {\n          // Import Rule\n          processStyleSheet(rule.styleSheet);\n        } else {\n          // hack for illustrator crashing on descendent selectors\n          if (rule.selectorText) {\n            if (rule.selectorText.indexOf(\">\") === -1) {\n              styles += \"\\n\" + rule.cssText;\n            }\n          }\n        }\n      }\n    }\n  }\n  return styles;\n}\n\nfunction datamonkey_save_newick_to_file() {\n  var top_modal_container = \"#neighbor-tree-modal\";\n  var nwk = $(top_modal_container).data(\"tree\");\n  var pom = document.createElement('a');\n  pom.setAttribute('href', 'data:text/octet-stream;charset=utf-8,' + encodeURIComponent(nwk));\n  pom.setAttribute('download', 'nwk.txt');\n  $(\"body\").append(pom);\n  pom.click();\n  pom.remove();\n}\n\nfunction datamonkey_convert_svg_to_png(image_string) {\n  var image = document.getElementById(\"image\");\n  image.src = image_string;\n\n  image.onload = function() {\n    var canvas = document.getElementById(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#FFFFFF\";\n    context.fillRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n    var img = canvas.toDataURL(\"image/png\");\n\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'phylotree.png');\n    pom.href = canvas.toDataURL(\"image/png\");\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n}\n\nfunction datamonkey_save_newick_tree(type) {\n\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  }\n\n  var tree_container = \"#tree_container\";\n  var svg = $(\"#tree_container\").find(\"svg\")[0];\n  var styles = datamonkey_get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = (new XMLSerializer()).serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n  var rect = svg.getBoundingClientRect();\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source]\n  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\n  if (type == \"png\") {\n    datamonkey_convert_svg_to_png(image_string)\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'phylotree.svg');\n    pom.setAttribute('href', image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n\n}\n\nfunction datamonkey_validate_email(email) {\n  if ($(this).find(\"input[name='receive_mail']\")[0].checked) {\n    var regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n    if (regex.test($(this).find(\"input[name='mail']\").val())) {\n      // Give them green. They like that.\n      $(this).removeClass('has-error');\n      $(this).addClass('has-success');\n      $(this).next('.help-block').remove();\n    } else {\n      $(this).next('.help-block').remove();\n      $(this).removeClass('has-error');\n      $(this).removeClass('has-success');\n      $(this).addClass('has-error');\n      var span = jQuery('<span/>', {\n        class: 'help-block col-lg-9 pull-right',\n        text: 'Invalid Email'\n      }).insertAfter($(this));\n    }\n  } else {\n    $(this).removeClass('has-error');\n    $(this).removeClass('has-success');\n    $(this).next('.help-block').remove();\n  }\n\n}\n\nfunction datamonkey_describe_vector(vector, as_list) {\n\n  var d = {};\n\n  if (vector.length) {\n\n      vector.sort(d3.ascending);\n\n      var d = {\n        'min': d3.min(vector),\n        'max': d3.max(vector),\n        'median': d3.median(vector),\n        'Q1': d3.quantile(vector, 0.25),\n        'Q3': d3.quantile(vector, 0.75),\n        'mean': d3.mean(vector)\n      };\n   } else {\n      var d = {\n        'min': null,\n        'max': null,\n        'median': null,\n        'Q1': null,\n        'Q3': null,\n        'mean': null\n      };\n\n   }\n\n  if (as_list) {\n\n    d = \"<pre>Range  :\" + d['min'] + \"-\" + d['max'] + \"\\n\" + \"IQR    :\" + d['Q1'] + \"-\" + d['Q3'] + \"\\n\" + \"Mean   :\" + d['mean'] + \"\\n\" + \"Median :\" + d['median'] + \"\\n\" + \"</pre>\";\n\n    /*d =\n    \"<dl class = 'dl-horizontal'>\" +\n    \"<dt>Range</dt><dd>\" + d['min'] + \"-\" + d['max'] + \"</dd>\" +\n    \"<dt>IQR</dt><dd>\" + d['Q1'] + \"-\" + d['Q3'] +  \"</dd>\" +\n    \"<dt>Mean</dt><dd>\" + d['mean'] +  \"</dd>\" +\n    \"<dt>Median</dt><dd>\" + d['median'] + \"</dd></dl>\";*/\n  }\n\n  return d;\n\n}\n\nfunction datamonkey_export_handler(data, filename, mimeType) {\n\n  function msieversion() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n      return true;\n    }\n    return false;\n  }\n\n  if (msieversion()) {\n    var IEwindow = window.open();\n    IEwindow.document.write(data);\n    IEwindow.document.close();\n    IEwindow.document.execCommand('SaveAs', true, filename + \".csv\");\n    IEwindow.close();\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:' + (mimeType || 'text/plain') + ';charset=utf-8,' + encodeURIComponent(data));\n    pom.setAttribute('download', filename || \"download.tsv\");\n    pom.click();\n    pom.remove();\n  }\n\n}\n\nfunction datamonkey_table_to_text(table_id, sep) {\n  sep = sep || \"\\t\";\n  var header_row = [];\n  d3.select(table_id + \" thead\").selectAll(\"th\").each(function() {\n    header_row.push(d3.select(this).text())\n  });\n  var data_rows = [];\n  d3.select(table_id + \" tbody\").selectAll(\"tr\").each(function(d, i) {\n    data_rows.push([]);\n    d3.select(this).selectAll(\"td\").each(function() {\n      data_rows[i].push(d3.select(this).text())\n    })\n  });\n\n  return header_row.join(sep) + \"\\n\" +\n    data_rows.map(function(d) {\n      return d.join(sep);\n    }).join(\"\\n\");\n}\n\nfunction datamonkey_capitalize(s) {\n  if (s.length > 0) {\n    return s[0].toUpperCase() + s.slice(1);\n  } else {\n    return s;\n  }\n}\n\nfunction datamonkey_count_partitions(json) {\n  try {\n    return _.keys(json).length;\n  } catch (e) {\n    // ignore errors\n  }\n  return 0;\n}\n\nfunction datamonkey_sum(object, accessor) {\n  accessor = accessor || function(value) {\n    return value;\n  };\n  return _.reduce(object, function(sum, value, index) {\n    return sum + accessor(value, index);\n  }, 0);\n}\n\nfunction datamonkey_count_sites_from_partitions(json) {\n  try {\n    return datamonkey_sum(json[\"partitions\"], function(value) {\n      return value[\"coverage\"][0].length;\n    });\n  } catch (e) {\n    // ignore errors\n  }\n  return 0;\n}\n\nfunction datamonkey_filter_list(list, predicate, context) {\n  var result = {};\n  predicate = _.bind(predicate, context);\n  _.each(list, _.bind(function(value, key) {\n    if (predicate(value, key)) {\n      result[key] = value;\n    }\n  }, context));\n  return result;\n}\n\nfunction datamonkey_map_list(list, transform, context) {\n  var result = {};\n  transform = _.bind(transform, context);\n  _.each(list, _.bind(function(value, key) {\n    result[key] = transform(value, key);\n  }, context));\n  return result;\n}\n\nmodule.exports.errorModal = datamonkey_error_modal;\nmodule.exports.export_csv_button = datamonkey_export_csv_button;\nmodule.exports.save_image = datamonkey_save_image;\nmodule.exports.validate_date = datamonkey_validate_date;\n\nmodule.exports.save_newick_to_file = datamonkey_save_newick_to_file;\nmodule.exports.convert_svg_to_png = datamonkey_convert_svg_to_png;\nmodule.exports.save_newick_tree = datamonkey_save_newick_tree;\nmodule.exports.validate_email = datamonkey_validate_email;\nmodule.exports.describe_vector = datamonkey_describe_vector;\nmodule.exports.table_to_text = datamonkey_table_to_text;\nmodule.exports.export_handler = datamonkey_export_handler;\nmodule.exports.capitalize = datamonkey_capitalize;\nmodule.exports.countPartitionsJSON = datamonkey_count_partitions;\nmodule.exports.countSitesFromPartitionsJSON = datamonkey_count_sites_from_partitions;\nmodule.exports.sum = datamonkey_sum;\nmodule.exports.filter = datamonkey_filter_list;\nmodule.exports.map = datamonkey_map_list;\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/downloadjs/download.js\n// module id = 46\n// module chunks = 0","var d3 = require('d3'),\n  _ = require('underscore');\n\nfunction hivtrace_render_scatterplot(points, w, h, id, labels, dates) {\n    var _defaultDateViewFormat = d3.time.format(\"%B %d, %Y\");\n    var _defaultFloatFormat = d3.format(\",.2r\");\n    var _defaultDateViewFormatShort = d3.time.format(\"%B %Y\");\n\n  var margin = {\n      top: 10,\n      right: 10,\n      bottom: 100,\n      left: 100\n    },\n    width = w - margin.left - margin.right,\n    height = h - margin.top - margin.bottom;\n\n\n  var x = (dates ? d3.time.scale() : d3.scale.linear())\n    .domain(d3.extent(points, function(p) {\n      return p.x;\n    }))\n    .range([0, width]);\n\n  var y = (dates ? d3.time.scale() : d3.scale.linear())\n    .domain(d3.extent(points, function(p) {\n      return p.y;\n    }))\n    .range([height, 0]);\n\n  var xAxis = d3.svg.axis()\n    .scale(x)\n    .orient(\"bottom\").tickFormat(dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n  var yAxis = d3.svg.axis()\n    .scale(y)\n    .orient(\"left\").tickFormat(dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (!histogram_svg.empty()) {\n    histogram_svg.remove();\n  }\n\n  histogram_svg = d3.select(id).append(\"svg\").attr(\"width\", w).attr(\"height\", h).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  points = histogram_svg.selectAll(\"circle\").data(points);\n  points.enter().append(\"circle\");\n\n  points.attr(\"cx\", function(d) {\n    return x(d.x);\n  }).attr(\"cy\", function(d) {\n    return y(d.y);\n  }).attr(\"r\", 3).classed(\"node scatter\", true);\n\n  points.each(function(d) {\n    if (\"title\" in d) {\n      d3.select(this).append(\"title\").text(d.title);\n    }\n  });\n\n  var x_axis = histogram_svg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n\n\n  x_axis.selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").attr(\"dx\", \"-.5em\").attr(\"dy\", \".25em\").style(\"text-anchor\", \"end\");\n  x_axis.append(\"text\").text(labels.x).attr(\"transform\", \"translate(\" + width + \",0)\").attr(\"dy\", \"-1em\").attr(\"text-anchor\", \"end\");\n\n  var y_axis = histogram_svg.append(\"g\")\n    .attr(\"class\", \"y axis\")\n    .attr(\"transform\", \"translate(0,\" + 0 + \")\")\n    .call(yAxis);\n\n  y_axis.selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").attr(\"dx\", \"-.5em\").attr(\"dy\", \".25em\").style(\"text-anchor\", \"end\");\n  y_axis.append(\"text\").text(labels.y).attr(\"transform\", \"rotate(-90)\").attr(\"dy\", \"1em\").attr(\"text-anchor\", \"end\");\n\n}\n\nmodule.exports.scatterPlot = hivtrace_render_scatterplot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/scatterplot.js","var d3 = require('d3'),\n  _ = require('underscore');\n\nfunction hivtrace_histogram(graph, histogram_tag, histogram_label) {\n\n  var defaultFloatFormat = d3.format(\",.2f\");\n  var histogram_w = 300,\n    histogram_h = 300;\n\n  hivtrace_render_histogram(graph[\"Degrees\"][\"Distribution\"],\n    graph[\"Degrees\"][\"fitted\"],\n    histogram_w,\n    histogram_h,\n    histogram_tag);\n\n  var label = \"Network degree distribution is best described by the <strong>\" + graph[\"Degrees\"][\"Model\"] + \"</strong> model, with &rho; of \" +\n    defaultFloatFormat(graph[\"Degrees\"][\"rho\"]);\n\n  if (graph[\"Degrees\"][\"rho CI\"] != undefined) {\n    label += \" (95% CI \" + defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][0]) + \" - \" + defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][1]) + \")\";\n  }\n\n  d3.select(histogram_label).html(label);\n}\n\nfunction hivtrace_histogram_distances(graph, histogram_tag, histogram_label) {\n\n  var defaultFloatFormat = d3.format(\",.3p\");\n  var histogram_w = 300,\n    histogram_h = 300;\n\n  var edge_lengths = _.map(graph[\"Edges\"], function(edge) {\n    return edge.length;\n  });\n\n\n  hivtrace_render_histogram_continuous(edge_lengths,\n    histogram_w,\n    histogram_h,\n    histogram_tag);\n\n  var label = \"Genetic distances among linked nodes.\";\n  d3.select(histogram_label).html(label);\n}\n\nfunction hivtrace_render_histogram_continuous(data, w, h, id) {\n\n  var margin = {\n      top: 10,\n      right: 30,\n      bottom: 50,\n      left: 10\n    },\n    width = w - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (histogram_svg) {\n    histogram_svg.remove();\n  }\n\n  if (data.length > 0) {\n\n      var histogram_data = d3.layout.histogram()(data);\n    \n      var x = d3.scale.linear()\n        .domain(d3.extent(data));\n\n      var y = d3.scale.linear()\n        .domain([0, d3.max(_.map(histogram_data, function(b) {\n          return b.y\n        }))]).range([height, 0]);\n      \n      margin.left += 10*Math.ceil(Math.log10 (y.domain()[1]));\n      width -= margin.left;\n      x.range([0, width]);\n\n      var xAxis = d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\");\n\n      var yAxis = d3.svg.axis()\n        .scale(y)\n        .orient(\"left\");\n\n\n\n      histogram_data.splice(0, 0, {\n        'x': x.domain()[0],\n        'y': 0,\n        'dx': 0\n      });\n      histogram_data.splice(histogram_data.length, 0, {\n        'x': x.domain()[1],\n        'y': 0,\n        'dx': 0\n      });\n\n      histogram_svg = d3.select(id).insert(\"svg\", \".histogram-label\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        .datum(histogram_data);\n\n      var histogram_line = d3.svg.line()\n        .x(function(d) {\n          return x(d.x + d.dx);\n        })\n        .y(function(d) {\n          return y(d.y);\n        })\n        .interpolate(\"step-before\");\n\n      histogram_svg.selectAll(\"path\").remove();\n      histogram_svg.append(\"path\")\n        .attr(\"d\", function(d) {\n          return histogram_line(d) + \"Z\";\n        })\n        .attr(\"class\", \"histogram\");\n\n\n\n      var x_axis = histogram_svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis);\n\n      x_axis.selectAll(\"text\").attr(\"transform\", \"rotate(45)\").attr(\"dx\", \"1em\").attr(\"dy\", \"0.5em\");\n\n      var y_axis = histogram_svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        //.attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(yAxis);\n    }\n\n}\n\nfunction hivtrace_render_histogram(counts, fit, w, h, id) {\n\n  var margin = {\n      top: 10,\n      right: 30,\n      bottom: 50,\n      left: 30\n    },\n    width = w - margin.left - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var x = d3.scale.linear()\n    .domain([0, counts.length + 1])\n    .range([0, width]);\n\n  var y = d3.scale.log()\n    .domain([1, d3.max(counts)])\n    .range([height, 0]);\n\n  var total = d3.sum(counts);\n\n  var xAxis = d3.svg.axis()\n    .scale(x)\n    .orient(\"bottom\");\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (histogram_svg) {\n    histogram_svg.remove();\n  }\n\n  var data_to_plot = counts.map(function(d, i) {\n    return {\n      'x': i + 1,\n      'y': d + 1\n    };\n  });\n  data_to_plot.push({\n    'x': counts.length + 1,\n    'y': 1\n  });\n  data_to_plot.push({\n    'x': 0,\n    'y': 1\n  });\n  data_to_plot.push({\n    'x': 0,\n    'y': counts[0] + 1\n  });\n\n  histogram_svg = d3.select(id).insert(\"svg\", \".histogram-label\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    .datum(data_to_plot);\n\n  var histogram_line = d3.svg.line()\n    .x(function(d) {\n      return x(d.x);\n    })\n    .y(function(d) {\n      return y(d.y);\n    })\n    .interpolate(\"step-before\");\n\n  histogram_svg.selectAll(\"path\").remove();\n  histogram_svg.append(\"path\")\n    .attr(\"d\", function(d) {\n      return histogram_line(d) + \"Z\";\n    })\n    .attr(\"class\", \"histogram\");\n\n\n\n  if (fit) {\n    var fit_line = d3.svg.line()\n      .interpolate(\"linear\")\n      .x(function(d, i) {\n        return x(i + 1) + (x(i + 1) - x(i)) / 2;\n      })\n      .y(function(d) {\n        return y(1 + d * total);\n      });\n    histogram_svg.append(\"path\").datum(fit)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", function(d) {\n        return fit_line(d);\n      });\n  }\n\n  var x_axis = histogram_svg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n\n  x_axis.selectAll(\"text\").attr(\"transform\", \"rotate(45)\").attr(\"dx\", \"1em\").attr(\"dy\", \"0.5em\");\n}\n\nexports.histogram = hivtrace_histogram;\nexports.histogramDistances = hivtrace_histogram_distances;\n\n\n\n// WEBPACK FOOTER //\n// ./src/histogram.js"],"sourceRoot":""}