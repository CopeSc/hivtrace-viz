{"version":3,"sources":["webpack:///./src/entry.js","webpack:///./~/font-awesome/css/font-awesome.css","webpack:///./src/hivtrace.css","webpack:///./src/hivtrace.js","webpack:///./~/bootstrap/dist/css/bootstrap.css","webpack:///./src/clusternetwork.js","webpack:///./src/misc.js","webpack:///./src/helpers.js","webpack:///./~/downloadjs/download.js","webpack:///./src/scatterplot.js","webpack:///./src/prevalence.js","webpack:///./src/histogram.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,QAAO,SAAS,OAAO,IAAI;;AAE3B,qBAAQ;AACR,qBAAQ;AACR,qBAAQ;;AAER,KAAI,WAAW,oBAAQ;;AAEvB;AACA,QAAO,WAAW,S;;;;;;;;ACTlB,0C;;;;;;;ACAA,0C;;;;;;;;;ACAsB;;;;AAIf;;AAIA;;AAGA;;;;AAEP,KAAI,OAAO,oBAAQ;AACnB,KAAI,UAAU,oBAAQ;;AAEtB,QAAO,QAAyB;AAChC,QAAO,QAAuB;AAC9B,QAAO,QAAoB;AAC3B,QAAO,QAA6B;AACpC,QAAO,QAAQ,UAAU;AACzB,QAAO,QAAQ,OAAO;AACtB,QAAO,QAAsB,uC;;;;;;;ACtB7B,0C;;;;;;;;;ACAA,KAAI,KAAK,oBAAQ;KACf,IAAI,oBAAQ;KACZ,OAAO,oBAAQ;KACf,UAAU,oBAAQ;KAClB,cAAc,oBAAQ;KACtB,aAAa,oBAAS;;AAExB,KAAI,0BAA0B;AAC9B,KAAI,0BAA0B;AAC9B,KAAI,kBAAkB;AACtB,KAAI,yBAAyB;AAC7B,KAAI,uBAAuB;AAC3B,KAAI,+BAA+B;AACnC,KAAI,wBAAwB,CAC1B,UACA,UACA,WACA,WACA,SACA,WACA,WACA;AAEF,KAAI,sBAAsB,GAAG,OAAO;AACpC,KAAI,wBAAwB,GAAG,OAAO;AACtC,KAAI,sBAAsB,CAAC,GAAG,KAAK,OAAO,0BAA0B,GAAG,KAAK,OAAO;AACnF,KAAI,yBAAyB,GAAG,KAAK,OAAO;AAC5C,KAAI,8BAA8B,GAAG,KAAK,OAAO;AACjD,KAAI,+BAA+B,GAAG,KAAK,OAAO;AAClD,KAAI,0BAA0B,GAAG,OAAQ;;AAEzC,KAAI,0BAA0B,CAC5B,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA;;AAGF,KAAI,sBAAsB;;AAE1B,GAAE,KAAM,CAAC,GAAE,CAAC,KAAI,MAAM,UAAU,GAC5B;KAAE,KAAM,yBAAyB,UAAU,GACvC;yBAAoB,KAAM,GAAG,IAAI,GAAG,OAAQ,GAC/C;AACJ;AAJD;;AAMA,KAAI,6BAA6B,oBAAoB;;AAErD,KAAI;MACC,CAAC,WACJ;MAAG,CAAC,WAAW,WACf;MAAG,CAAC,WAAW,WAAW,WAC1B;MAAG,CAAC,WAAW,WAAW,WAAW,WACrC;MAAG,CAAC,WAAW,WAAW,WAAW,WAAW,WAChD;MAAG,CACD,WACA,WACA,WACA,WACA,WACA,WAGF;MAAG,CACD,WACA,WACA,WACA,WACA,WACA,WACA,WAGF;MAAG,CACD,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA;AAjCF;;AAqCF,KAAI;;iBAGA;wBACA;kCACA;oCACA;yCACA;iBACA;uBACA;mBACA;wBACA;2BACA;6BACA;mBACA;qBACA;cACA;SACA;kCACA;gBACA;4BACA;oBAEF;AApBE;;YAsBA;+BACA;wBACA;sCACA;+CACA;uBACA;qBACA;cACA;cACA;YAAO;AATP;AAtBF;;AAmCF,KAAI;;WAGA;aACA;cACA;cACA;cAEF;AANE;;YAQA;+BACA;wBACA;sCACA;+CACA;uBACA;qBACA;cACA;cACA;YAEF;AAXE;;WAaA;aACA;mCACA;mCACA;mCACA;cACA;cACA;cAAS;AAPT;AApBF;;AA+BF,KAAI,uCAAuC,8CAAU,OAAO,OAAO,aAAY,YAE3E;;OAAI,WAAY;OACZ,YAAY;OACZ,UAEJ;;KAAE,KAAM,OAAO,UAAU,GACrB;OAAE,UACF;eAAU,EAAE,MACf;AAED;;OAAI,aACA;aAAQ,EAAE,OAAQ,OACrB;AAED;;KAAE,KAAM,OAAO,UAAU,GACrB;SACI;iBAAU,MAAM,EAAE,QAAQ,IAAI,KAAM,CAAC,MAAM,EAAE,SAC7C;iBAAU,MAAM,EAAE,QAAQ,IAAI,KAAM,CAAC,MAAM,EAAE,SAChD;AAHD,OAGE,OAAO,KACL;eAAQ,IAAK,2CAA2C,EAAE,SAAS,SAAS,EAC5E;aAAO,2CAA2C,EAAE,SAAS,SAAS,EACzE;AACJ;AAED;;OAAI,WAAW,kBAAU,MACrB;SAAI,EAAG,KAAK,MAAM,UACd;gBAAS,KAAM,CACf;eAAS,KAAK,MAAM,SAAS,SAC7B;WAAI,YACA;oBAAW,KACd;AACJ;AACD;UAAK,UAEL;;OAAE,KAAO,UAAU,KAAK,KAAK,UAAU,UACnC;WAAI,CAAC,SAAS,GAAG,SACb;iBAAS,SAAS,GAAG,MAAM,QAAS,KACpC;kBAAU,QAAS,SAAS,GAAG,KAAK,KAAM,SAC1C;aAAI,YACA;sBAAW,QAAS,SAAS,GAAG,KAAK,KAAM,SAC9C;AACD;kBAAU,SACb;AACJ;AAEJ;AAEA;;KAAE,KAAM,OAAO,UAAU,GACtB;SAAI,CAAC,EAAE,SACH;gBACH;AACH;AAEF;;UACH;AAvDD;;AAyDA,KAAI,2BAA4B,IAAI,OAAQ;AAC5C,KAAI,uBAAuB;;AAE3B,KAAI,iCAAiC,wCACnC,MACA,mBACA,uBACA,qBACA,eACA,YACA,qBACA,gBACA,aACA,kBACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;OAAI,OAGJ;;QAAK,WAAW,WAAW,QAAQ,YAAY,QAC/C;QAAK,KACH,WAAW,QAAQ,WACf,QAAQ,WACR,GAAG,OAAO,kBAAkB,SAClC;QAAK,YACL;QAAK,QACL;QAAK,QACL;QAAK,WACL;QAAK,gBACL;QAAK,kBACL;QAAK,iBACL;QAAK,UAEL;;OAAI,WAAW,EAAE,WAAY,QAAQ,eACnC;aAAQ,aAAa,KAAM,MAAM,MAClC;AACD;QAAK,aAAa,WAAW,QAAS,YAAY,QAAS,YAC3D;QAAK,8BAAiC,WAAW,QAAS,2BAA2B,QAAS,2BAC9F;QAAK,mBAEL;;OAAI,KAAK,UACP;UAAK,mBAAmB,WAAW,QAAS,sBAAuB,GAAG,OAAO,QAAS,uBACtF;UAAK,iCACL;SAAI,eACC;gBAEI;eAAM,cAAU,GAAI;kBAAO,EAAE,MAAM,SAAS,EAAE,MAAM,KAAQ;AAC5D;eAEH;AAJG;oBAIW,mBAAU,SACtB;;mBAEI;oBAAU,QACV;qBAAW,gBAAU,GACjB;iBAAI,EAAE,QACF;sBAAO,EAAE,KACZ;AAFD,oBAGI;sBACH;AACJ;AAEN;AAVK;AAPR;AAAA,MADY,IAoBX;gBAEI;eACA;eAEH;AAJG;oBAIW,mBAAU,SACtB;;mBAEI;oBAAU,QACV;qBAAW,gBAAU,GACjB;iBAAI,EAAE,QACF;mBAAI,MAAM,EAAE,KACZ;mBAAI,EAAE,MAAM,GACR;wBAAO,6BAA6B,MACvC;AACD;sBACH;AACD;oBACH;AAEN;AAbK;AAiBZ;AAxBI;;SAwBA,KAAK,kBACL;YAAK,iCACR;AAFD,YAGI;WAAI,KAAK,6BACL;cAAK,8BAA8B,KAAK,4BAA4B,OACvE;AAFD,cAGI;cAAK,8BACR;AACJ;AACF;AAEC;;QAAK,2BAA2B,WAAW,QAAS,wBAAwB,QAAS,6BAE5E,cACJ;cAEI;aACA;aAEH;AAJG;kBAIW,mBAAU,MACtB;;qBACkB,kBAAW,SAAS,SAC1B;AACA;eAAI,YAAY,GAAG,OAEnB;;eAAI,cAAc,CACd,CAAC,QAAQ,GAAG,IAAG,QAAQ,GAAG,IAAG,QAAQ,GAAG,KACxC,CAAC,QAAQ,GAAG,KAAK,cAAc,IAAI,QAAQ,GAAG,KAC9C,CAAC,QAAQ,GAAG,KAAK,cAAc,IAAG,QAAQ,GAAG,KAC7C,CAAG,QAAQ,SAAS,KAAK,QAAQ,GAAG,KAAK,uBAAuB,IAAK,QAAQ,SAAS,IAAI,QAAQ,GAAG,KAGzG;;eAAI,UAAU,UAAU,UAAU,QAElC;;aAAE,KAAM,aAAa,UAAU,aAE1B;;AACD;iBAAI,YAAY,GAAG,QACf;mBAAI,aAAa,UAAU,OAAO,QAC/B,QAAQ,gCAAgC,MACxC,QAAQ,YAAY,IAAI,MAAM,KAAK,YAEtC;;mBAAI,EAAE,WAAY,YAAY,KAC5B;4BAAW,GAAI,SAAS,YACzB;AAFD,sBAGE;4BAAW,KAAK,YACjB;AAEJ;AACJ;AAEF;AACP;kBAAU,iBACN;kBAAO,CAAC,CAAC,KAAK,aAAa,gBAAgB,KAAK,aAAa,IAAG,oBAClD,aAAa,YAAa;kBAAK,gBAAgB,KAAK,YACL,UAAU,GAAI;sBAAO,EAAE,cAAc,KAAiB;AAD3E,gBAEqB,gBAAgB,KAAiB;AAFrF,eAEwF,OAGzF,CAAC,KAAK,iBAAiB,GAAE,gBAEzB,CAAC,KAAK,iBAAiB,GAAE,eACzB,CAAC,KAAK,iBAAiB,KAAK,KAAK,OAE5C;AAEN;AA7CK;AAPR;AAAA,IADgB,CAAhB,GA2DN;;QAAK;eACO,kBAAS,GACjB;cAAO,KAAK,aAAa,GAAG,IAAI,IAAI,KAAK,OAC1C;AAGH;AALE;;QAKG,uBAAuB,WAAW,QAAS,0BAA0B,QAAS,0BACnF;QAAK,QAAQ,WAAW,QAAS,WAAW,QAAS,WAAW,IAEhE;;QAAK;SAEH;aAAQ,kBACN;cACD;AAEF;AALC;QAKI,eAAe,MAAQ,KAAK,YAAY,OAAS,KAAK,oBAAoB,GAAK,KAAK;UAExF;YACA;aACA;WAAM;AAHN,MAIG,KAAK,QACR,KAAK,KAAK,KAAK,OAAO,OAAO,KAAK,OAAO,OAAS,KAAK,SACvD,KAAK,QAAQ,IAAI,IAAM,KAAK,gBAAgB,GAAG,OAC/C,iBACG,KAAK,aAAa,GAAG,OACxB,cACG,KAAK,kBAAkB,OAAS,KAAK,OAAO,MAAQ,KAAK,kBAAkB,OAAS,KAAK,iCAAiC,OAAS,KAAK,cAE7I;;QAAK,8BACL;AAGA;;;OAAI,WAAW,kBAAkB,SAC/B;UAAK,uBAAuB,QAC7B;AAFD,UAGE;SAAI,KAAK,UACP;YAAK,uBACN;AAFD,YAGE;YAAK,uBACN;AACF;AAED;;OAAI,WAAW,kBAAkB,SAC/B;UAAK,qBAAqB,QAC3B;AAED;;OAAI,KAAK,UACP;UAAK,4BAA4B,KACjC;UAAK,qBAAqB,KAAK,sBAChC;AAED;;OAAI,WAAW,eAAe,SAC5B;UAAK,mBAAoB,QAC1B;AAFD,UAGE;UAAK,mBAAoB,CAC1B;AAED;;OAAI,WAAW,iBAAiB,SAC9B;UAAK,yBAAyB,QAC/B;AAFD,UAGE;UAAK,yBACN;AAGD;;QAAK,iBAAiB,UAAS,SAC7B;YAAO,QAAQ,SAAS,UAAU,KACnC;AAED;;QAAK,8BAA8B,EAAC,QAAS,KAC7C;QAAK,yBAAyB,UAAU,SAAU;cAAS,MAAO,KAAK,6BACrE,UAAU,QACN;cAAO,OACV;AAAE,MAHoD;AAKzD;;QAAK,gBAAgB,WAAW,eAAe,UAAU,QACzD;QAAK,iBAAiB,WAAW,QAAS,qBAAqB,UAAU,QAEzE;;QAAK,0BAA0B,UAAU,SAAS,MAC7C;YAAO,QAAQ,KACf;SAAI,kBAAkB,CAAC,cACA,4BAA4B,uBAAuB,cAAc,MAAK,OAAO,KAC7E,4BAA4B,uBAAuB,cAAc,MAAK,OAAO,KAC7E,wBAAwB,uBAAwB,QAAQ,KACxD,uCAAuC,uBAAuB,QAAQ,KAG7F;;;gBAEI;cACA;aACA;aACA;iBACA;oBAAa,uBACZ;gBAAO,GAAG,MACP,UACA,OAAO,gBAAgB,OAAQ,CAAC,mBAChC,MAAM,EAAE,MAAM,CAAC,WAAU,OAAM,QAAO,WAAU,UAAS,YAAY,CACxE;AAGF;;YAAK,aAAS,MACX;aAAI,KAAK,YACN;eAAI,KAAK,gBAAgB,GACrB;oBAAO,gBAAgB,KAC1B;AACD;kBAAO,gBACT;AACD;gBAAO,gBACT;AACJ;AAtBI;AAwBT;;QAAK;AAGH;;;gBAEE;cACA;aAAM,CAAC,QAAQ,aACf;aACA;oBAAa,uBACX;gBAAO,GAAG,MACP,UACA,OAAO,CAAC,QAAQ,aAAa,UAAU,kBACvC,MAAM,EAAE,MAAM,wBAAwB,IAAI,CAC9C;AAED;;YAAK,aAAS,MACZ;aAAI,WAAW,KAAK,2BAA2B,MAAM,mBACrD;aAAI,YAAY,iBACd;eAAI,YAAY,KACd;oBACD;AACD;eAAI,YAAY,OACd;oBACD;AACD;kBACD;AACD;gBACD;AAGH;AA1BE;;mBA0Ba,KAEf;;;gBAEO;cACA;aAGD;;YAAK,aAAS,MACX;gBAAO,KACT;AAGP;AAVO;;;gBAYL;cACA;aAAM,CAAC,OAAO,SAAS,SAAS,SAAS,SAAS,SAClD;aACA;oBAAa,uBACX;gBAAO,GAAG,MACP,UACA,OAAO,CACN,OACA,SACA,SACA,SACA,SACA,SACA,OACA,kBAED,MAAM,CACL,WACA,WACA,WACA,WACA,WACA,WACA,WAGL;AACD;YAAK,aAAS,MACZ;aAAI,WAAW,KAAK,2BAA2B,MAC/C;aAAI,YAAY,QACd;kBACD;AACD;gBACD;AAGH;AArCE;;;gBAuCA;cACA;aACA;YAAK,aAAS,MACZ;aACE;eAAI,QAAQ,KAAK,aACf,KAAK,2BAA2B,MAElC;eAAI,OACF;qBAAQ,KAAK,MACd;AAFD,kBAGE;qBACD;AACA;kBACF;AAVD,WAUE,OAAO,KACP;kBACD;AACF;AACD;oBAAa,qBAAS,MACpB;aAAI,wBAAwB,EAAE,QAC5B,KAAK,aAGP;aAAI,cAAc,EAAE,QAClB,GAAG,eAAe,WAAW,YAC7B,GAAG,MACA,SACA,OAAO,CACN,sBAAsB,IACtB,sBAAsB,sBAAsB,SAAS,KAEtD,MAAM,CAAC,GAEZ;gBAAO,UAAS,GACd;eAAI,KAAK,iBACP;oBACD;AACD;kBAAO,YACR;AACF;AAIL;AA3CI;AAjFF;;OA4HE,WAAW,QAAS,wBACtB;OAAE,OAAQ,KAAK,uCAAuC,QACvD;AAED;;QAAK,eAAe,UAAU,OAE5B;;SAAI,iBAAiB,MACjB;cACH;AACD;SAAI,eAEJ;;SAAI,WAAW,IAAK,qBAAqB,UAAU,GAC/C;sBAAe,EAAE,MACjB;cACH;AAED,MALa;;AAOb;;SAAI,QACA;WAAI,KAAK,aAAa,aAAa,gBAAgB,QAAQ,aAAa,gBAAgB,2BACrF;eACF;AACD;cACH;AAED;;WACD;AAED;;AACA;OAAI,uBAAuB,8BAAS,SAAS,SAE3C;;SAAI,YAAY,GAAG,OAAO,KAC1B;SAAI,KACJ;SAAI,cAAc,UAAU,OAAO,MAEnC;;SAAI,YAAY,SACd;qBAAc,UACX,OAAO,MACP,KAAK,MAAM,IACX,KAAK,SAAS,iBACd,KAAK,QACT;AAED;;iBAAY,UAAU,MAEtB;;SAAI,gBAAgB,WAAW,QAAQ,SAEvC;;SAAI,SACF;mBACG,OAAO,MACP,OAAO,KACP,KAAK,YAAY,MACjB,KAAK,kBACL,GAAG,SAAS,UAAS,GACpB;iBAAQ,QACR;cAAK,uBAAuB,SAC5B;qBAAY,MAAM,WACnB;AAEH;;mBACG,OAAO,MACP,OAAO,KACP,KAAK,YAAY,MACjB,KAAK,oBACL,GAAG,SAAS,UAAS,GACpB;iBAAQ,QACR;gCACA;qBAAY,MAAM,WACnB;AAEH;;mBACG,OAAO,MACP,OAAO,KACP,KAAK,YAAY,MACjB,KAAK,UAAS,GACb;aAAI,QAAQ,OAAO,OACnB;gBACD;AAPH,UAQG,GAAG,SAAS,UAAS,GACpB;iBAAQ,QAAQ,CAAC,QACjB;qBAAY,MAAM,WACnB;AAGH;;mBACG,OAAO,MACP,OAAO,KACP,KAAK,YAAY,MACjB,KAAK,UAAS,GACb;gBACD;AANH,UAOG,GAAG,SAAS,UAAS,GACpB;cAAK,wBAAyB,QAC9B;qBAAY,MAAM,WACnB;AAGH;;eAAQ,QAER;;mBACG,MAAM,YAAY,YAClB,MAAM,QAAQ,KAAK,GAAG,MAAM,UAAU,MACtC,MAAM,OAAO,KAAK,GAAG,MAAM,UAAU,MACrC,MAAM,WACV;AAzDD,YA0DE;WAAI,SACF;iBAAQ,QACT;AACD;mBAAY,MAAM,WACnB;AAED;;eAAU,GACR,SACA,UAAS,GACP;4BAAqB,MAAM,gBAAgB,OAC5C;AAJH,QAOD;AAED;;QAAK,yBAAyB,UAAU,cACpC;SAAI,KAAK,oBACN;oBAAa,MAEP,0BACC,UAAU,SAAS,GACf;aAAI,GAAG,OAEP;;aAAI,CAAC,QAAQ,0BACT;mBAAQ,2BAA2B,QAAQ,YAAY,OAAQ,KAAK,KAAK,MAAM,KAAK,aAAa,iBAC9D,KAAM,aAAa,gBAAgB,QAAQ,QAAM,OAIpF;;mBAAQ,uBAAuB,YAC3B;iBAAI,OACJ;iBAAI,QACJ;iBAAI,QAAQ,UAAU,kBAAkB,CAAC,QAAQ,UAAU,eACvD;mBAAI,YAAY,QAAQ,KAAM,yBAAyB,QAAQ,UAC/D;sBACA;oBAAK,QAAQ,UAAU,kBAAkB,UACzC;uBACA;qBAAM,UAAU,YAAY,QAAQ,UACvC;AAEA;;kBAAK,iBAAkB,QAAQ,4BAA6B,KAAK,oBAAoB,OAClF,QAAQ,0BACR,QAAQ,mBAAkB,MAAK;0BAE3B;oBAAK,QAAQ,OACb;sBAAO,QAAQ,OACf;uBAAQ,IACR;qBAAM,IACN;0BACA;0BACA;sBAAQ,QAAQ,QAChB;uBAAS,QAAQ,SACjB;0BACA;uBAAS,QACT;qBAAO,EAAC,GAAI,QAAQ,QACZ;oBAEf;AAdO;AAeR;mBACA;aAAE,KACT;AArCD,gBAsCM;aAAE,KACF;mBAAQ,yBACR;mBAAQ,2BACR;mBAAQ,uBACb;AACH;AAGb,QAnDO;AAqDT;AAED;;QAAK,2BAA2B,UAAU,aAAa,aAAa,gBAClE;OAAE,MAAM,gBAAgB,IACxB;OAAE,MAAM,aACR;OAAE,MAAM,aACT;AAED;;QAAK,0BAA0B,UAAU,YAAY,eAAe,aAAa,oBAC/E;SAAI,YAAY,KAAM,KAAK,UAAU,UAAU,GAC3C;cAAO,EAAE,cAA0B;AAIvC,MALc;;SAKV,CAAC,SACD;AACH;AAED;;0BAAqB,sBAErB;;SAAI,gBAAgB,wBAAyB,gBAAgB,EAAE,OAAQ,KAAK,KAAK,OAAO,iBAAiB,QAEzG;;SAAI,2BAA2B,MAC3B;qBAAe,2BACf;cAAO,OAAQ,MAAM,cAAe,0BAA0B,KACjE;AAED;;SAAI,iBAEoB,0BACI,UAAU,SACN;eAAQ,kBAAoB,KAAK,8BAA+B,KAAK,qBAAsB,aAC/D,KAC/B;AAK7B,MAVwB,CADL;;UAWd,uBAEL;;SAAI,gBAAgB,oBAChB;SAAE,KAAM,cAAc,UAAU,MAC5B;4BAAmB,cAAc,SAAS,KAC7C;AACJ;AAJD,YAKI;SAAE,OAAQ,sBAAoB,gBACb,SACA;oBAEpB;AAHmB,UADa;AAMjC;;YAAO,KAAK,4BAA6B,eAAe,cAAc,YAAa,cAAe,aAAa,YAGhH;AAGD;;QAAK,8BAA8B,UAAU,eAAe,OAAO,eAEjE;;SAAI,YAAY,mBAAU,UAAU,QAChC;WAAI,IACJ;YAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,KACxB;cAAK,EAAE,OACV;AACD;cACH;AAED;;SAAI,UAAsB,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAEpD;;SAAI,gBAAsB,UAAW,SACrC;SAAI,gBAAsB,gBAC1B;SAAI,oBAAsB,gBAC1B;SAAI,oBAAsB,gBAE1B;;YAAO,EAAE,MAAM,eAAe,UAAU,EAAE,MAAM,mBAAmB,UAAU,EAAE,MAAM,mBAAmB,QACnG;uBAAsB,UAAW,SACjC;uBAAsB,gBACtB;2BAAsB,gBACtB;2BAAsB,gBAC1B;AAED;;SAAI,gBACJ;SAAI,oBACJ;SAAI,sBAGJ;;AACA;SAAI,iBAAoB,EAAE,aAAa,KAAM,MAC7C;SAAI,WAAW,EAAG,WAAW,KAAM,QAAQ,MAAM,mBAAmB,KAAM,eAAc,OAAO,KAC/F;OAAE,2GAA2G,SAAU,UACvH,GAAI,SAAS,YACT;YAAK,yBAA0B,eAAe,mBACjD;AAED;;cAAS,SACT;OAAE,MAAM,eAAe,OAEvB;;SAAI,kBAAoB,EAAE,eAAe,SAAU,YAAY,KAAM,MACrE;AACA;SAAI,iBAAiB,EAAE,mCAAmC,QAAS,KAAM,iBACzE;oBAAe,KAAM,oCAAoC,KAAM,MAAM,mBAAmB,KAAM,4BAE9F;;oBAAe,SACf;qBAAgB,SAAU,MAE1B;;AACA;OAAE,UAAU,IAEZ;;SAAI,kBAAkB,EAAC,UAAW,WAAW,QAAQ,WAAW,gBAAiB,GAAG,aAAa,MAAM,UACnG;qBAAgB,WAAW,gBAAgB,UAAW,QAAS,gBAC/D;sBAAiB,WAAW,iBAAiB,UAAW,QAAS,iBACjE;yBAGJ;;SAAI,eACA;SAAE,OAAQ,iBACb;AAED;;SAAI,eAAe,SAAS,eAAe,eAAe,MAAM,mBAAmB,MAAM,MAAM,mBAAmB,YAAY,MAAM,MAAM,MAAM,kBAEhJ;;AACA;kBAAa,uBAAwB,aAAa,SAAS,IAC3D;SAAI,KAAK,UAAU,gBACf;WAAI,KAAK,UAAU,eACf;sBAAa,4BAA6B,KAAK,UAClD;AAFD,cAGI;sBAAa,6BAA8B,KAAK,UACnD;AACJ;AAED;;SAAI,KAAK,YAAY,OACjB;oBAAa,yBAA0B,KAAK,YAC/C;AAED;;SAAI,KAAK,UAAU,eACf;oBAAa,yBAA0B,KAAK,UAC/C;AAED;;YAEA;;AACA;AAMA;;;;;AAOH;;;;;AAEC;;QAAK,kCAAkC,UAAU,MAAM,YACrD;SAAI,cAAc,CAAC,KAAK,eACpB;cACH;AACD;YAAO,CAAC,aAAa,KAAK,MAAM,KAAK,yBAAyB,8BAA8B,OAC7F;AAED;;OAAI,oBAAoB,2BAAS,MAC/B;SAAI,YAAY,GAAG,OAAO,KAC1B;SAAI,KACJ;SAAI,cAAc,UAAU,OAAO,MAEnC;;SAAI,YAAY,SACd;qBAAc,UACX,OAAO,MACP,KAAK,MAAM,IACX,KAAK,SAAS,iBACd,KAAK,QACT;AAED;;iBAAY,UAAU,MAEtB;;SAAI,MACF;YAAK,QACL;mBACG,OAAO,MACP,OAAO,KACP,KAAK,YAAY,MACjB,KAAK,oBACL,GAAG,SAAS,UAAS,GACpB;cAAK,QACL;kCAAyB,MACzB;qBAAY,MAAM,WACnB;AAEH;;mBACG,OAAO,MACP,OAAO,KACP,KAAK,YAAY,MACjB,KAAK,uCACL,GAAG,SAAS,UAAS,GACpB;cAAK,QACL;mCAA2B,MAC3B;qBAAY,MAAM,WACnB;AAEH;;mBACG,MAAM,YAAY,YAClB,MAAM,QAAQ,KAAK,GAAG,MAAM,UAAU,MACtC,MAAM,OAAO,KAAK,GAAG,MAAM,UAAU,MACrC,MAAM,WACV;AA7BD,YA8BE;mBAAY,MAAM,WACnB;AAED;;eAAU,GACR,SACA,UAAS,GACP;yBACD;AAJH,QAOD;AAED;;YAAS,eAAgB,QACvB;AACA;SAAI,kBAAkB,iBAAiB,KAEvC;;SAAI;WAEF;iBAGF;AAJE;;AAKF;SAAI,KAAK,qBACP;yBAAkB,EAAE,KAAK,iBAAiB,KAC3C;AAED;;gBAAW,aAAa,IAAI,iBAAiB,UAAC,OAAO,KACnD;;qBAEE;mBAEH;AAHG;AAKJ,MAPsB;;SAOlB,sBAGE,OACH,OACA,KAAK,CAAC,KAAK,OAAO,KACnB;AAHC;AAAA,MAIA,SAAS,UAAS,GACjB;cAAO,EACR;AANA,QAOA,MAAM,UAAS,GACd;cAAO,KAAK,IAAK,EAAE,OAAO,SAAS,QACpC;AATA,QAUA,KAAM,UAAU,GAAE,GACjB;cAAO,EAAE,QAAQ,EAClB;AAZA,QAaA,QAAS,EAhBE,MAqBR,OACH,UACA,KAAK,CAAC,KAAK,OAAO,KACnB;AAHC;AAAA,MAIA,SAAS,UAAS,GACjB;cAAO,EACR;AANA,QAOA,MAAM,UAAS,GACd;cAAO,KAAK,IAAK,EAAE,OAAO,SAAS,QACpC;AATA,QAUA,KAAM,UAAU,GAAE,GACjB;cAAO,EAAE,QAAQ,EAClB;AAZA,QAaA,MAGH;;SAAI,WAAW,QAAQ,MACvB;OAAE,KAAM,UAAU,UAAU,GACxB;AACH;AACD;YACD;AAED;;YAAS,wBACP;SAAI,UACJ;aAAQ,MACR;aAAQ,QACR;aAAQ,QACR;aAAQ,WAER;;SAAI,mBACJ;SAAI,aAEJ;;UAAK,SAAS,QAAQ,UAAS,GAC7B;WAAI,KAAK,uBAAuB,IAC9B;AACA;aAAI,gBACA,SAAS,KAAK,UAAS,GACvB;kBAAO,EACR;AAFD,eAEM,KACR;aAAI,CAAC,aACH;eAAI,EAAE,WACJ;qBAAQ,SAAS,KACjB;qBAAQ,IAAI,KACb;AAHD,kBAIE;8BAAiB,EAAE,cACpB;AACF;AACF;AACF;AAED;;UAAK,MAAM,QAAQ,UAAS,GAAG,GAC7B;WAAI,iBAAiB,EAAE,UACrB;oBAAW,KAAK,QAAQ,MAAM,SAAS,QAAQ,SAC/C;iBAAQ,MAAM,KACd;iBAAQ,IAAI,KACb;AACF;AAED;;UAAK,MAAM,QAAQ,UAAS,GAC1B;WAAI,EAAE,EAAE,WAAW,KAAK,eACtB;aACE,WAAW,EAAE,YAAY,aACzB,WAAW,EAAE,YAAY,WAEzB;eAAI,IACJ;gBAAK,IAAI,QAAQ,GACf;eAAE,QAAQ,EACX;AAED;;aAAE,SAAS,WAAW,EACtB;aAAE,SAAS,WAAW,EACtB;mBAAQ,MAAM,KACf;AACF;AACF;AAED;;YACD;AAGD;;QAAK,kBAAkB,UAAU,SAAS,eAAe,aAEvD;;SAAI,wCAAyC,gBAAgB,EAAE,OAAQ,KAAK,KAAK,OAAO,iBAAiB,QAAQ,UAAU,UAAU,GACrE;cAAO,EAAE,SAAS,KAC7B;AAErD,MAJoB;;OAIlB,KAAM,cAAc,OAAO,UAAU,GACnC;SAAE,aACL;AAED;;SAAI,2BAA2B,MAC3B;qBAAe,2BACf;cAAO,OAAQ,MAAM,cAAe,0BAA0B,KACjE;AAED;;SAAI,qBACgB,UAAU,SAAS,MACf;WAAI,YAAY,KAAK,OAAQ,OAAO,QAAS,cAC7C;WAAI,QAAQ,UAAU,OAAQ,SAAS,KAAM,yBAAyB,QAAS,iBAC/E;WAAI,iBAAiB,OAAQ,SAAS,KAAM,QAAO,QAAQ,QAAS,gBAAgB,MACnF,KAAM,SAAS,6BAA8B,KAAK,QAClD,KAAM,OAAO,6BAA8B,KAAK,QAChD,KAAM,uCAAuC,IAAK,QAAQ,OACvD,UAAU,MACN;gBAAO,QAAQ,2BAA2B,MAC7C;AAHsC,SAA7B,GAIb,GAAI,SAAS,UAAU,GACpB;AACA;aAAI,WAAW,6BAA6B,MAAO,KACnD;aAAI,KAAK,OACL;mBAAQ,2BAA4B,sBAAsB,IAAI,IAC9D;eAAI,YAAY,QAAQ,wBAAyB,SACjD;mBAAQ,6BAA8B,gBACtC;mBAAQ,6BAA6B,QAAQ,8BAA+B,WAC5E;mBAAQ,6BACR;qBAAU,QAAS,eAAc,MAAM,QAAS,aACnD;AAPD,gBAQI;qBAAU,QAAS,eAAc,OAAO,QAAS,aACpD;AACJ;AACJ,QArBc;AAHhB,QAyBC,QAEA,0BACI,UAAU,SACN;eAAQ,kBAAoB,QAAQ,8BAA+B,QAAQ,qBAAsB,QACrE,QAC/B;AAIzB,MARmB,CA5BI;;UAoClB,uBACL;UAAK,4BAA6B,eAAe,eAAgB,gBAAgB,QAAQ,cAE/E;uBACG,SACI;kBAAU;AADf;AAFJ,QAMN,6BACH;AAED;;YAAS,cAAe,gBAAgB,QAEtC;;SAAI,YAAY,IAAI,KACpB;SAAI,cAAc,UAClB;SAAI,YAAY,KAAK,MAAO,SAC5B;SAAI,YAAY,SAAS,YAEzB;;SAAI,YAAY,aACZ;iBAAU,YAAa,UAAU,gBAAgB,YACjD;iBAAU,SAAU,MAAI,YAC3B;AAHD,YAII;iBAAU,YAAa,UAAU,gBACjC;iBAAU,SAAU,cACvB;AAGD;;AACA;YACD;AAED;;QAAK,6BAA6B,UAAU,YAAY,aAAa,eAAe,YAElF;;SAEI;;oBAAa,cAAc,KAE3B;;WAAI,iBAAiB,wBAAU,QAAQ,MACnC;aAAI,UAAU,KAAK,2BAA4B,MAC/C;aAAI,mBAAmB,MACnB;kBAAO,WAAW,UAAU,WAC/B;AAFD,gBAGI;qBAAU,KAAK,aAAa,KAAK,2BAA2B,MAC5D;eAAI,mBAAmB,MACnB;oBAAO,WAAW,UAAU,WAC/B;AACJ;AACD;gBACH;AAED;;WAAI,cAAe,cAAe,YAClC;WAAI,eAAe,cAAe,YAElC;;WAEA;;WAAI,cAAc,KAAK,OACnB;yBAAgB,KACnB;AAFD,cAGI;aAAI,oBAAoB,IACxB;2BAAkB,QAClB;yBACA;WAAE,KAAM,KAAK,OAAO,UAAU,MACzB;eAAI,eAAgB,mBAAmB,OACpC;kBAAK,gBACL;2BAAc,KACjB;AAHA,kBAIG;kBAAK,gBACR;AACJ;AACL;AAGA;;WAAI,qBAAqB,4BAAU,IAAG,IACtC;AACgB;aAAI,WAAW,KAAK,2BAA4B,IAChD;aAAI,WAAW,KAAK,2BAA4B,IAEhD;;aAAI,YAAY,UACZ;kBAAO,GAAG,KAAK,GAAG,KAAK,CAAC,IAC3B;AAFD,gBAGI;kBAAO,WAAW,WAAW,CAAC,IACjC;AACD;gBACH;AAEb;;AAEA;;WAAI,iBACJ;WAAI,2BAEJ;;AAGA;;;SAAE,KAAM,eAAe,UAAU,MAC7B;aAAI,KAAK,SACL;eAAI,EAAG,KAAK,WAAW,iBACnB;4BAAgB,KAAK,WAAW,EAAC,SAAU,IAAI,SAClD;AACD;oCAA0B,KAAK,MAAM,eAAgB,KAAK,SAAS,SACnE;0BAAgB,KAAK,SAAS,SAAS,KAC1C;AAEJ;AAED;;SAAE,KAAM,KAAK,OAAO,UAAU,MAC1B;aAAI,KAAK,UAAU,KAAK,sBACpB;eAAI,eAAe,KAAK,MAAM,KAAK,QAEnC;;eAAI,YAAY,KAAK,MAAM,KAAK,QAAQ;eACpC,YAAY,KAAK,MAAM,KAAK,QAGhC;;eAAK,aAAa,4BAA8B,aAAa,0BACzD;iBAAI,cAAc,EAAE,MAEpB;;yBAAY,SAAS,yBACrB;yBAAY,SAAS,yBAErB;;4BAAe,cAAc,SAAS,KACzC;AACJ;AACJ;AAGD;;SAAE,KAAM,gBAAgB,UAAU,eAAc,eAE5C;;AACA;AAEA;;AAEA;;aAAI,cAAc,KAAK,gBAEvB;;cAAK,SAAS,aAAa,iBAE3B;;AACA;aAAI,QAEJ;;aAAI,gBAAiB,OAAQ,qCACzB,cAAc,OACd,cAAc,OAAM,MAAM,QAAQ,UAAU,IAAK;kBAAO,GAAG,SAAY;AAG3E,UALmB;;mBAKR,OAAQ,OAAO,UAAU,IAAK;kBAAO,GAAG,SAAY;AAE/D,UAFS;;AAIT;;WAAE,KAAM,aAAa,UAAU,GAAE,GAC5B;aAAE,KACN;AAED;;qBAAY,KAAM,UAAU,IAAI,IAC5B;kBAAO,mBAAoB,GAAG,IAAI,GACrC;AAGD;;yBAAgB,IAAK,aAAa,UAAU,GAAG,GAC3C;eAAI,QAAQ,KAAK,SAAS,aAAa,aAAa,OAAO,IAG3D;;aAAE,KAAM,GAAG,UAAU,GACjB;eAAE,aACF;eAAE,gBACF;eAAE,QACN;AAEA;;;yBACiB,EAAE,MACf;+BAAmB,KAAK,SACxB;2BACA;kCAAsB,kBAAkB,IAAK,MAAM,IAAI,UAAU,GAAI;sBAAO,EAAU;AAE7F,cAF6C,CAAxB;AAHd;AASR,UApBc;;WAoBZ,KAAM,aAAa,UAAU,GAC1B;oCACJ;AAED;;cAAK,SAAS,aAAa,cAG3B;;AAEA;;AAQA;;;;;;;;WAAE,KAAM,aAAa,UAAU,KAC3B;AACC;eAAI,kBAAkB,wBAAyB,EAAE,OAAQ,IAAI,UAAU,EAAE,QAAS,gBAAgB,eAAe,MAAM,MACvH;eAAI,eAAe,4CAChB,gBAAgB,SACd,OAAQ,gBAAgB,OAAO,UAAU,GAAI;oBAAO,EAAE,UAAU,KACjE;AADD,aAFwB,GAGnB,UAAU,IAAK;oBAAO,GAAG,SAAY;AAE7C,YALiB;;eAKb,WAAqB,WAEzB;;sBAAW,KAAM,UAAU,GAAE,GAAK;oBAAO,EAAE,SAAS,EAAS;AAE7D;;eAAI,iBACJ;eAAI,eAEJ;;aAAE,KAAM,YAAY,UAAU,gBAC3B;iBAAI,iBAAiB,EAAE,QAAS,gBAAgB,EAAE,QAAS,gBAC3D;iBAAI,aAAa,KAAM,eACvB;iBAAI,QAAQ,gBACR;mBAAI,eAAe,KAAM,eAAe,MACxC;iBAAE,KAAM,eAAe,OAAO,UAAU,GACpC;mBAAE,gBAAgB,eAAgB,YAAY,KAAK,IACnD;mBAAE,QAAQ,eAAe,MAAM,UAClC;AACJ;AACD;iBAAI,SAAS,gBACT;iBAAE,KAAM,eAAe,QAAQ,UAAU,GAAK;mBAAE,gBAAmB;AACtE;AACH;AAED;;AAEA;;gBAAK,SAAS,aAAa,iBAAiB,IAEhD;AAGJ;AACJ;AAtMD,OAsME,OAAO,KACL;eAAQ,IACR;AACH;AAEF;AAED;;YAAS,eAAe,QACtB;AAEA;;SAAI,cAAc,eAElB;;SAAI,KAAK,SAAS,UAAU,GACxB;YAAK,uBAAuB,OAAO,UAAS,GAAG,GAAG,KAChD;gBAAO,EAAE,OAAO,EAAE,eACnB;AAGJ,QALmB;AADpB,YAOI;WAAI,oBACJ;SAAE,KAAM,KAAK,UAAU,UAAU,GAC7B;2BAAmB,EAAE,cACxB;AACD;SAAE,KAAM,aAAa,UAAU,GAC3B;aAAI,gBAAgB,GACjB;aAAE,UAAW,kBAAmB,EAAE,aACpC;AACJ;AACJ;AAED;;AAEA;;SAAI,2BAA2B,UAAU,GAAI;SAAE,KAAK,EAAE,IAAI,IAAK,EAAE,KAAK,EAAE,IAAS;AAA3D,SACS,UAAU,GAAI;SAAE,KAAK,EAAE,KAAK,IAAK,EAAE,KAAK,EAAE,KAAU;AAEnF;;OAAE,KAAM,CAAC,KAAK,OAAO,KAAK,WAAW,UAAU,MAC3C;SAAE,KAAM,MACX;AAGD;;UAAK,SAAS,QACf;AAED;;YAAS,eAAe,OACtB;UAAK,oBAAoB,KAAK,oBAC9B;oBACD;AAED;;YAAS,mBAAmB,OAAO,SACjC;SAAI,OACF;WAAI,UAAU,CAAC,KAAK,QAAQ,QAAQ,KAAK,KACzC;WAAI,UAAU,CAAC,KAAK,SAAS,QAAQ,KAAK,KAE1C;;YAAK,SACL;YAAK,UAEL;;WAAI,eAAe,MAAM,SAAS,UAC7B,OAAO,eAAe,SAAS,UAAS,MACzC;gBAAO,KACR;AAEH,QAJE,CADc;iBAKN,QACN,IAAI,UAAU,UAAU,UAAS,GACjC;gBAAO,IACR;AAEH,QAJE;AAKF;WAAI,eAAe,MAAM,SAAS,UAC7B,OAAO,eAAe,SAAS,UAAS,MACzC;gBAAO,KACR;AAEH,QAJE,CADc;iBAKN,QACN,IAAI,UAAU,UAAU,UAAS,GACjC;gBAAO,IACR;AAGH,QALE;;SAKA,KAAK,eAAe,SAAS,UAAS,MACtC;cAAK,IAAI,UAAU,KACnB;cAAK,IAAI,UAAU,KACpB;AACF;AAED;;UAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,KAAK,OAAO,MAC3C;UAAK,SAAS,KAAK,IAAI,KAAK,IAAI,KAAK,QAAQ,MAE7C;;oBAAe,KAAK,CAAC,KAAK,OAAO,KACjC;UAAK,YAAY,KAAK,SAAS,KAAK,OAAO,KAAK,UAAU,KAE1D;;SAAI,SACF;sBACD;AAFD,YAGE;WAAI,OACF;cAAK,OACN;AACF;AACF;AAED;;QAAK,2BAA2B,KAAK,YACnC;UAAK,MAAM,QAAQ,UAAS,GAC1B;SAAE,YAAY,GACf;AAED;;UAAK,MAAM,QAAQ,UAAS,GAC1B;YAAK,MAAM,EAAE,QAAQ,UAAU,IAAI,EACnC;YAAK,MAAM,EAAE,QAAQ,UAAU,IAAI,EACpC;AACF;AAED,IAX8B;;QAWzB,0CAA0C,KAAK,YAClD;UAEA;;UAAK,MAAM,QAAQ,UAAS,GAC1B;SAAE,MAAM,UAAS,QACf;6BAAoB,OAAO,UAC3B;aAAI,oBAAoB,GACtB;kBAAO,MAAM,KACd;AAFD,gBAGE;eAAI,oBAAoB,KACtB;oBAAO,MAAM,KACd;AAFD,kBAGE;AACA;4BAAe,OAAO,UACtB;uBACA;kBAAK,KAAK,GAAG,KAAK,mBAAmB,MAAM,GACzC;oBAAK,KAAK,KAAK,GAAG,KAAK,mBAAmB,MAAM,GAC9C;qBACE,KAAK,MAAM,aAAa,KAAK,UAAU,IAAI,aAAa,MAExD;AACD;AACF;AACF;AAED;;oBAAO,MACL,IAAI,UAAU,qBAAqB,oBACtC;AACF;AACF;AAzBD,UA0BD;AACF;AAED,IAjC6C;;QAiCxC,iBAAiB,UAAS,IAC7B;iBAAY,MAAM,OAAO,UAAS,GAChC;cAAO,EAAE,MACV;AAFM,QAGR;AAED;;QAAK,iDAAiD,KAAK,YACzD;SAAI,SAAS,IAAI,OAEjB;;YAAO,YAAY,UAAS,OAC1B;WAAI,QAAQ,MAAM,KAElB;;aAAM,QAAQ,UAAS,GACrB;0BAAiB,KAAK,eAAe,EACrC;wBAAe,MAAM,EAAE,MAAM,EAAE,MAAM,KACtC;AACF;AAED;;SAAI,aACJ;gBAAW,WAAW,KACtB;gBAAW,WAAW,KACtB;YAAO,YACR;AAED,IAlBoD;;OAkBhD,gCAAgC,QAClC,UAAS,GACP;UACA;cAAS,OACP,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,UAAU,KAAK,GAAG,aAAa,IAC3D,UAAS,MAAM,OACb;cAAO,OACR;AAJI,QAOR;AAV+B,MAWhC,UAAS,GACP;YAAO,EACR;AAGH;;QAAK,2CAA2C,KAAK,YACnD;UAEA;;UAAK,SAAS,QAAQ,UAAS,GAC7B;SAAE,MAAM,UAAS,WACf;wBAAe,UAAU,SACzB;aAAI,eAAe,GACjB;qBAAU,KAAK,KAChB;AAFD,gBAGE;eAAI,4BAA4B,WAAW,SAAS,SAClD;uBAAU,KAAK,KAChB;AAFD,kBAGE;AACA;4BAEA;;iBAAI,SACJ;iBAAI,YAEJ;;kBAAK,MAAM,QAAQ,UAAS,GAAG,GAC7B;mBAAI,EAAE,WAAW,UAAU,YACzB;8BAAa,KACd;AACF;AACD;0BAAa,QAAQ,UAAS,MAC5B;mCAAoB,MAAM,MAAM,UAC7B,SACA,IAAI,UAAS,GACZ;wBAAO,CACR;AAJY,kBAKZ,KAAK,GACR;oBAAK,KAAK,GAAG,KAAK,aAAa,QAAQ,MAAM,GAC3C;sBAAK,KAAK,KAAK,GAAG,KAAK,aAAa,QAAQ,MAAM,GAChD;6BACA;uBACE,KAAK,MAAM,aAAa,KAAK,UAAU,IAAI,aAAa,MAExD;kCACD;AACF;AACF;AACF;AAED;;uBAAU,KAAK,YAChB;AACF;AACF;AAzCD,UA0CD;AACF;AAED,IAjD8C;;QAiDzC,2BAA2B,UAAS,UACvC;UAAK,MAAM,QAAQ,UAAS,GAC1B;SAAE,YAAY,KACf;AACF;AAED;;QAAK,sBAAsB,YACzB;QAAG,OAAO,MAAM,QAAQ,YAAY,MAAM,OAAO,KAAK;wBAEpD;iBACA;kBAEF;AAJE;UAIG,yBACL;UACA;UACA;QAAG,OAAO,MACX;AAED;;AACA;YAAS,oBACP;SAAI,kBACJ;SAAI,QACJ;UAAK,sBACL;UAAK,iBACL;UAAK,gBAEL;;gBAAW,MAAM,QAAQ,UAAS,GAChC;WAAI,OAAO,KAAK,cAAc,EAAE,UAAU,OAAO,aAC/C;cAAK,cAAc,EAAE,UAAU,KAChC;AAFD,cAGE;cAAK,cAAc,EAAE,UACtB;AACD;WAAI,aAAa,GACf;WAAE,UAAU,EAAE,WACf;AAED;;WAAI,EAAE,WAAW,QAAQ,kBAAkB,GACzC;cAAK,iBAAiB,EAAE,cACzB;AACF;AAED;;AACA;AAEA;;UAAK,wBAEL;;UAAK,gCAAgC,UAAU,OAAO,cAClD;WAAI,YAAY,IAAK,cAAc,UAAU,GAAI;gBAAO,EAAqB;AAC7E,QADc,CAAD;SACX,KAAM,OAAO,UAAU,GACrB;gBAAO,OAAQ,IAAK,cAAc,UAAU,GAAI;kBAAO,KAAK,2BAA2B,GAAG,EAAqB;AAClH,UADgB;AAEjB;cACH;AAED;;UAAK,iCAAiC,YAClC;WAAI;iBAEF;eACA;iBAGF;AALE;;gBAKO,OAAO,KAAK,KAAK,0BAA0B,UAClD,GAEA;gBAAO,EAAE,QACV;AAEJ,QANU;AAQX;;UAAK,uBAAuB,UAAU,IAElC;;WAAI,YAAY,GAChB;gBAAS,OAAO,KAAK,OAAO,UAAS,GACnC;gBAAO,EAAE,WAAW,MAAM,EAAE,cAC7B;AACJ,QAHU;AAKX;;UAAK,4BAA4B,UAAU,YAAW,oBAAoB,UAGtE;;gBAAS,UAAU,KACnB;WAAI,aAAe,KACnB;WAAI,gBAAgB,KAAK,qBAEzB;;UAAG,OAAO,KAAK,gCAAiC,4BAA4B,OAAO,GACnF,SAAS,UAAU,GACf;iBAAQ,kBAAmB,KAAK,8BAA+B,eAClE;AAGD;;WAAI,oBACF;WAAE,KAAK,YAAY,UAAS,QAC1B;eAAI,WAAW,QAAQ,eAAe,UAAS,GAC7C;oBAAO,KAAK,2BAA2B,GAAG,OAC3C;AACD,YAHa;eAGT,cAAc,EAAE,KAAK,QACzB;eAAI,mBAAmB,SAAS,OAChC;4BAAiB,OAAO,QAAQ,KAAK,OACrC;eAAI,iBAAiB,iBAClB,OAAO,MACP,QAAQ,iBACX;aAAE,KAAK,aAAa,UAAS,KAC3B;4BAAe,OAAO,MAAM,KAC5B;4BAAe,OAAO,MAAM,OACxB,IAAI,OAAO,MAAM,UAAS,GAC1B;sBAAO,EACR;AAFD,gBAEG,KAEN;AACF;AACF;AApBD,cAqBE;WAAE,KACA,eACA,UAAS,MACP;eAAI,iBAAiB,SAAS,OAC9B;0BAAe,OAAO,QAAQ,KAAK,KACnC;eAAI,eAAe,eAChB,OAAO,MACP,QAAQ,iBACX;aAAE,KAAK,YAAY,UAAS,QAC1B;0BAAa,OAAO,MAAM,KAAK,OAC/B;0BACG,OAAO,MACP,KACC,KAAK,2BAA2B,MAAM,OAE3C;AACF;AAEJ;AACF;AAEH;;UAAK,2BAA4B,YAC7B;UACC,OAAO,KAAK,gCAAiC,4BAA4B,OACzE,GAAG,SAAS,YACX;YAAG,MACH;aAAI,cAEJ;;aAAI,iBAAiB,EACrB;aAAI,eAAe,KAAK,WAAW,MACjC;0BAAe,KAAK,QACpB;0BAAe,KACf;yBACD;AAJD,gBAKE;0BAAe,KAAK,QACpB;0BAAe,KACf;yBACD;AACD;cAAK,0BACH,eAAe,KAAK,WAAW,YAC/B,CAAC,aACD,GAAG,OAAO,KAAK,gCAAiC,wBAEnD;AAGH;;SAAE,KAAK,gCAAiC,gBAAgB,OAAO,GAAG,iBAAiB,UACjF,OAEA;aAAI,eAAe,EAAE,MACrB;aAAI,aAAa,aAAa,KAC9B;aAAI,QAAQ,GAAG,OAAO,KAAK,gCAAiC,gBAC5D;eACG,UAAU,gBACV,KAAK,8BACR;WAAE,KAAK,gCAAiC,4BAA4B,OAAO,KACzE,WAKF;;cAAK,0BACH,YACA,EAAE,KAAK,gCAAiC,4BAA4B,OAAO,KAAK,WAC9E,MACF,MAAM,OAAO,KAAK,gCAAiC,wBAEtD;AACF;AAED;;SAAI,eAEF;;YAEA;;WAAI,uBAAuB,GAAG,OAC5B,KAAK,gCAGP;;4BAAqB,UAAU,MAE/B;;WAAI,cAAc,qBAAU,QACzB;WAAE,KAAM,CAAC,KAAK,UAAU,KAAK,QAAQ,UAAU,MACxC;aAAE,KAAM,MAAM,UAAU,KACpB;iBAAI,QACP;AACJ;AACN;AAED;;WAAI,uBAAuB,8BAAU,QAC/B;aAAI,QACJ;WAAE,KAAM,KAAK,UAAU,UAAU,KAC7B;eAAI,IAAI,OACJ;mBAAM,KACT;AACD;eAAI,QACP;AACD;wBACA;wBACA;cACA;WAAE,KAAM,OAAO,UAAU,KACrB;eAAI,QACP;AACN;AAED;;WAAI,mBAAmB,EAEnB,cACA,YACE;gBAAO,KACR;AAJH,UAKE,MACA,yBAGA,gBACA,YACE;gBAAO,KACR;AAJH,UAKE,MACA,2BAGA,mBACA,YACE;qBAAY,0BACL,qBAAqB,UAAS,GACjC;kBAAO,EACR;AAEJ,UAJG,CADK;AAHX,UASE,MACA,8BAGA,qBACA,YACE;qBAAY,4BACL,qBAAqB,UAAS,GACjC;kBAAO,EACR;AAEJ,UAJG,CADK;AAHX,UASE,MACA,+BAED,CACC,4BACA,EAAE,QAAS,aAAa,OACxB,MACA,0BAED,CACC,8BACA,EAAE,QAAS,aAAa,QACxB,MACA,4BAED,CACC,yBACA,EAAE,QAAS,sBAAsB,OACjC,MACA,0BAEF,CACE,wBACA,EAAE,QAAS,sBAAsB,QACjC,MACA,2BAGA,6BACA,UAAS,MACP;YACG,OAAO,MACP,KACC,KAAK,YACD,8BAGR;cACD;AAXH,UAYE,KAAK,gBAKT;;WAAI,CAAC,KAAK,UACR;0BAAiB,MACf,sBACA,UAAS,MACP;gBAAK,eAAe,CAAC,KACrB;cACG,OAAO,MACP,KACC,KAAK,eAAe,uBAExB;gBAAK,OACN;AAVmB,YAWpB,YACE;oBAAS,KAAK,KAAK,OAAO,UAAS,GACjC;oBAAO,EACR;AACF,YAHQ;AAZW,YAkBvB;AAED;;wBAAiB,QAAQ,UAAS,MAAM,OACtC;aAAI,mBAAmB,KACvB;aAAI,KAAK,IACP;gBAAK,OAAO,MACT,OAAO,KACP,KAAK,KAAK,IACV,KAAK,QACL;AAJH;YAKG,GAAG,SAAS,UAAS,GACpB;8BACA;gBAAG,MACJ;AACJ;AACF;AAbD,UAgBA;;WAAI,eAAe,GAAG,OAAO,KAAK,gCAElC;;WAAI,CAAC,aAAa,SAChB;sBAAa,UAAU,UACvB;sBACG,OAAO,UACP,QAAQ,0BAA0B,MAClC,KAAK,SAAS,kBACd,GAAG,SAAS,UAAS,GACpB;0BAAe,IAChB;AANH,YAOG,OAAO,KACP,QAAQ,cACX;sBACG,OAAO,UACP,QAAQ,0BAA0B,MAClC,KAAK,SAAS,oBACd,GAAG,SAAS,UAAS,GACpB;0BAAe,IAChB;AANH,YAOG,OAAO,KACP,QAAQ,eACX;sBACG,OAAO,UACP,QAAQ,0BAA0B,MAClC,KAAK,SAAS,kBACd,GAAG,SAAS,UAAS,GACpB;8BAAmB,KACpB;AANH,YAOG,OAAO,KACP,QAAQ,gBACX;sBACG,OAAO,UACP,QAAQ,0BAA0B,MAClC,KAAK,SAAS,iBACd,GAAG,SAAS,UAAS,GACpB;8BAAmB,CAAC,KACrB;AANH,YAOG,OAAO,KACP,QAAQ,kBAEX;;aAAI,CAAC,KAAK,UACR;wBACG,OAAO,UACP,QAAQ,0BAA0B,MAClC,KAAK,SAAS,4BACd,KAAK,MAAM,qCACX,GAAG,SAAS,UAAS,GACpB;eAAE,KAAK,KAAK,qBACb;AAPH,cAQG,OAAO,KACP,QAAQ,oBACZ;AAED;;sBACG,OAAO,UACP,QAAQ,0BAA0B,MAClC,KAAK,SACN;AAJF;UAKG,GAAG,SAAS,UAAS,GACnB;mBAAQ,WAAW,OAAO,MAAM,KAAK,aACvC;AAPH,YAQG,OAAO,KACP,QAAQ,eACZ;AAED;;SAAE,KAAK,gCAAiC,WAAW,GACjD,0BACE,SAAS,UAAS,GAClB;aAAI,eAAe,EAAE,MACrB;cAAK,oBAEA,MAAM,KACN,OAAO,UAAS,GACf;kBAAO,EAAE,SACV;AAJH,YAKG,IAAI,UAAS,GACZ;eAAI,EAAE,SAAS,GACb;iBAAI,EAAE,MAAM,OAAO,EAAE,EAAE,SAAS,MAAM,KACpC;;uBAEE;wBAAO,IAAI,OACT,MAAM,EAAE,OAAO,GAAG,EAAE,SAAS,KAAK,KAIvC;AANG;AAOJ;iBAAI,EAAE,MAAM,KACV;mBAAI,qBAAqB,WAAW,EAAE,OACtC;mBAAI,qBAAqB,GACvB;;yBAEE;0BAEH;AAHG;AAIL;AACF;AACD;;mBAEE;oBAAO,IAAI,OAAO,GAErB;AAHG;AAKT;AAnCD,UAsCF;;SAAE,KAAK,gCAAiC,gBAAgB,GACtD,YACE,SAAS,UAAS,GAClB;cAAK,kBAAkB,CAAC,KACxB;cACA;cAAK,OACN;AAJD,UAOF;;SAAE,KAAK,gCAAiC,wBAAwB,GAC9D,YACE,SAAS,UAAS,GAElB;;aAAI,UAAU,KAAK,6BACjB;kBAAO,KAAK,4BACb;AAFD,gBAGE;gBAAK,4BAA4B,UAAU,KAC5C;AAED;;cAAK,OACN;AATD,UAYF;;SAAE,KAAK,gCAAiC,4BAA4B,OAAO,GACzE,YACE,SAAS,UAAS,GAClB;cAAK,iCAAiC,CAAC,KACvC;6BACE,mBACA,KAAK,UAAU,iBACf,KAAK,UAER;AAPD,UASH;AAED;;SAAI,2BAA2B,MAC7B;oBAAa,KACd;AAFD,YAGE;WAAI,cAAc,cAAc,YAC9B;sBAAa,WACd;AACF;AAGD;;AACA;6BAAwB,MAAM,OAAO,UAAS,GAAG,GAC/C;cAAO,EAAE,YACV;AAFY,QAGb;UAAK,mBAAmB,MAAM,OAAO,UAAS,GAAG,GAC/C;WACE,EAAE,WACF,OAAO,KAAK,oBAAoB,EAAE,aAAa,aAE/C;yBAAgB,KAChB;gBACD;AACD;cACD;AACD,MAVa;UAUR,mBAAmB,MAAM,OAAO,UAAS,GAAG,GAC/C;cACE,gBAAgB,EAAE,WAAW,aAC7B,gBAAgB,EAAE,WAErB;AACD,MANa;UAMR,aAAa,MAAM,IAAI,UAAS,GAAG,GACtC;SAAE,SAAS,gBAAgB,EAC3B;SAAE,SAAS,gBAAgB,EAC3B;SAAE,KACF;cACD;AAED,MAPa;;0BAOQ,KAAK,OAAO,KAEjC;;oBAAe,KACf;UAAK,SAAS,QAAQ,UAAS,GAAG,GAChC;YAAK,gBAAgB,EAAE,cACvB;SAAE,gBAAgB,SAAS,KAAK,UAAS,GACvC;gBAAO,EACR;AACD,QAHgB;gCAIhB;SAAE,YACH;AAEC;;SACE;WAAI,WAAW,QAAS,eACtB;aAAI,qBAAqB,GAAG,OAC1B,KAAK,gCAGP;;YAAG,OACD,KAAK,gCAAiC,+BACpC,UAAW,UAAU,KAAM,QAAQ,cAAc,UAAU,OAAQ,QAAQ,QAAQ,SACvF;AACA;4BAAmB,UAAU,MAE3B;;iBAAQ,cAAc,SAAS,QAAQ,UAAS,MAAM,OAClD;AACA;eAAI,mBAAmB,KACvB;eAAI,EAAE,WAAY,KAAK,KACpB;kBAAK,GAAG,MAAK,KAAK,OACpB;AAFD,kBAGE;kBAAK,OAAO,MACT,OAAO,KACP,KAAK,KAAK,IACV,KAAK,QAAQ,KACb,GAAG,SAAS,UAAS,GACpB;gCAAiB,MACjB;kBAAG,MACJ;AACJ;AACF;AAfH,YAiBF;;YAAG,OAAQ,KAAK,gCAAiC,+BAA+B,MAAO,WAExF;AACF;AAhCD,OAgCE,OAAO,KACP;eAAQ,IACT;AAED;;UAAK,+BAA+B,YACnC;WAAI;AACH,aAoHS,2CAAiB,GACtB;kBAAO,CAAC,EAAE,gBAAgB,MAAM,EAAE,gBAAgB,OAAM,MAAM,EACjE;AAED;;AACA;AAEA;;AAzHA;;AACA;aAAI,eAAe,OACjB,EAAE,IAAI,WAAW,0BAA0B,KAAK,gCAChD,UAAS,GACP;AACA;kBACE,EAAE,YAAY,iBAAiB,KAC/B,EAAE,eAAe,UAEpB;AAIH,UAZiB;;aAYb,iBAAiB,OAAO,YAAY,UAAS,GAC/C;kBACE,EAAE,YAAY,EAAE,aAAa,KAC7B,EAAE,wBAEL;AAED,UAPmB;;AASnB;;WAAE,KAAK,CAAC,YAAY,eAAe,UAAS,MAC1C;aAAE,KAAK,MAAM,KAAmC;AAElD;;aAAI,iBAAiB,SACjB,IAAI,WAAW,0BAA0B,UAAS,GAAG,GACrD;oBAAS,kBAAkB,GAAG,QAAQ,QACpC;iBAAI,UAEJ;;eAAE,KAAK,QAAQ,UAAS,KACtB;iBAAE,iBAAiB,GAAG,OACtB;mBAAI,SAAS,IACX,EAAE,MAAM,+BACR,YACE;wBACD;AAEH,gBANW;mBAOR,MAAM,CAAC,GAAG,+BAA+B,IACzC,OAAO,EACV;iBAAE,KAAK,QAAQ,UAAS,GACtB;sBAAK,KAAK,MAAM,IACjB;AAED;;mBAAI,OAAO,OAAO,SAClB;mBAAI,SAAS,OAAO,MAAM,UAAS,GAAG,GACpC;wBAAO,IAAI,CAAC,IAAI,SAAS,IAC1B;AAED,gBAJW;;AAMX;;mBAAI,OAAO,SACT;2BACA;mBAAE,WACH;AACF;AACF;AAED;;aAAE,uBACF;eAAI,EAAE,QAAQ,UACZ;iBAAI,WAAW,SACX,IAAI,WAAW,OAAO,UAAS,IAC/B;sBAAO,KAAK,2BAA2B,IAAI,GAC5C;AAFD,iBAGA,UAAS,GACP;sBAAO,KACR;AAEF,cARY;AASb;+BAAkB,GAAG,QAAQ,CAC3B,GAAG,MAAM,UACT,GAAG,MAAM,OACT,GAAG,MAAM,MAAM,SAAS,IAAI,IAC5B,GAAG,MAAM,MAAM,SAAS,OACxB,GAAG,MAAM,MAAM,SAAS,MACxB,GAAG,MAAM,MAAM,SAAS,IAAI,IAC5B,GAAG,MAAM,MAAM,SAAS,IAE3B;AAnBD,kBAoBE;iBAAI,EAAE,QAAQ,QACZ;mBAAI,WAAW,SACX,IAAI,WAAW,OAAO,UAAS,IAC/B;qBACE;uBAAI,SAAS,KAAK,2BAA2B,IAC7C;AACA;qDACE,IACA,GACA,KAAK,aAER;AARD,mBAQE,OAAO,KACP;qDAAkC,IAAI,GACvC;AACD;wBAAO,KAAK,2BAA2B,IACxC;AAbD,mBAcA,UAAS,GACP;wBAAO,KAAK,kBAAkB,OAC/B;AAEH,gBAnBa;AAoBb;mBAAI,OAAO,UAAU,GAAI;AACrB;wBACH;AACD;iCAAkB,GAAG,QAAQ,CAAC,GAAG,KAClC;AACF;AACD;kBACD;AAlFD,aAmFA,UAAS,GACP;kBAAO,EAAE,QAAQ,YAAY,EAAE,QAChC;AAGH,UAzFmB;;UAiGjB,GAAG,OAAO,KAAK,gCAAiC,gBAChD,GAAG,OAAO,KAAK,gCAAiC,kBAAkB,QAClE,QAAQ,UAAS,GAGjB;;AAEA;;eAAI,EAAE,SACJ;AACD;AACD;aAAE,UAAU,MAEZ;;eAAI,cACF,CAAC,CAAC,QAAQ,MAAM,EAAE,QAAQ,KAAK,8BAA8B,SAC7D,CAAC,CAAC,eAAe,WAAW,QAC5B,kBACW,IAAI,UAAS,GAAG,GACzB;oBAAO,CACL,CACE,gBAAgB,IAChB,EAAE,sBACF,EAAE,QACA,KAAK,8BACL,EAIP;AAGH,YAdE,CAJe;;eAkBb,aAAa,QACf;qCACG,OAAO,CAAC,CAAC,CAAC,cAAc,WAAW,SACnC,oBACc,IAAI,UAAS,GAAG,GAC3B;sBAAO,CACL,CACE,gBAAgB,IAChB,EAAE,sBACF,EAAE,QACA,KAAK,6BACL,EAIP;AAEN,cAbK,CAHS;AAkBf;;eAAI,WAAW,EAAE,UAAU,MAAM,KAEjC;;oBACG,QACA,OAAO,MACP,QAAQ,YAAY,UAAS,GAC5B;oBAAO,EAAE,GAAG,MACb;AALH,cAMG,MAAM,gBAAgB,UAAS,GAC9B;oBAAO,EAAE,GAAG,KAAK,CAAC,IAAI,eACvB;AAEH;;oBACG,UAAU,KACV,KAAK,UAAS,GACb;oBACD;AAJH,cAKG,QACA,OAAO,KACP,KAAK,UAAS,GAAG,GAAG,GACnB;oBAAO,EACR;AATH,cAUG,KAAK,SAAS,UAAS,GAAG,GAAG,GAC5B;iBAAI,EAAE,MAAM,WAAW,OACvB;iBAAI,KAAK,GACP;sBACD;AACD;oBACD;AAhBH,cAiBG,KAAK,QAAQ,KACb,GAAG,SAAS,UAAS,GACpB;iBAAI,EAAE,IACJ;iBAAE,GACH;AACF;AACJ;AAED;;UAAC,GAAG,OAAO,KAAK,gCAAiC,YAAY,QAAQ,UAAS,GAC5E;aAAE,UAAU,MACZ;eAAI,aAAa,UAAU,MAAM,MAE7B,CAAC,CAAC,QAAQ,MAAM,EAAE,QAAQ,KAAK,0BAA0B,SACzD,oBACa,IAAI,UAAS,GAAG,GAC3B;oBAAO,CACL,CACE,gBAAgB,IAChB,EAAE,sBACF,EAAE,QAAQ,KAAK,0BAA0B,EAG9C;AAIL,YAZI,CAHF,CADa;;oBAgBN,QAAQ,OAAO,MAAM,MAAM,gBAAgB,UAAS,GAC3D;oBAAO,EAAE,GAAG,KAAK,CAAC,IAAI,eACvB;AAED;;oBACG,UAAU,KACV,KAAK,UAAS,GACb;oBACD;AAJH,cAKG,QACA,OAAO,KACP,KAAK,UAAS,GAAG,GAAG,GACnB;oBAAO,EACR;AATH,cAUG,KAAK,SAAS,UAAS,GAAG,GAAG,GAC5B;iBAAI,KAAK,GACP;sBACD;AACD;oBACD;AAfH,cAgBG,KAAK,QAAQ,KACb,GAAG,SAAS,UAAS,GACpB;iBAAI,EAAE,IACJ;iBAAE,GACH;AACF;AACJ;AAED;;WAAE,KAAK,gCAAiC,mBAAmB,GAAG,SAAS,UAAS,GAC9E;eAAI,KAAK,UAAU,kBACjB;kBAAK,UAAU,iBAAiB,MAC9B,KAAK,UAAU,iBAAiB,QAElC;kBAAK,OACL;kBACD;AACD;aAAE,MAAM,YACT;AAED;;WAAE,KAAK,gCAAiC,sBAAsB,GAAG,SAAS,UAAS,GACjF;eAAI,KAAK,UAAU,gBACjB;wBAAW,yBAAyB,KAAK,UAAU,gBACjD,SACA,MACA,WAAW,yBACT,KAAK,UAAU,gBACf,SACC,QAGL;kBAAK,SAAS,QAAQ,UAAS,aAC7B;2BAAY,cAAc,yBACxB,aACA,KAAK,UAER;AACD;kBAAK,OACL;kBACD;AACD;aAAE,MAAM,YACT;AAED;;UAAC,GAAG,OAAO,KAAK,gCAAiC,aAAa,QAAQ,UAAS,GAC7E;aAAE,UAAU,MACZ;eAAI,aAAa,UAAU,MAAM,MAE7B,CAAC,CAAC,QAAQ,MAAM,EAAE,QAAQ,KAAK,0BAA0B,SACzD,oBACa,IAAI,UAAS,GAAG,GAC3B;oBAAO,CACL,CACE,EAAE,UACF,EAAE,sBACF,EAAE,QAAQ,KAAK,0BAA0B,EAG9C;AAIL,YAZI,CAHF,CADa;;oBAgBN,QAAQ,OAAO,MAAM,MAAM,gBAAgB,UAAS,GAC3D;oBAAO,EAAE,GAAG,KAAK,CAAC,IAAI,eACvB;AACD;oBACG,UAAU,KACV,KAAK,UAAS,GACb;oBACD;AAJH,cAKG,QACA,OAAO,KACP,KAAK,UAAS,GAAG,GAAG,GACnB;oBAAO,EACR;AATH,cAUG,KAAK,SAAS,UAAS,GAAG,GAAG,GAC5B;iBAAI,KAAK,GACP;sBACD;AACD;oBACD;AAfH,cAgBG,KAAK,QAAQ,KACb,GAAG,SAAS,UAAS,GACpB;iBAAI,EAAE,IACJ;iBAAE,GACH;AACF;AACJ;AACF;AACD;AAEF;;SAAI,YACF;AAKA;;;;;WAAI,mBAAmB,YACrB;aAAI,gBAAgB,WAEpB;;aAAI,SAAS,iBAAiB,cAAc,OAAO,SAAS,GAC1D;sBAAW,yCACT,OACA,IAAI,UAAS,GAAG,GAChB;;sBAEE;qBACA;uBACA;sBACA;sBAEH;AANG;AAQJ,YAZsC;;sBAY3B,MAAM,QAAQ,UAAS,GAChC;eAAE,2BAA2B,EAAE,GAAG,MAAM,cACxC;eAAE,yBAAyB,QAAQ,UAAS,GAAG,GAC7C;mBAAI,IAAI,WAAW,yBAAyB,QAC1C;qBAAI,EAAE,KAAK,WAAW,yBAAyB,GAAG,YAChD;8BAAW,yBAAyB,GAAG,UAAU,KAC/C,WAAW,yBAAyB,GACtC;8BAAW,yBAAyB,GAAG,YACxC;AACF;AACD;AACD;AACF;AAED;;sBAAW,yBAAyB,QAAQ,UAAS,GACnD;iBACE,EAAE,WAAW,WAAW,MAAM,UAC9B,EAAE,WAAW,KACb,EAAE,YAAY,IAEd;iBAAE,UACH;AACF;AACF;AACF;AAED;;SAAE,KAAK,KAAK,uCAAuC,UACjD,UACA,KAGA;;aAAI,EAAE,WAAY,WACd;sBAAW,SACd;AAED;;aACE,CAAC,SAAS,cACV,EAAE,IAAI,WAAW,0BAA0B,SAAS,aAEpD;eAAI,YACJ;qBAAU,OACV;aAAE,OAAO,WAAW,0BACpB;gBAAK,6BAA8B,KACnC;aAAE,KAAK,WAAW,OAAO,UAAS,MAChC;+CAAkC,MAAM,KAAK,SAAS,OAAO,MAC9D;AACF;AACF;AAED;;YAEA;;AACD;AAED;;SAAI,KAAK,cAAc,SAAS,sBAC9B;WAAI,oBAAoB,cACrB,IAAI,UAAS,GAAG,GACf;gBAAO,CAAC,GAAG,IACZ;AAHgB,UAIhB,KAAK,UAAS,GAAG,GAChB;gBAAO,EAAE,KAAK,EACf;AAEH;;YAAK,IAAI,IAAI,GAAG,IAAI,aAAa,SAAS,sBAAsB,KAC9D;cAAK,oBAAoB,aAAa,GAAG,MAC1C;AAED;;wBACE,eACC,aAAa,SAAS,wBACvB,6BACA,aAAa,IAAI,GAAG,KACpB,0BACA,uBAEH;AAGD;;UAAK,MAAM,QAAQ,UAAS,GAAG,GAC7B;YAAK,SACH,KAAK,gBAAgB,KAAK,MAAM,EAAE,QAAQ,UAC1C,UAAU,KAAK,EAClB;AAED;;UAAK,SAAS,QAAQ,UAAS,GAAG,GAChC;SAAE,YAAY,QAAQ,gBAAgB,EACvC;AACD;AAEA;;UACD;AAED;;YAAS,uBAAuB,SAAS,OACvC;SAAI,OACF;SAAE,SAAS,KAAK,UAChB;UACG,OAAO,SACP,UAAU,KACV,QAAQ,uBAAuB,SAAS,QACxC,QAAQ,sBAAsB,SAAS,OACvC,QAAQ,WAAW,SACvB;AARD,YASE;WAAI,eAAe,EAAE,SAAS,KAC9B;8BAAuB,SAAS,gBAAgB,QAAQ,SACxD;cAAO,gBAAgB,QAAQ,GAAG,aAAa,GAChD;AACF;AAED;;YAAS,qBAAqB,SAAS,OACrC;QAAG,MACH;SAAI,gBAAgB,EAAE,SAAS,QAC/B;SAAI,cAAc,QAEhB;;WAAI,UAAU,SAAS,EAAE,SAAS,KAClC;WAAI,WAAW,MACf;WAAI,eAAe,EAAE,SAAS,KAC9B;WAAI,kBAAkB,uBAEtB;;WAEA;;WAAI,UACF;aAAI,EAAE,WAAY,WACd;2BAAgB,uBAAU,GACtB;oBAAO,SACV;AACJ;AAJD,gBAKI;2BAAgB,uBAAS,GACrB;iBAAI,MAAM,EACV;iBAAI,EAAE,WAAY,MAAM,OACxB;oBACD;AACN;AACF;AAZD,cAaI;yBAAgB,uBAAS,GACvB;kBACD;AACH;AAGF;;UACG,OAAO,cAAc,IACrB,OAAO,SACP,UAAU,MACV,KAAK,UAAS,GAAG,GAChB;gBAAO,gBACL,cAAc,EAAE,WAChB,cAAc,EAEjB;AAEH;;AAEA;;SAAE,eACC,KAAK,0BACL,OAAO,YACN;gBAAO,SAAS,EAAE,MAAM,KAAK,iBAC9B;AAJH,UAKG,KAAK,YACJ;gCAAuB,MACxB;AACJ;AACF;AAGD;;YAAS,cAAc,MAAM,OAAO,MAClC;SAAI,WAAW,GAAG,OAClB;SAAI,gBACF,OAAO,KAAK,UAAU,aAAa,KAAK,UAAU,KAGpD;;SAAI,cAAc,MAChB;YAAK,SAAS,MACf;AAFD,YAGE;WAAI,OAAO,YAAY,OAAO,KAAK,OAAO,iBAC1C;WAAI,UAAU,MAAM,SAAS,KAAK,WAC7B,SAAS,KACd;WAAI,UAAU,MACZ;aAAI,mBACD,OAAO,KACP,SAAS,QAAQ,KACjB,GAAG,SAAS,UAAS,GACpB;gCAAqB,MACtB;AALW,YAMX,KAAK,eAAe,YACpB,KAAK,kBACR;iBACG,OAAO,KACP,QAAQ,cAAc,MACtB,MAAM,eACV;AACF;AACD;SAAI,UAAU,MACZ;gBAAS,KAAK,SAAS,KACxB;AACF;AAED;;YAAS,qBAAqB,WAAW,SAAS,SAAS,WACzD;SAAI,QAAQ,UAAU,UACtB;SAAI,MAAM,WAAW,WACnB;aACA;eAAQ,UAAU,OAClB;aACG,UAAU,MACV,KAAK,SACL,QACA,OAAO,MACP,UAAU,MACV,KAAK,UAAS,GACb;gBACD;AARH,UASG,QACA,OAAO,MACP,KAAK,UAAS,WACb;0BAAiB,KAAK,UAAS,GAAG,GAChC;yBAAc,GAAG,GAClB;AACF,UAHQ;AAIZ;AAED;;SAAI,QAAQ,UAAU,UACtB;SAAI,MAAM,WAAW,WACnB;aACA;eAAQ,UAAU,OAClB;aACG,UAAU,MACV,KAAK,SACL,QACA,OAAO,MACP,UAAU,MACV,KAAK,UAAS,GACb;gBACD;AARH,UASG,QACA,OAAO,MACP,KAAK,UAAS,WACb;0BAAiB,KAAK,UAAS,GAAG,GAChC;AACA;yBAAc,GAAG,GAClB;AACF,UAJQ;AAKZ;AACF;AAED;;YAAS,uBAAuB,SAAS,SACvC;SAAI,YAAY,GAAG,OACnB;eAAU,UAAU,KACpB;SAAI,iBAAiB,QACrB;SAAI,aAAa,QAEjB;;SAAI,gBACA;AACA;AAEA;;WAAI,QAAQ,GAAG,UACX;mBAAU,OAAO,KACX,QAAQ,8BAA8B,MAAM,KAAM,SAC3D;AACD;iBAAU,OAAO,QAAQ,KAAK,YAAY,MAAM,iBAGhD;;iBACG,OAAO,UACP,QAAQ,qCAAqC,MAC7C,KAAK,QACL,GAAI,SAAS,UAAU,GACtB;cAAK,gBAAiB,QACvB;AAEN;AAnBD,YAoBI;iBAAU,OAAO,QAAQ,KAAK,YAAY,MAAM,iBAChD;iBACG,OAAO,UACP,QAAQ,qCAAqC,MAC7C,KAAK,QACL,GAAI,SAAS,UAAU,GACtB;cAAK,wBACN;AACN;AACD;eACG,OAAO,UACP,QAAQ,yBAAyB,MACjC,KAAK,QACL,KAAK,eAAe,SACpB,KAAK,eAAe,KAAK,gCAAiC,gBAAgB,OAC1E,KAAK,gBACT;AAED;;YAAS,4BAA4B,SAAS,SAC5C;SAAI,YAAY,GAAG,OACnB;SAAI,SAAS,CAAC,CAAC,QAAQ,KAAK,WAAW,YACvC;SAAI,QAAQ,IACV;cAAO,KAAK,CAAC,eACd;AACD;SAAI,QAAQ,IACV;cAAO,KAAK,CAAC,SACd;AACD;SAAI,UAAU,UAAU,UAAU,UAAU,KAC5C;aAAQ,QAAQ,OAChB;aAAQ,OACR;aACG,QAAQ,0BAA0B,MAClC,KAAK,UAAS,GACb;cAAO,EACR;AAJH,QAKG,KAAK,YAAY,UAAS,GACzB;cAAO,EAAE,KAAK,aACf;AAPH,QAQG,GAAG,SAAS,UAAS,GACpB;WAAI,EAAE,MAAM,GACV;aAAI,QAAQ,IACV;0BACE,KAAK,SAAS,QAAQ,QAAQ,SAAS,KAAK,IAG/C;AALD,gBAME;4BAAiB,KAAK,SAAS,QAAQ,QAAQ,SAAS,KACzD;AACD;cAAK,yBAA0B,KAC/B;aAAI,KAAK,kBACP;gBAAK,yBAA0B,KAChC;AACF;AACF;AACJ;AAED;;YAAS,wBAAyB,OAAO,QAAQ,UAAU,YACzD;AAUA;;;;;;;;;;SAAI,eACJ;SAAI,YAEJ;;kBAAa,UAAU,IAAK,OAAO,UAAU,GAAG,GAC5C;iBAAW,EAAE,MACb;WAAI,UACA;gBACH;AACD;WAAI,KAAK,EAAE,MACX;UAAG,UACH;cACH;AAED,MAVqB;;kBAUR,cAEb;;kBAAa,UAAU,OAAQ,WAAW,OAAO,UAAU,GACvD;cAAO,WAAW,MAAM,EAAE,QAAQ,MAAM,aAAa,WAAW,MAAM,EAAE,QAAQ,MACnF;AAED,MAJqB;;SAIjB,QACA;oBAAa,QAAQ,EAAE,OAAQ,aAAa,OAC/C;AAED;;kBAAa,UAAU,IAAK,aAAa,OAAO,UAAU,GACtD;WAAI,KAAK,EAAE,MACX;UAAG,SAAS,UAAU,WAAW,MAAM,EAAE,QACzC;UAAG,SAAS,UAAU,WAAW,MAAM,EAAE,QACzC;cACH;AAED,MAPqB;;YAQrB;AAEF;;YAAS,yBAAyB,SAAS,SACzC;SAAI,YAAY,GAAG,OACtB;SAAI,SAAS,CACR,QAAQ,UAAU,IACb,EAAE,SAAU,QAAQ,MAAM,CAAE,QAAQ,IAAG,GAAE,iBAAiB,CAAC,kBAAkB,KAC9E,CAAC,QAAQ,KAAK,SAAS,QAGhC;;SAAI,QAAQ,UAAU,KAAK,QAAQ,MAAM,GACrC;cAAO,MAAO,gBAAgB,YAAa;cAAK,wBAAyB,QAAY;AACxF,QADgB;AAGd;;SAAI,UAAU,UAAU,UAAU,UAAU,KAC5C;aAAQ,QAAQ,OAChB;aAAQ,OACR;aACG,QAAQ,gCAAgC,MACxC,QAAQ,eACT;AAHF;MAIG,KAAK,UAAS,GACb;cAAO,EACR;AANH,QAOG,KAAK,YAAY,UAAS,GACzB;cAAO,EAAE,MAAM,CAAC,EAAE,WAAY,EAAE,MAAM,aACvC;AATH,QAUG,GAAG,SAAS,UAAS,GACpB;WAAI,EAAE,WAAY,EAAE,KAChB;WAAE,GAAG,KACR;AAFD,cAGI;aAAI,EAAE,MAAM,GACV;eAAI,QAAQ,IACV;8BACE,KAAK,SAAS,QAAQ,QAAQ,SAAS,KAAK,IAG/C;AALD,kBAME;4BAAe,KAAK,SAAS,QAAQ,QAAQ,SAAS,KACvD;AACD;AACA;gBAAK,yBAA0B,KAChC;AACJ;AAEF;AACD;aAAQ,KAAM,UAAU,GAAE,GACxB;WAAI,EAAE,UAAU,GACZ;YAAG,OAAQ,MAAM,QAAS,eAAe,OAAO,QAAS,EAAE,IAC9D;AACF;AACJ;AAED;;QAAK,2BAA2B,UAAS,WACvC;eACG,UAAU,MACV,OAAO,UAAS,GAAG,GAClB;cAAO,cACR;AAJH,QAKG,KAAK,UAAS,GAAG,GAChB;qBAAc,GAAG,GAClB;AACJ;AAED;;QAAK,kBAAkB,UAAU,eAAe,WAC9C;SAAI,KAAK,YAER;;mBAAY,aAAa,KAEzB;;WAAI;gBAIK;eACA;eAAM;AAFN,QAFJ;gBAQI;eAAM;AADN;gBAKA;eACA;eAAM;AAFN;gBAMA;eACA;eAKR;AAPQ,SAjBK;;WAwBT,eACF;WAAE,KAAM,eAAe,UAAU,GAC7B;mBAAQ,GAAG,KAAM,EACpB;AACF;AAED;;WAAI,iBAAyB,IAAI,UAAS,GAAG,GACzC;aAAI;kBAEO,EACP;iBAAM;AADN,UAFW;kBAMJ,iBACL;iBAAI,EAAE,cAAc,YAChB;mBACE;qBAAI,KAAK,oBAAoB,EAAE,UAC7B;AACA;AACA;0BAAO,CAAC,EACT;AACD;wBAAO,CACL,CAAC,KAAK,SAAS,KAAK,gBAAgB,EAAE,UAAU,WAChD,EAEH;AAVD,iBAUE,OAAO,KACL;wBAAO,CAAC,CACX;AACJ;AAdD,oBAeI;sBAAO,CAAC,EACX;AACF;AACD;qBACA;qBAAU;AApBV;kBAuBQ,YAAY,IAAI,EAAE,SAC1B;iBAAM;AADN;kBAIQ,aAAa,IAAI,EAAE,UAC3B;iBAIH;AALG;;aAKC,eACH;aAAE,KAAM,eAAe,UAAU,IAC7B;sBAAS,KAAM,GAAG,UAAW,GAChC;AACF;AACD;gBAED;AAEH,QAhDmB;;4BAiDjB,KAAK,YACL,SACA,MAEA;AAEH;;AACF;AAED;;QAAK,qBAAqB,UAAU,eAAe,SAAS,eAAe,kBACzE;eAAU,WAAW,KACrB;SAAI,SAEF;;WAAI;gBAII;eAAM,cAAU,GAAI;oBAAS,IAAK,EAAE,MAAM,GAAG,MAAO,MAAM,UAAU,IAAK;oBAAO,wBAAwB,CAAK;AAAlF,cAAoF,KAAY;AAC3H;eAAM;AAFN,QAFJ;gBAQI;eACA;eAAM;AAFN;gBAMA;eACA;eAMT;AARS,SAbM;;WAqBX,CAAC,KAAK,SACP;iBAAQ;kBAEF;iBAGN;AAJM;;iBAIE;kBAEF;iBACA;iBAER;AAJQ;AAMR;;WAAI,eACF;WAAE,KAAM,eAAe,UAAU,GAC7B;mBAAQ,GAAG,KAAM,EACpB;AACF;AAED;;WAAI,OAEJ;;SAAE,KAAM,KAAK,UAAU,UAAU,SAC3B;aAAI,WAAW,kBAAU,GAAG,eACpB;eAAI;oBAEK,CAAC,EAAE,YAAY,eAAc,IACpC;uBAAU;AADV,YAFa;oBAMN,iBACL;mBAAI,iBAAiB,gBAAgB,EAAE,iBAEvC;;sBAAO,CACL,eAAe,WACf,eAAe,aACf,eAAe,cACf,eAEH;AACD;uBACA;uBAAU;AAXV;oBAcO,EAAE,SAId;AAJK;;eAID,CAAC,KAAK,UACP;sBAAS;sBACA,EACP;uBAAQ,gBAAS,GACf;qBACI;0BACE,oBAAoB,EAAE,WACtB,OACA,oBAAoB,EAAE,aACtB,OACA,oBAAoB,EAAE,SACtB,QACA,oBAAoB,EAAE,SAG3B;AAXD,mBAWE,OAAO,GACL;0BACH;AACF;AAEH;AAlBE;sBAkBO;sBACA,EACP;uBAAQ,gBAAS,GACf;qBACI;0BACE,oBAAoB,EAAE,WACtB,OACA,oBAAoB,EAAE,aACtB,OACA,oBAAoB,EAAE,SACtB,QACA,oBAAoB,EAAE,SAG3B;AAXD,mBAWE,OAAO,GACL;0BACH;AACF;AAGL;AAnBI;AAoBJ;eAAI,eACF;eAAE,KAAM,eAAe,UAAU,IAC7B;wBAAS,KAAM,GAAG,UAAW,GAChC;AACF;AAED;;kBACL;AAEH;;aAAI,CAAC,eACH;gBAAK,KAAM,SAAU,SACtB;AAED;;aAAI,CAAC,kBACD;aAAE,KAAM,QAAQ,aAAa,UAAU,aACrC;kBAAK,KAAM,SAAU,aACtB;AACJ;AACJ;AAGD;;4BACE,SACA,SACA,MAEH;AACF;AAED;;AACA;YAAS,sBAAsB,YAAY,YACzC;SAAI,uBACF;WAAI,mBAAmB,OAAO,KAAK,UAAU,UAAS,GAClD;gBAAO,CAAC,EACT;AAFkB,UAEhB;WACH,mBAAmB,KAAK,cAAc,SAAS,KAAK,SAAS;WAC7D,gBACE,WAAW,MAAM,SAAS,aAAa,KAAK,MAElD;;WAAI,sBAAsB,OAAO,KAAK,UAAU,UAAS,GACnD;gBAAO,CAAC,EAAE,aAAa,EAAE,iBAAiB,aAAa,EAAE,eAC1D;AAFmB,UAMxB;;WAAI,mBAAmB,OAAO,KAAK,OAAO,UAAS,GAC7C;gBAAO,EAAE,gBAAgB,CAAE,EAC5B;AAFgB,UAKnB;;AAQA;;;;;;;WAAI,IACF,2BACA,KAAK,SAAS,SACd,0DACA,iBACA,iBAAiB,oBAAoB,2CACrC,KAAK,MAAM,SACX,uDACA,aACA,cAAc,iBAAiB,2CAC/B,KAAK,MAAM,SACX,cACC,KAAK,WAAW,UAAU,WAC3B,0CACA,aAGF;;UAAG,OAAO,uBAAuB,KAClC;AACF;AAED;;YAAS,YAAY,WAAW,MAE9B;;SAAI,MACA;mBAAY,GAAG,OAEf;;WAAI,cACF,KAAK,eAAe,CAAC,KAAK,UACtB,UACA,KAAK,UAAU,kBAAkB,KAAK,YAAY,UAExD;;YAAK,gBAAgB,KAAK,KAAK,UAAU,SAAS,IAElD;;iBACG,KAAK,KAAK,KAAK,OAAO,aAAa,KAAK,UAAU,QAClD,KAAK,SAAS,QACd,QAAQ,mBAAmB,UAAS,GACnC;gBAAO,EACR;AALH,UAMG,QAAQ,mBAAmB,UAAS,GACnC;gBAAO,EAAE,cACV;AARH,UASG,KAAK,aAAa,UAAS,GAC1B;gBAAO,eAAe,EAAE,IAAI,MAAM,EAAE,IACrC;AAXH,UAYG,MAAM,QAAQ,UAAS,GACtB;gBAAO,WACR;AAdH,UAeG,MAAM,WAAW,UAAS,GACzB;gBAAO,aACR;AAjBH,UAkBG,MAAM,WAAW,UAAS,GACzB;aAAI,EAAE,WAAW,OACjB;gBACD;AArBH,UAsBG,GAAG,SAAS,mBACZ,GAAG,aAAa,aAChB,GAAG,YAAY,cACf,KAAK,eAAe,OAAO,GAAG,aAEhC;AACN;AAED;;YAAS,eAAe,WAAW,aACjC;SAAI,kBAAkB,GAAG,OAEzB;;SAAI,wBAAwB,mCACZ,qBAAqB,IAAI,UAAS,GAC5C;cAAO,EAAE,OAAO,CACjB;AAFD,OADY,GAIZ,CAAC,CAAC,MAAM,GAEZ;;SAAI,YAAY,cACd;mBAAY,UAAU,OAAO,CAC3B,CAAC,YAAY,YAAY,cAAc,IACvC,CACE,gBACA,YAAY,SAAS,SAAS,YAAY,cAI/C;AAED;;SAAI,WACC,cACS,OAAO,UAAS,GACxB;cAAO,EAAE,MACV;AAFD,SAGA,UAAS,GACP;cAAO,EACR;AANH,OADS,KASN,cACS,OAAO,UAAS,GACxB;cAAO,EAAE,MACV;AAFD,SAGA,UAAS,GACP;cAAO,EACR;AAIL,MAVE;;SAUE,iBAAiB,CAAC,GAEtB;;2BAAsB,IAAI,UAAS,GACjC;WAAI,QAAQ,EACZ;WAAI;oBAEF;kBACA;qBAAY,eAAe,SAAS,KAAK,SAAS,IAAI,KACtD;mBAAU,CAAC,eAAe,SAAS,EAAE,MAAM,KAAK,SAAS,IAAI,KAC7D;eAAM,EACN;cAAK,QAEP;AAPE;sBAOa,UAAU,EACzB;cACD;AAED,MAdY;;SAcR,aAAa,iBAAiB,eAClC;iBAAY,gBAAgB,aAC5B;SAAI,QAAQ,gBAAgB,UAAU,QAAQ,KAC9C;WAAM,QAAQ,OACd;WAAM,OAEN;;WACG,QAAQ,WAAW,MACnB,QAAQ,yBAAyB,UAAS,GACzC;cAAO,YAAY,eAAe,CAAC,EACpC;AAJH,QAKG,QAAQ,sBAAsB,UAAS,GACtC;cAAO,EACR;AAPH,QAQG,KAAK,KAAK,UAAS,GAClB;cAAO,CAAC,EAAE,MACN,GAAG,IAAI,MAAM,YAAY,aAAa,GAAG,YAAY,aAAa,KAClE,GAAG,IAAI,MAAM,YAAY,GAAG,YAAY,aAC7C;AAZH,QAaG,MAAM,QAAQ,UAAS,GAAG,GACzB;cAAO,EAAE,MACL,KAAK,UAAU,YAAY,EAAE,QAC7B,YAAY,cACV,UAAU,YAAY,cAAc,MACpC,cAAc,aAAa,EAClC;AAnBH,QAoBG,MAAM,mBAAmB,UAAS,GAAG,GACpC;cAAO,UAAU,SAAS,IAAI,UAC/B;AAtBH,QAuBG,MAAM,WAAW,UAAS,GACzB;WAAI,YAAY,WAAW,OAC3B;cACD;AACJ;AAED;;YAAS,4BAA4B,QACnC;AAEA;;SAAI,UAAU,4BACZ;WAAI,SAAS,EAAE,MACb,GACA,WAAW,yBAAyB,QAAQ,eAG9C;;;iBAEE;kBAAS,IAAI,QAAQ,UAAS,GAC5B;kBAAO,2BACL,QACA,WAAW,yBAAyB,QAAQ,eAC/C;AAEJ,UANU;AADP;AAPJ,YAeE;;iBACU,EAAE,MACR,GACA,WAAW,yBAAyB,QAEtC;gBAEH;AANG;AAOL;AAED;;QAAK,2BAA2B,UAAU,QACxC;SAAI,WAEJ;;MAAC,UAAU,QAAQ,UAAS,KAC1B;UAAG,OAAO,KAAK,gCAAiC,MAAM,UAAU,MAAM,UAAU,KAAK,KAAK,SAAS,UAAS,GAAG,GAC7G;aAAI,EAAE,MAAM,QACV;sBAAW,EACX;kBACD;AACD;gBACD;AACD;UACG,OAAO,KAAK,gCAAiC,MAAM,WACnD,KAAK,YAAY,WACrB;AAED;;SAAI,QACF;WAAI,eAAe,4BAEnB;;WAAI,eAAe,GAAG,MACnB,UACA,OAAO,aAAa,WACpB,MAAM,aACT;YAAK,YAAY,QACjB;YAAK,YAAY,YAAY,UAAS,GACpC;gBAAO,aACL,WAAW,yBAAyB,QAAQ,aAC1C,KAAK,2BAA2B,GAGrC;AACD;YAAK,YAAY,kBACf,WAAW,yBAAyB,QACvC;AAjBD,YAkBE;YAAK,YAAY,KACjB;YAAK,YAAY,SAAS,YACxB;gBACD;AACD;YAAK,YAAY,kBAClB;AACD;AACA;UACA;UAAK,OACL;QAAG,MACJ;AAED;;QAAK,wBAAwB,YAE3B;;UAAK,WAAW,UAAU,sBAE1B;;SAAI,SAEJ;;SAAI,KAAK,gBACL;YAAK,WACA,OAAO,KACP,KAAK,aAAa,iBAAiB,SAAS,KAC5C,QAAQ,oBAAoB,MAC5B,OAAO,QACP,KAAK,KAAK,gBACV,MAAM,eACX;iBACH;AAED;;SAAI,KAAK,aACL;YAAK,WACA,OAAO,KACP,KAAK,aAAa,iBAAiB,SAAS,KAC5C,QAAQ,oBAAoB,MAC5B,OAAO,QACP,KAAK,KAAK,YAAY,YACtB,MAAM,eACX;iBAEA;;SAAE,KAAK,KAAK,YAAY,UAAU,UAChC,OACA,KAEA;cAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,kBAAkB,SAAS,KAC7C,OAAO,QACP,KAEH;;eAAM,KAAM,KAAK,WACd,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,iBAAiB,SAAS,KAC5C,OAAO,QACP,KAAK,MAAM,KACX,KAAK,MAAM,MACX,KAAK,MAAM,MACX,KAAK,MAAM,MACX,QAAQ,UAEX;;mBACD;AACJ;AAGD;;SAAI,KAAK,UAAU,gBAEf;;AACA;AAGF;;;YAAK,WACF,OAAO,KACP,KAAK,aAAa,iBAAiB,SAAS,KAC5C,QAAQ,oBAAoB,MAC5B,OAAO,QACP,KAAK,YAAY,KAAK,UAAU,gBAChC,MAAM,eACT;iBAEA;;WAAI,KAAK,UAAU,eACjB;aAAI,gBACF,WAAW,yBAAyB,KAAK,UAAU,gBACjD,WACG,SACD,8BACA,GAAG,OACT;aAAI,QACF,WAAW,yBAAyB,KAAK,UAAU,gBAIrD;;WAAE,KAAK,EAAE,MAAM,+BAA+B,UAAS,OACrD;eAAI,IAAI,MAAM,OACd;gBAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,kBAAkB,SAAS,KAC7C,OAAO,QACP,KAAK,cACR;gBAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,iBAAiB,SAAS,KAC5C,OAAO,UACP,KAAK,MAAM,KACX,KAAK,MAAM,MACX,KAAK,KAAK,KACV,QAAQ,UAAU,MAClB,MAAM,QAAQ,KAAK,UAAU,YAEhC;;qBACD;AAED;;cAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,kBAAkB,SAAS,KAC7C,OAAO,QACP,KACH;cAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,iBAAiB,SAAS,KAC5C,OAAO,UACP,KAAK,MAAM,KACX,KAAK,MAAM,MACX,KAAK,KAAK,KACV,QAAQ,UAAU,MAClB,MAAM,QAET;;mBACD;AApDD,cAqDE;WAAE,KAAK,KAAK,UAAU,gBAAgB,MAAM,QAAQ,UAClD,OACA,KAEA;gBAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,kBAAkB,SAAS,KAC7C,OAAO,QACP,KACH;gBAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,iBAAiB,SAAS,KAC5C,OAAO,UACP,KAAK,MAAM,KACX,KAAK,MAAM,MACX,KAAK,KAAK,KACV,QAAQ,UAAU,MAClB,MAAM,QAAQ,KAAK,UAAU,YAEhC;;qBACD;AACF;AACF;AAED;;SAAI,KAAK,YAAY,OACnB;YAAK,WACF,OAAO,KACP,KAAK,aAAa,iBAAiB,SAAS,KAC5C,QAAQ,oBAAoB,MAC5B,OAAO,QACP,KAAK,YAAY,KAAK,YAAY,OAClC,MAAM,eACT;iBAEA;;WAAI,eAAe,4BAA4B,KAAK,YACpD;WAAI,eAAe,GAAG,MACnB,UACA,OAAO,aAAa,WACpB,MAAM,aAET;;SAAE,KAAK,KAAK,YAAY,gBAAgB,MAAM,QAAQ,UACpD,OACA,KAEA;cAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,kBAAkB,SAAS,KAC7C,OAAO,QACP,KAEH;;cAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,iBAAiB,SAAS,KAC5C,OAAO,QACP,KAAK,aAAa,mBAClB,KAAK,KAAK,KAAK,OAAO,aAAa,QAAQ,KAAK,MAChD,QAAQ,UAAU,MAClB,MAAM,QAET;;mBACD;AACF;AAED;;SAAI,KAAK,UAAU,eACjB;YAAK,WACF,OAAO,KACP,KAAK,aAAa,iBAAiB,SAAS,KAC5C,QAAQ,oBAAoB,MAC5B,OAAO,QACP,KAAK,cAAc,KAAK,UAAU,eAClC,MAAM,eACT;iBAEA;;WAAI,gBACF,WAAW,yBAAyB,KAAK,UAAU,eACjD,WACG,SACD,8BACA,GAAG,OACT;WAAI,QACF,WAAW,yBAAyB,KAAK,UAAU,eAIrD;;SAAE,KAAK,EAAE,MAAM,+BAA+B,UAAS,OACrD;aAAI,IAAI,MAAM,OACd;cAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,kBAAkB,SAAS,KAC7C,OAAO,QACP,KAAK,cACR;cAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,iBAAiB,SAAS,KAC5C,OAAO,UACP,KAAK,MAAM,KACX,KAAK,MAAM,MACX,KAAK,KAAK,KACV,QAAQ,UAAU,MAClB,MAAM,QAAQ,SACd,MAAM,WAAW,KAAK,UAAU,WAEnC;;mBACD;AAED;;YAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,kBAAkB,SAAS,KAC7C,OAAO,QACP,KACH;YAAK,WACF,OAAO,KACP,QAAQ,oBAAoB,MAC5B,KAAK,aAAa,iBAAiB,SAAS,KAC5C,OAAO,UACP,KAAK,MAAM,KACX,KAAK,MAAM,MACX,KAAK,KAAK,KACV,QAAQ,UAAU,MAClB,MAAM,QAAQ,SACd,MAAM,WAET;;iBACD;AACF;AAED;;YAAS,yBAAyB,SAAS,QACzC;SAAI,QACF;WAAI,KAAK,KAAK,aAAa,uBAAuB,KAClD;WAAI,WAAW,KAAK,YACjB,UAAU,QACV,OAAO,kBACP,KAAK,MACR;WAAI,WAAW,IAAI,QAAQ,UAAU,UAAS,MAC5C;aAAI,QAAQ,KAAK,2BAA2B,MAC5C;gBAAO,SAAS,kBAAkB,WACnC;AAHY,UAGV,KAAK,UAAS,GAAG,GAClB;gBAAO,IAAI,KAAK,IACjB;AACD;WAAI,WAAW,OAAO,QAAQ,UAAS,GACrC;gBAAO,IACR;AACD,QAHa;WAGT,WAAW,OAAO,SAAS,OAE/B;;WAAI,UACF;kBACG,OAAO,QACP,KAAK,UAAU,MACf,KAAK,cACR;kBACG,OAAO,QACP,KAAK,UAAU,KAAK,WAAW,OAAO,SAAS,MAAM,KACrD,KAAK,cACT;AAED;;SAAE,KAAK,QAAQ,UAAS,OAAO,OAC7B;kBACG,OAAO,QACP,KACC,UACA,KAAK,CAAC,IAAI,QAAQ,YAAY,MAAM,OAAO,SAAS,KAErD,KAAK,cAAc,KAAK,UAAU,YACtC;AACD;AAEA;;cACD;AACD;YACD;AAED;;QAAK,2BAA0B,UAAU,QACvC;SAAI,WAEJ;;MAAC,WAAW,QAAQ,UAAS,KAC3B;UAAG,OAAO,KAAK,gCAAiC,MAAM,UAAU,MAAM,UAAU,KAAK,KAAK,SAAS,UAAS,GAAG,GAC7G;aAAI,EAAE,MAAM,QACV;sBAAW,EACX;kBACD;AACD;gBACD;AACD;UACG,OAAO,KAAK,gCAAiC,MAAI,WACjD,KAAK,cAAc,WACvB;AAED;;QACG,OAAO,KAAK,gCAAiC,mBAC7C,MAAM,WAAW,YAAY,SAAS,SAAS,UAC/C,QAAQ,cAAc,OACtB,QAAQ,eAEX;;UAAK,UAAU,gBACf;SAAI,QACF;WAAI,QAAQ,WAAW,yBAAyB,QAChD;YAAK,UAAU,mBAAmB,GAAG,MAClC,SACA,OAAO,CAAC,GAAG,+BAA+B,IAC1C,MAAM,CAAC,MACV;YAAK,UAAU,aAAa,UAAS,GACnC;aAAI,KAAK,iBACP;kBACD;AACD;gBAAO,KAAK,UAAU,iBAAiB,MACxC;AACF;AAZD,YAaE;YAAK,UAAU,aACf;YAAK,UAAU,mBAChB;AAED;;UACA;UAAK,OACL;QAAG,MACJ;AAED;;QAAK,8BAA8B,UAAU,QAE1C;;SAAI,WAEL;;0BAAqB,kBAAkB,MACvC;yBAAqB,mBAAmB,MAExC;;UAAK,YAAY,UAAU,kBAE3B;;UAAK,SAAS,QAAQ,UAAS,aAC7B;cAAO,YACP;cAAO,YACR;AAED;;MACE,CAAC,cAAa,QACd,CAAC,kBAAiB,OAClB,QAAQ,UAAS,KACjB;UAAG,OAAO,KAAK,gCAAiC,IAAI,IAAI,IAAI,KAAK,UAAU,MAAM,UAAU,KAAK,KAAK,SAAS,UAAS,GAAG,GACxH;aAAI,EAAE,MAAM,QACV;sBAAW,EACX;kBACD;AACD;gBACD;AACD;UAAG,OAAO,KAAK,gCAAiC,IAAI,KAAK,UAAU,IAAI,KACpE,KAAK,YAAY,WACrB;AAED;;QACG,OAAO,KAAK,gCAAiC,sBAC7C,MAAM,WAAW,YAAY,SAAS,SAAS,UAC/C,QAAQ,cAAc,OACtB,QAAQ,eAEX;;SAAI;AAGF;;YAAK,UAAU,gBAAgB,KAC7B,GAAG,MACA,SACA,MAAM,CACL,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,YAED,OAAO,EAAE,MAAM,gCAClB,UAAS,MAAM,KACb;gBAAO,KACL,WAAW,yBAAyB,QAAQ,SAE/C;AAnB0B,UAF7B,CAwBA;;AAEA;;YAAK,UAAU,iBACf;YAAK,UAAU,gBACf;YAAK,SAAS,QAAQ,UAAS,aAC7B;qBAAY,cAAc,yBAAyB,aACpD;AAED;;WAAI,SAEJ;;SAAE,KAAK,KAAK,OAAO,UAAS,GAC1B;aAAI,MAAM,KAAK,2BAA2B,KAAK,MAAM,EAAE,SAAS,QAAQ;aACtE,MAAM,KAAK,2BAA2B,KAAK,MAAM,EAAE,SAAS,QAE9D;;aAAI,OAAO,mBAAmB,OAAO,iBACnC;kBAAO;gBAEL;gBACA;oBACE,KAAK,MAAM,EAAE,QAAQ,KACrB,OACA,MACA,UACA,KAAK,MAAM,EAAE,QAAQ,KACrB,OACA,MAGL;AAZG;AAaL;AACD;UACG,OAAO,KAAK,gCAAiC,2BAA2B,OACxE,MAAM,WAGT;;mBAAY,YACV,QACA,KACA,KACA,KAAK,gCAAiC,kBAAkB;YAGtD;YAAG;AADH,UAGF,WAAW,yBAAyB,QAAQ,WAE/C;AAvED,YAwEE;YAAK,UAAU,cACf;YAAK,UAAU,iBACf;YAAK,UAAU,gBACf;YAAK,UAAU,uBACf;YAAK,UAAU,kBAChB;AAED;;UACA;UAAK,OACL;QAAG,MACJ;AAGD;;QAAK,+BAA+B,UAAU,QAE5C;;SAAI,WACJ;QACG,OAAO,KAAK,gCAAiC,sBAC7C,MAAM,WAET;;UAAK,YAAY,UAAU,kBAE3B;;MACE,CAAC,cAAa,QACd,CAAC,kBAAiB,OAClB,QAAQ,UAAS,KAEjB;;UAAG,OAAO,KAAK,gCAAiC,IAAI,IAAI,IAAI,KAAK,UAAU,MAAM,UAAU,KAAK,KAAK,SAAS,UAAS,GAAG,GACxH;aAAI,EAAE,MAAM,QACV;sBAAW,EACX;kBACD;AACD;gBACD;AACD;UACG,OAAO,KAAK,gCAAiC,IAAI,KAAK,UAAU,IAAI,KACpE,KAAK,YAAY,WACrB;AAED;;UAAK,SAAS,QAAQ,UAAS,aAC7B;cAAO,YACP;mBAAY,uBAAuB,SACjC,+BAA+B,aAElC;AAED;;UAAK,UAAU,gBAEf;;SAAI,QAEF;;WAAI,UAAU,4BACZ;aAAI,SAAS;aACX,QACF;WAAE,KAAK,2BAA2B,SAAS,UAAS,OAAO,KACzD;kBAAO,KACP;iBAAM,KACP;AACD;cAAK,UAAU,cAAc,GAAG,MAC7B,UACA,OAAO,QACP,MACJ;AAXD,cAYE;aAAI,WAAW,yBAAyB,QAAQ,gBAC9C;gBAAK,UAAU,cAAc,WAAW,yBACtC,QACA,eAAe,WAAW,yBAAyB,SACtD;AAJD,gBAKE;gBAAK,UAAU,cAAc,GAAG,MAC7B,UACA,MACH;eAAI,iBAAiB,EAAE,MAAM,KAAK,UAAU,YAC5C;0BAAe,KAEf;;gBAAK,UAAU,YAAY,OACzB,EAAE,MAAM,6BAEV;gBAAK,UAAU,YAAY,MAE3B;;eAAI,WAAW,yBAAyB,QAAQ,qBAC9C;kBAAK,UAAU,gBAAgB,KAC7B,KAAK,UAAU,aACf,UAAS,MAAM,KACb;mBAAI,OAAO,iBACT;wBAAO,KACR;AACD;sBAAO,KACL,WAAW,yBAAyB,QAClC,oBAGL;AAEH,cAb6B;AAc9B;AACF;AACF;AACD;YAAK,UAAU,iBACf;YAAK,UAAU,kBACb,WAAW,yBAAyB,QAEtC;;AACA;AAEA;;AACI;YAAK,UAAU,uBAAuB,gCACpC,QACA,WAAW,yBAAyB,QAAQ,WAC5C,KAAK,UAEX;AACE;AACF;AAEA;;4BACE,kBACA,KAAK,UAAU,iBACf,KAAK,UAEP;2BACE,mBACA,KAAK,UAAU,iBACf,KAAK,UAER;AA3ED,YA4EE;YAAK,UAAU,cACf;YAAK,UAAU,iBACf;YAAK,UAAU,uBACf;YAAK,UAAU,kBACf;4BAAqB,kBAAkB,MACvC;2BAAoB,mBAAmB,MACxC;AACD;SAAI,KAAK,sBACL;YACH;AAED;;UACA;UAAK,OACL;QAAG,MACJ;AAED;;QAAK,oBAAoB,YACvB;UAAK,SAAS,QAAQ,UAAS,GAC7B;SAAE,YAAY,KAAK,mBAAmB,CAAC,EACxC;AACD;UAAK,MAAM,QAAQ,UAAS,GAC1B;SAAE,YAAY,KAAK,mBAAmB,CAAC,EACxC;AACF;AAED;;QAAK,SAAS,UAAS,YAAY,aACjC;SAAI,mBAEJ;;oBAAe,IAAI,CAAC,MAAM,aAAa,UAAS,KAC9C;gBAAS,MACL,OAAO,YAAY,UAAS,GAC5B;gBAAO,EAAE,QACV;AAFD,WAGA,UAAS,GACP;gBAAO,EACR;AAEJ,QARQ;AAUT,MAXa;;SAWT,WAAW,GAAG,QAChB;YAAK,MAAM,QAAQ,UAAS,GAC1B;WAAE,gBACH;AAED;;SAAE,KAAK,KAAK,OAAO,UAAS,GAC1B;aAAI,cAAc,KAAK,WAAW,IAAI,UAAS,GAC7C;kBAAO,EAAE,UACV;AAED,UAJgB;;aAIZ,WACF;gBAAK,MAAM,EAAE,QAAQ,gBACrB;gBAAK,MAAM,EAAE,QAAQ,gBACtB;AACF;AACF;AAfD,YAgBE;YAAK,MAAM,QAAQ,UAAS,GAC1B;WAAE,gBACH;AACF;AAED;;UAAK,SAAS,QAAQ,UAAS,GAC5B;SAAE,eACJ;AAED;;UAAK,MAAM,QAAQ,UAAS,GAC1B;WAAI,cAAc,KAAK,WAAW,IAAI,UAAS,QAC7C;gBACE,OAAO,KAAK,EAAE,SACZ,KAAK,EAAE,0BAA0B,UAAS,MAC1C;kBAAO,OAAO,KACf;AAEJ,UAJG;AAMJ,QATgB;;mBASJ,aAAa,EAEzB;;WAAI,aAAa,EAAE,cACjB;WAAE,eACF;4BACD;AAED;;WAAI,EAAE,cACJ;WAAE,OAAO,gBACV;AACF;AAED;;SAAI,oBAAoB,CAAC,aACvB;WAAI,KAAK,iBACP;cACD;AAED;;YAAK,OACN;AACF;AAED;;QAAK,WAAW,YACd;YAAO,KAAK,cAAc,UAC3B;AAED;;QAAK,kBAAkB,UAAU,gBAAgB,SAC/C;SAAI,qBACF;WAAI,eAAe,QACjB;aAAI,cAAc,GAAG,OACnB;qBAAY,UAAW,OACvB;aAAI,SACF;uBAAY,OAAQ,OAAO,KAC5B;AAFD,gBAGE;uBAAY,OAAQ,OAAO,KAC5B;AACD;qBAAY,MAAM,WACpB;0BACD;AAVD,cAWE;YAAG,OAAO,qBAAqB,MAAM,WACtC;AACF;AACF;AAED;;QAAK,0BAA0B,UAAU,GAEnC;;SAAI,OAAY,EAAE,QAClB;SAEA;;SAAI,QAAQ,KACR;WAAI,SAAS,EAAE,OAAO,IAAI,EAAE,OAC5B;WAAI,SAAS,EAAE,OAAO,IAAI,EAAE,OAC5B;WAAI,OAAS,OAAQ,KAAK,KAAM,SAAS,SAAS,SAGlD;;WAAI,QAAQ,KAAK,KAAK,GAEtB;;WAAI,QAAQ,SAAS,KAAK,KAAM,CAAC,SAAS,UAAU,KAAK,KAAG,GAE5D;;WAAI,OAAO,GACP;iBAAQ,CACR;gBAAO,CACV;AAGD;;WAAI,KAAM,KAAK,IAAK,QAAM,SAAS;WAC/B,MAAM,KAAK,IAAK,QAAM,SAE1B;;WAAI,KAAM,KAAK,IAAK,QAAM,SAAS;WAC/B,MAAM,KAAK,IAAK,QAAM,SAE1B;;WAAI,IACJ;WAAI,EAAE,OAAO,KAAK,EAAE,OAAO,GACvB;cAAK,CAAC,IAAI,CACV;cAAK,CAAC,CAAC,KAAK,CACf;AAHD,cAII;cAAK,CAAC,CAAC,KAAK,CACZ;cAAK,CAAC,IAAI,CACb;AAGD;;cAAQ,MAAM,EAAE,OAAO,IAAI,MAAM,EAAE,OAAO,IACtC,SAAS,EAAE,OAAO,IAAE,GAAG,MAAM,OAAO,EAAE,OAAO,IAAE,GAAG,MAClD,QAAS,EAAE,OAAO,IAAE,GAAG,MAAM,OAAO,EAAE,OAAO,IAAE,GAAG,MAClD,OAAO,EAAE,OAAO,IAAI,MAAM,EAAE,OAEnC;AArCD,YAsCI;cAAQ,MAAM,EAAE,OAAO,IAAI,MAAM,EAAE,OAAO,IACtC,QAAQ,EAAE,OAAO,IAAI,MAAM,EAAE,OACpC;AAEA;;QAAG,OAAQ,MAAM,KAAM,KAG5B;AAEF;;QAAK,SAAS,UAAS,MAAM,UAC3B;UAAK,kBAEL;;SAAI,UACF;sBAAe,SAChB;AACD;UAAK,gBAGL;;SAAI,gBAAgB,mBAEpB;;SAAI,CAAC,MACH;WAAI,UAEJ;;sBAAe,MAAM,QAAQ,KAAK,MAAM,QACxC;6BAAsB,QAAQ,MAAM,QAAQ,QAAQ,MAEpD;;WAAI,WAIJ;;SAAE,KAAM,QAAQ,OAAO,UAAU,GAC/B;WAAE,OACF;aAAI,MAEJ;;aAAI,EAAE,SAAS,EAAE,QACb;iBAAS,KAAG,EAAE,SAAS,MAAM,EAChC;AAFD,gBAGI;iBAAS,KAAG,EAAE,SAAS,MAAM,EAChC;AACD;aAAI,OAAO,UACP;oBAAS,KAAK,KACjB;AAFD,gBAGI;oBAAS,OAAO,CACnB;AACF;AAED;;SAAE,KAAM,UAAU,UAAU,GAC1B;aAAI,EAAE,SAAS,GACX;eAAI,OAAO,KAAG,EAAE,SAChB;aAAE,KAAM,GAAG,UAAU,MAAM,OACvB;kBAAK,OAAO,CAAC,MAAM,QACtB;AACJ;AACF;AAED;;mBAAY,YAAY,UAAU,SAAS,KAAK,QAAQ,OAAO,UAAS,GACtE;gBAAO,EACR;AAGD,QALO;;AAMP;YAAK,QAAQ,OAAO,QAAQ,QAAQ,QACpC;YAAK,OAGL;;YACG,QAAQ,WAAW,UAAS,GAC3B;gBAAO,EACR;AAHH,UAIG,QAAQ,eAAe,UAAS,GAC/B;gBAAO,aAAa,KAAK,EAAE,aAC5B;AANH,UAOG,QAAQ,aAAa,UAAS,GAC7B;AACA;gBAAO,EAAE,aAAa,KACtB;AACD;AAGH;;YAAK,GAAG,aAAa,aAClB,GAAG,YAAY,cACf,OAAO,UAAS,GACf;gBAAO,EACR;AAJH,UAKG,KAAK,cAAc,UAAU,KAAK,aAErC;;6BAAsB,YACnB,UAAU,SACV,KAAK,QAAQ,OAAO,UAAS,GAC5B;gBAAO,EACR;AAEH,QANiB;;sBAMF,OACf;sBAAe,QAAQ,OAEvB;;gCAAyB,YACtB,UAAU,kBACV,aACS,SAAS,IAAI,UAAS,GAC5B;gBACD;AAFD,WAGA,UAAS,GACP;gBAAO,EACR;AAGL,QAXoB;;yBAWF,OAClB;yBACG,QACA,OAAO,KACP,KAAK,SAAS,iBACd,KAAK,aAAa,UAAS,GAC1B;gBAAO,eAAe,EAAE,IAAI,MAAM,EAAE,IACrC;AANH,UAOG,GAAG,SAAS,sBACZ,GAAG,aAAa,gBAChB,GAAG,YAAY,iBACf,KAAK,eAAe,OAAO,GAAG,aAEjC;;YAAK,mBAAmB,KAAK,6BAA6B,KAAK,eAAe,OAAO,KAErF;;WAAI,KAAK,YAAY,EAAG,WAAW,QAAQ,oBACzC;cAAK,2BAA4B,sBAAsB,IACxD;AAED;;WAAI,KAAK,kBACL;cAAK,mBAAmB,KAAK,gCAAgC,KAAK,kBAAkB,MACvF;AACD;YAAK,gBAAgB,KACtB;AA7GD,YA8GE;wBAAiB,KAAK,YAAY,UAClC;2BAAoB,KAAK,YAAY,UACrC;cAAO,KAAK,YAAY,UACxB;6BAAsB,eAAe,QAAQ,KAE9C;AAED;;oBAAe,KAAK,UAAS,GAC3B;mBAAY,MACb;AAED;;uBAAkB,KAAK,UAAS,GAC9B;sBAAe,MAChB;AAED;;UAAK,MAAM,WAAW,UAAS,GAC7B;cAAO,KAAK,IAAI,aAAa,EAAE,SAAS,aAAa,EACtD;AAEC;;SAAI,KAAK,wBACP;YAAK,KAAM,UAAU,GACjB;cAAK,uBAAwB,MAAM,GACtC;AACF;AAEH;;UAAK,MAAM,WAAW,UAAS,GAE7B;;WAAI,EAAE,OAAO,aAAa,EAAE,OAAO,aAAa,EAAE,WAChD;gBACD;AACD;cACD;AAID;;SAAI,CAAC,MACH;qCACE,kBAAkB,GAAG,SAAS,eAAe,GAE/C;;sBAAe,GAAG,QAAQ,YACxB;aAAI,QAAQ,eAEZ;;wBAAe,KAAK,aAAa,UAAS,GAExC;;kBACE,gBACC,EAAE,IAAI,KAAK,IACV,EAAE,eACF,KAAK,IAAI,MAAM,KAAK,EAAE,eAAe,EAAE,OAEzC,OACC,EAAE,IAAI,KAAK,IACV,EAAE,eACF,KAAK,IAAI,MAAM,KAAK,EAAE,eAAe,EAAE,OAI5C;AACD;2BAAkB,KAAK,aAAa,UAAS,GAC3C;kBACE,gBACC,EAAE,IAAI,KAAK,IACV,EAAE,eACF,KAAK,IAAI,MAAM,KAAK,EAAE,eAAe,EAAE,OAEzC,OACC,EAAE,IAAI,KAAK,IACV,EAAE,eACF,KAAK,IAAI,MAAM,KAAK,EAAE,eAAe,EAAE,OAI5C;AAED;;cAAK,KAAM,KACZ;AAGD;;sBAED;AA7CD,YA8CI;YAAK,KAAM,KACd;AACF;AAED;;YAAS,OACP;SAAI,QAAQ,eAEZ;;UACG,KAAK,MAAM,UAAS,GACnB;cAAQ,EAAE,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,MAAM,KAAK,IAAI,EACpD;AAHH,QAIG,KAAK,MAAM,UAAS,GACnB;cAAQ,EAAE,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,MAAM,KAAK,IAAI,EACpD;AAEH;;UACG,KAAK,MAAM,UAAS,GACnB;cAAO,EAAE,OACV;AAHH,QAIG,KAAK,MAAM,UAAS,GACnB;cAAO,EAAE,OACV;AANH,QAOG,KAAK,MAAM,UAAS,GACnB;cAAO,EAAE,OACV;AATH,QAUG,KAAK,MAAM,UAAS,GACnB;cAAO,EAAE,OACV;AACJ;AAED;;AACA;YAAS,qBAAqB,OAAO,OACnC;UAAK,IAAI,KAAK,OACZ;aAAM,GAAG,SACV;AAED;;UAAK,IAAI,KAAK,OACZ;aAAM,MAAM,GAAG,QACf;aAAM,MAAM,GAAG,QAChB;AACF;AAED;;QAAK,6BAA6B,UAAU,GAAG,IAAI,QACjD;SACI;WAAI,2BAA2B,KAAK,IAElC;;aAAI,MAAM,EAAE,0BAEV;;eAEA;;eAAI,KAAK,KAAK,yBAAyB,IAAI,UACvC;iBAAI,KAAK,KAAK,yBAAyB,IAAI,IAAK,GACnD;AAFD,kBAGI;iBAAI,EAAE,yBACT;AAED;;eAAI,EAAE,SAAS,IACb;iBAAI,EAAE,UAAU,GACd;sBACD;AAFD,oBAGE;mBAAI,QACA;qBAAI,CACJ;wBAAO,EAAE,MAAO,KAAK,kBACxB;AACF;AACF;AACD;kBACD;AACF;AACJ;AA1BD,OA2BA,OAAO,GACH;eAAQ,IAAK,mCAAmC,GAAG,GAAG,IACzD;AACD;YACD;AAED;;YAAS,kCAAkC,GAAG,IAAI,OAChD;AACA;SAAI,2BAA2B,KAAK,IAClC;SAAE,yBAAyB,MAC5B;AACF;AAGD;;QAAK,+BAA+B,UAAU,KAAI,GAChD;SAAI,2BAA2B,KAAK,MAChC;WAAI,WACJ;gBAAS,OACT;SAAE,OAAQ,KAAK,KAAK,0BACpB;AACH;AACF;AACC;YAAS,UAAU,GACf;SAAI,IAAI,IAAI,KAAK,KAAK,EAAE,SACxB;YAAO,IAAI,IAChB;AAED;;YAAS,WAAW,GAClB;AAIA;;;;SAAI,KAAK,UAAU,gBACjB;WAAI,IAAI,KAAK,2BAA2B,GAAG,KAAK,UAChD;WAAI,KAAK,UAAU,eACjB;aAAI,KAAK,iBACP;kBACD;AACD;AACD;AACD;cAAO,KAAK,UAAU,YACvB;AACD;YAAO,EAAE,cAAc,UAAU,EAAE,UAAU,QAC9C;AAED;;YAAS,aAAa,GACpB;SAAI,KAAK,UAAU,YACjB;cAAO,KAAK,UAAU,WACpB,KAAK,2BAA2B,GAAG,KAAK,UAAU,eAErD;AACD;YACD;AAED;;YAAS,cAAc,GAAG,MACxB;SAAI,EAAE,sBACJ;cAAO,KAAK,UAAU,YACvB;AACD;YACD;AAED;;YAAS,gBAAgB,GACvB;YACD;AAED;;YAAS,iBAAiB,GACxB;SAEA;;SAAI,CAAC,KAAK,UACR;aACE,gBACA,EAAE,SACF,0CACA,KAAK,aAAa,EAAE,KAAK,uBAE5B;AAPD,YAQE;aAAM,iBAAiB,EAAE,SAC1B;AAED;;OAAE,KACA,EAAE,MAAM,KAAK,6BAA6B,CACxC,KAAK,UAAU,gBACf,KAAK,YAAY,OACjB,KAAK,UAAU,iBAEjB,UAAS,KACP;WAAI,KACF;aAAI,OAAO,WAAW,0BACpB;eAAI,YAAY,KAAK,2BAA2B,GAEhD;;eAAI,WAAW,yBAAyB,KAAK,WAAW,QACtD;iBACE;2BAAY,uBACb;AAFD,eAEE,OAAO,KAAO,CACjB;AACD;eAAI,WACF;oBAAO,SAAS,MAAM,UAAU,YACjC;AACF;AACF;AACF;AAGH;;YACD;AAED;;YAAS,iBAAiB,GACxB;SAAI,MAAM,gBAAgB,oBAAoB,EAAE,UAChD;SAAI,aAAa,GACf;cACE,+CACA,oBAAoB,EAAE,WAEzB;AAED;;SAAI,YAAY,KAAK,2BACnB,GACA,KAAK,UAGP;;YACD;AAED;;YAAS,YAAY,GACnB;oBACE,MACA,MACA,CAAC,KAAK,WAAW,gBAAgB,WAAW,EAAE,IAC9C,iBAAiB,IACjB,KAEH;AAED;;YAAS,aAAa,GACpB;oBAAe,MAChB;AAED;;YAAS,YAAY,GACnB;oBACE,MACA,MACA,EAAE,OAAO,KAAK,QAAQ,EAAE,OAAO,IAC/B,iBAAiB,IACjB,KAEH;AAED;;YAAS,aAAa,GACpB;oBAAe,MAChB;AAED;;AAEA;;AAIA;;;;YAAS,iBAAiB,OACxB;SAAI,aAAa,EAAE,QAAQ,OAC3B;YACD;AAED;;YAAS,0BAA0B,UACjC;UAAK,IAAI,KAAK,UACZ;WAAI,MAAM,SACV;WAAI,IACJ;WAAI,IACJ;WAAI,EAAE,IAAI,KAAK,aACb;aAAI,SAAS,QAAQ,UAAS,GAC5B;eAAI,KAAK,EACT;eAAI,KAAK,EACV;AACD;aAAI,KAAK,IAAI,SACb;aAAI,KAAK,IAAI,SACd;AACF;AACF;AAED;;YAAS,iBAAiB,GAAG,WAC3B;UAAK,kBACL;OAAE,YACF;oCAA+B,KAAK,cAAc,EAAE,aAAa,KACjE;SAAI,CAAC,WACH;WAAI,MAAM,mBAAmB,QAAQ,EACrC;WAAI,OAAO,GACT;4BAAmB,OAAO,KAC3B;AACF;AACD;+BAA0B,CAC1B;YAAO,EAAE,SACV;AAED;;YAAS,eAAe,GAAG,YAEzB;;UAAK,kBACL;OAAE,YACF;oCAA+B,KAAK,cAAc,EAAE,aAAa,KACjE;wBAAmB,KAAK,EAExB;;SAAI,YACF;SAAE,SAAS,QAAQ,UAAS,GAC1B;WAAE,IAAI,EAAE,IAAI,CAAC,KAAK,WAAW,OAAO,EAAE,SACtC;WAAE,IAAI,EAAE,IAAI,CAAC,KAAK,WAAW,OAAO,EAAE,SACvC;AACF;AALD,YAME;SAAE,SAAS,QAAQ,UAAS,GAC1B;WAAE,IAAI,KAAK,QAAQ,OAAO,CAAC,KAAK,WAAW,OAAO,EAAE,SACpD;WAAE,IAAI,OAAO,KAAK,SAAS,CAAC,KAAK,WAAW,OAAO,EAAE,SACtD;AACF;AACF;AAED;;YAAS,oBAAoB,IAAI,SAAS,QACxC;SAAI,YAAY,GAAG,OAAO,KAAK,gCAAgC,IAC/D;SAAI,UAAU,SACV;AACH;AAED;;eAAU,UAAU,SACpB;eAAU,UAAU,SAEpB;;QAAG,OAAO,KAAK,gCAAkC,KAAK,aAAa,OAAO,MAAM,WAAW,SAAS,OAEpG;;SAAI,QACF;WAAI,OAAO,KAAK,UAChB;WAAI,SAAS,QAAQ,MAErB;;WAAI,oBAAoB,OAAO,SAAS,OAAO,MAAM,UAAU,MAAM,MAClE,IAAI,cACI,GAAG,IAAI,UAAS,GAAG,GACxB;gBAAO,OACR;AAIL,QANI,CADF,CADY;;eAQN,QAAQ,OAChB;eACG,KAAK,UAAS,GACb;gBAAO,iBAAiB,IACzB;AAHH,UAIG,KAAK,UAAS,GAAG,GAChB;aAAI,GACF;cACG,OAAO,MACP,OAAO,KAAK,gBACZ,QAAQ,gBAAgB,MACxB,MAAM,SAAS,YACd;oBAAO,KACR;AACJ;AACF;AAEH;;WAAI,KAAK,gCACP;aAAI,QAAQ,IAAI,QAAQ,UAAS,KAC/B;oBAAS,OACP,KACA,UAAS,GAAG,GACV;oBAAO,IACR;AAJI,cAOR;AAED,UAVU;;oBAUC,IAAI,QAAQ,UAAS,KAAK,WACnC;oBAAS,IAAI,KAAK,UAAS,GACzB;oBAAO,IAAI,IACZ;AACF,YAHQ;AAIV,UALU;AAOX;;WAAI,iBAAiB,OAAO,SAAS,UAAU,MAAM,YAC5C,IAAI,UAAS,GAAG,GACrB;gBAAO,CAAC,OAAO,IAAI,OACpB;AAGH,QALE,CADS;;YAMN,QAAQ,OACb;YACG,UAAU,MACV,KAAK,UAAS,GACb;gBACD;AAJH,UAKG,QACA,OAAO,MACP,KAAK,UAAS,GAAG,GAChB;gBAAO,KAAK,IACR,iBAAiB,IAAI,YACrB,KAAK,iCACH,sBAAsB,KAE7B;AAbH,UAcG,KAAK,UAAS,GAAG,GAChB;aAAI,KAAK,GACP;cACG,OAAO,MACP,OAAO,KAAK,gBACZ,QAAQ,gBAAgB,MACxB,MAAM,SAAS,YACd;oBAAO,KACR;AACJ;AACF;AACJ;AACF;AAED;;YAAS,qBAAqB,IAAI,SAAS,QAEzC;;SAAI,YAAY,GAAG,OAAO,KAAK,gCAAiC,IAEhE;;SAAI,UAAU,SACV;AACH;AAED;;eAAU,UAAU,OAEpB;;QAAG,OAAO,KAAK,gCAAkC,KAAK,aAAa,OAAO,MAAM,WAAW,SAAS,OAEpG;;SAAI;;AAyEF;AAxEA,WAwES,qBAAK,SAAS,GACrB;gBAAO,UAAS,GAAG,GACjB;sBAAW,KAAK,IAAI,OAAO,KAC3B;eACG,UAAU,eACV,OAAO,UAAS,GACf;oBAAO,EAAE,OAAO,SAAS,KAAK,EAAE,OAAO,SACxC;AAJH,cAKG,aACA,MAAM,WACV;AACF;AACF;;WApFK,SAAS,QAAQ,MAErB;;WAAI,MAAM,UAAU,OAEpB;;WAAI,QAAQ,GAAG,OACZ,QACA,QAAQ,MACR,cAAc,GAAG,YACjB,OAEH;;WAAI,cAAc;WAChB,QAAQ;WACR,SAAS;WACT,cAAc,KAAK,IAAI,OAAO,SAAS,eAAe;WACtD,cAAc,cAEhB;;WAAI,OAAO,KAAK,UAAU;WACxB,YAEF;;WAAI,aAAa,IACd,OAAO,KACP,KACC,aACA,eAAe,QAAQ,IAAI,OAAO,SAAS,eAAe,KAE3D,OAAO,QACP,KAAK,eAAe,UACpB,KAAK,aAAa,WAClB,KAEH;;aAAM,IACH,KAAK,SAAS,OACd,KAAK,UAAU,SAAS,aACxB,OAAO,KACP,KACC,aACA,eAAe,QAAQ,IAAI,MAAM,CAAC,SAAS,eAAe,IAG9D;;WACG,OAAO,KACP,UAAU,QACV,KAAK,MAAM,QACX,QACA,OAAO,QACP,MAAM,QAAQ,UAAS,GACtB;gBAAO,KAAK,OAAO,EACpB;AARH,UASG,MAAM,UAAU,UAAS,GACxB;gBAAO,KAAK,OAAO,EACpB;AAXH,UAYG,KACC,KACA,GAAG,IAAI,MAAM,YAAY,aAAa,YAAY,cAEnD,GAAG,aAAa,KAAK,KAAK,OAC1B,GAAG,YAAY,KAAK,GAEvB;;WACG,OAAO,KACP,KAAK,SAAS,SACd,UAAU,QACV,KAAK,MAAM,QACX,QACA,OAAO,QACP,KAAK,KAAK,GAAG,IAAI,QAAQ,OAAO,cAChC,MAAM,QAAQ,UAAS,GACtB;gBAAO,KAAK,EAAE,OACf;AAVH,UAWG,MAAM,WAET;AAcH;AAED;;YAAS,gCAAgC,IAAI,KAAK,SAAS,eAEzD;;SAAI,YAAY,gBAAgB,QAAQ,QAAQ,KAChD;SAAI,aACJ;UAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,GAC5B;kBAAW,KACX;YAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,GAC5B;oBAAW,GAAG,KACf;AACF;AAGD;;OAAE,KAAK,WAAW,UAAS,MACzB;AACA;kBACE,QAAQ,KAAK,2BAA2B,KAAK,MAAM,KAAK,SAAS,MACjE,QAAQ,KAAK,2BAA2B,KAAK,MAAM,KAAK,SAAS,SACpE;AACD;AAGA;;;SAAI,sBAAsB,KAAK,UAAS,GAAG,GACzC;WAAI,KAAK,MAAM,GACb;kBAAS,KAAK,UAAS,IACrB;kBAAO,KACR;AACF,UAHQ;AAIT;cAAO,EAAE,MAAM,KAChB;AACD,MARe;SAQX,CAAC,UACH;kBACA;YAAK,IAAI,GAAG,IAAI,MAAM,GAAG,KAAK,GAC5B;oBAAW,GACZ;AACF;AAED;;AAEA;;WAAM,WAEN;;UAAK,IAAI,GAAG,IAAI,KAAK,KAAK,GACxB;YAAK,IAAI,GAAG,IAAI,KAAK,KAAK,GACxB;oBAAW,GAAG,MAAM,WAAW,GAC/B;oBAAW,GAAG,KAAK,WAAW,GAC/B;AACF;AAED;;YACD;AAED;;QAAK,gCAAgC,UAAU,GAAG,GAC5C;OAAE,uBACF;OAAE,WACF;SAAI,EAAE,WAAW,UACf;SAAE,WACF;SAAE,mBAAmB,OACjB,QAAQ,WAAW,OAAO,UAAS,IACnC;gBAAO,KAAK,2BAA2B,IACxC;AAEH,QAJE,CADiB;SAKjB,eAAe,EAAE,eACpB;AARD,YASE;WAAI,UAAU,GACZ;WAAE,WACF;WAAE,iBAAiB,EAAE,MAAM,EAC3B;aAAI,EAAE,mBAAmB,EAAE,iBACvB;aAAE,eAAe,KACpB;AACD;WAAE,eAAe,EAAE,eACnB;WAAE,aACH;AACF;AACD;YACH;AAED;;QAAK,+BAA+B,UAAU,GAC1C;SACA;SAAI,EAAE,YACJ;gBAAS,EACV;AAFD,YAGE;WAAI,EAAE,WAAW,UACf;kBAAS,EAAE,eAEX;;aAAI,EAAE,aAAa,4BACjB;eAAI,cAAc,qBAAS,KACzB;iBAAI,OACJ;kBAAK,IAAI,KAAK,GAAG,KAAK,IAAI,QAAQ,MAChC;mBAAI,WAAW,IAAI,WACnB;sBAAO,CAAC,QAAS,IAAI,QACtB;AACD;oBACD;AAED;;eAAI,SAAS,EAAE,IAAI,QACnB;eAAI,iBACJ;eAAI,YAEJ;;gBAAK,IAAI,IAAI,GAAG,IAAI,4BAA4B,KAC9C;4BAAe,KAChB;AAED;;aAAE,KAAK,QAAQ,UAAS,OAAO,OAC7B;iBAAI,QAAQ,GACV;uBAAQ,CACT;AAED;;iBAAI,YAAY,QAChB;iBAAI,aAAa,gBACf;yBAAU,OAAO,UACjB;sBAAO,eACP;AACD;AAED;;iBAAI,aACF,KAAK,MAAM,QAAQ,8BAErB;iBAAI,cAAc,gBAChB;yBAAU,OAAO,UACjB;sBAAO,eACP;AACD;AAED;;iBAAI,cAAc,SAChB,EAAE,KAAK,gBAAgB,OAEzB;uBAAU,OAAO,UACjB;oBAAO,eACR;AAED;;aAAE,sBACH;AACD;AACD;AApDD,cAqDE;kBAAS,EAAE,eACZ;AACF;AAED;;SAAI,MAAM,IAEV;;OAAE,KAAK,QAAQ,UAAS,IAAI,GAC1B;WAAI,MACL;AAED;;OAAE,eAAe,UAAS,GAAG,KAC3B;cAAO,MAAO,OAAO,WAAW,EAAE,OAAO,OAAO,MAAO,IACxD;AACD;YACD;AAGL;;YAAS,+BAA+B,aAAa,cACnD;SAAI,gBAAgB,aAClB;0BAAmB,SAAS,IAAI,UAAS,GACvC;gBAAO,KAAK,2BAA2B,GACxC;AACF,QAHQ;AAIT;YACD;AAED;;YAAS,oBAAoB,IAC3B;SAAI,cAAc,KAAK,SAAS,KAAK,gBAAgB;SACnD,YAAY,YAEd;;SAEA;;SAAI,KAAK,UACP;aACE,aACA,KAAK,cAAc,KAAK,KACxB,2BACA,sCACA,oBAAoB,YAAY,QAAQ,WACxC,UACA,qCACA,YAAY,QAAQ,SAEvB;AAXD,YAYE;aACE,aACA,KAAK,cAAc,KAAK,KACxB,qBACA,yBACA,oBAAoB,YAAY,QAAQ,WACxC,UACA,wBACA,YAAY,QAAQ,SACpB,UACA,qCACA,KAAK,aAAa,YAAY,IAAI,uBAErC;AAED;;SAAI,WACF;iBAAU,QAAQ,UAAS,GACzB;gBAAO,SAAS,EAAE,KAAK,UAAU,EAAE,KACpC;AACF;AAED;;YACD;AAED;;YAAS,eAAe,GACtB;oBACE,MACA,MACA,aAAa,EAAE,YACf,oBAAoB,EAAE,aACtB,KAEH;AAED;;YAAS,gBAAgB,GACvB;oBAAe,MAChB;AAED;;QAAK,yBAAyB,UAAU,GAAG,WAAW,UACpD;SAAI,EAAE,WACJ;WAAI,YAAY,KAAK,cAAc,EAAE,aAAa,KAElD;;WAAI,YAAY,sBACd;0BACD;AAFD,cAGE;aAAI,WACF,YAAY,8BACd;aAAI,WAAW,GACb;eAAI,IACJ;kBAAO,IAAI,mBAAmB,UAAU,WAAW,GAAG,KACpD;iBAAI,UACF,KAAK,SAAS,KAAK,gBAAgB,mBACrC;yBAAY,QAAQ,SAAS,SAC7B;8BAAiB,SAClB;AACD;eAAI,KAAK,mBAAmB,QAC1B;gCAAmB,OAAO,GAC3B;AACF;AAED;;aAAI,YAAY,GACd;0BAAe,GAAG,CACnB;AACF;AAED;;WAAI,WACF;cAAK,OAAO,OACb;AACF;AACD;YACD;AAED;;YAAS,0BAA0B,GACjC;SAAI,YAAY,IAChB;OAAE,KAAM,wBAAwB,KAAK,SAAS,KAAK,gBAAgB,EAAE,UAAU,UAAU,MAAM,MAAM,OAAO,UAAU,GAClH;SAAE,KAAM,EAAE,WAAW,UAAU,GAC3B;aAAI,EAAE,KAAK,YACP;qBAAU,KACb;AACJ;AACJ;AACD;AAED;AAGD;;YAAS,yBAA0B,GAC9B;SAAI,YAAY,SAAS,IAAI,UAAS,GACrC;cAAO,EACR;AACD,MAHe;aAGP,KAAK,GACb;OAAE,UAAU,QAAQ,gBAEvB;AAED;;YAAS,yBAAyB,GAAG,WACnC;sBAAiB,KAAK,SAAS,KAAK,gBAAgB,EACpD;SAAI,WACF;YAAK,OAAO,OACb;AACF;AAED;;YAAS,uBAAuB,GAC9B;OAAE,IAAI,KAAK,QACX;OAAE,IAAI,KAAK,SACX;UAAK,OAAO,OACb;AAED;;YAAS,iBAAiB,GACxB;YAAO,IAAI,KAAK,KAAK,EAAE,SACxB;AAED;;QAAK,8BAA8B,UAAU,WAAW,kBAAkB,aACxE;SAAI,kBAAkB,cAAc,EAAE,OAAQ,KAAK,OAAO,eAAe,KAEzE;;SAAI,WAAW,IAAK,iBAAiB,UAAU,MAC3C;WAAI;iBACS,KAAK,2BAA4B,MAE9C;AAFI;WAEA,kBACA;WAAE,KAAM,kBAAkB,UAAU,MAAM,KACtC;kBAAO,QAAQ,KAAK,2BAA4B,MACnD;AACJ;AACD;cACH;AAED,MAZa;;YAYN,KAAM,UAAU,GAAE,GACrB;WAAI,EAAE,OAAO,EAAE,MAAM,OAAO,CAC5B;WAAI,EAAE,QAAQ,EAAE,MAAM,OACtB;cACH;AAGD;;YAED;AAED;;QAAK,uBAAuB,UAAS,QACnC;cAAS,UAAU,KACnB;YAAO,QAAQ,UAAS,GACtB;WAAI,CAAC,EAAE,WACL;cAAK,uBAAuB,GAC7B;AACF;AACD;UACD;AAED;;QAAK,uBAAuB,UAAS,WACnC;iBAAY,SAAS,OAAO,UAAS,GAAG,GACtC;gBAAS,KAAK,EAAE,UAAU,UAAS,GACjC;gBAAO,UACR;AACF,QAHQ;AAIV,MALQ;AAOT;;QAAK,yBAAyB,UAAS,QACrC;cAAS,UAAU,KACnB;YAAO,QAAQ,UAAS,GACtB;WAAI,CAAC,EAAE,WAAW,iBACnB;AACD;UACD;AAED;;QAAK,cAAc,YACjB;UAAK,YAAY,CAAC,KAClB;UACD;AAED;;YAAS,SAAS,OAChB;SAAI,OACF;WAAI,OAAO;WACT,aAEF;;aAAM,QAAQ,UAAS,GACrB;aAAI,KAAK,MACP;gBAAK,MACN;AAFD,gBAGE;gBAAK,KACN;AACF;AACD;YAAK,IAAI,MAAM,MACb;oBAAW,KAAK,CAAC,IAAI,KACtB;AACD;yBAAkB,KAAK,UAAS,GAAG,GACjC;gBAAO,EAAE,KAAK,EACf;AACF,QAHQ;AAIT;YACD;AAED;;AAEA;;QAAK,mBAAmB,UAAU,sBAAsB,UAAU,sBAAsB,YACrF;kBAAa,cACb;AAYA;;;;;;;;;;;;SAAI,YACJ;SAAI,kBACJ;SAAI,iBACJ;SACI;WAAI,wBAAwB,qBAAqB,QAE7C;;aAAI,iBACJ;aAAI,kBAGJ;;aAAI,EAAE,YAAY,qBAAqB,KACpC;iBAAO,WACT;AAED;;WAAE,KAAM,qBAAqB,IAAI,UAAU,GAAG,GAC3C;eAAI,KAAK,UACL;iBAAI;sBAEA;qBACA;2BAEJ;AAJI;kBAIC,6BAA8B,GACtC;AACJ;AAED;;aAAI,yBAAyB;aACzB,iBAEJ;;WAAE,KAAM,KAAK,KAAK,OAAO,UAAU,GAAG,GAClC;kCAAuB,EAAE,MACzB;0BAAgB,EAAE,MACrB;AAED;;WAAE,KAAM,sBAAsB,UAAU,GACpC;oBAAS,uBAAwB,QAC7B;eAAE,KAAM,GAAG,UAAU,iBAAiB,eAClC;mBAAI,iBAAiB,UACjB;mDAAmC,QAAQ,eAC9C;AACJ;AACJ;AAED;;eAAI,EAAE,aAAa,wBACf;oCAAwB,uBAAuB,EAC/C;AACH;AAHD,kBAII;iBAAI,WAAW,EAAC,yBAA0B,IAAI,YAAa,YAAY,iBAAkB,YAAY,YAAa,IAAI,QACtH;sBAAS,KAAK,EACd;oCACA;4BAAgB,SAAS,MAAM,KAAK,KAAK,MACzC;kBAAK,KAAK,MAAM,KAChB;uBAAU,KACb;AACJ;AAGD;;WAAE,KAAM,sBAAsB,UAAU,GACpC;eACI;iBAAK,WAAW,KAAQ,aAAa,KAAO,aAAa,GACrD;mBAAK,CAAE,EAAE,YAAY,gBACjB;uBACH;AACD;mBAAK,CAAE,EAAE,cAAc,gBACnB;uBACH;AAED;;+BAAiB,EAAE,cAAc,CAAC,gBAAiB,EAAE,cAAc,gBAAiB,EAAE,cAAc,KAEpG;;mBAAI,WAAW,EAAC,UAAY,eAAe,EAC3B;2BAAY,eAAe,EAC3B;8BAAc,EACd;2BACA;6BAEhB;;oBAAK,KAAK,MAAM,KACnB;AAjBD,oBAkBI;qBACH;AACJ;AArBD,aAqBE,OAAO,KACL;mBAAO,kCAAkC,MAAM,OAAO,KAAK,UAC9D;AACJ;AAED;;cACA;cAAK,oCAAqC,MAAM,MAChD;cAAK,gBAAiB,KAAK,0BAA0B,KAAK,KAC1D;aAAI,CAAC,KAAK,6BACN;gBAAK,8BACR;AACD;aAAI,CAAC,KAAK,gCACN;gBAAK,iCACR;AAGD;;aAAI,wBACJ;WAAE,KAAM,KAAK,KAAK,OAAO,UAAU,GAC/B;eAAI,gBAAgB,EAAE,MAAO,EAAE,KAAK,KAAK,KAAK,MAAM,EAAE,QAAQ,mBAAmB,EAAE,KAAK,KAAK,KAAK,MAAM,EAAE,QAC1G;aAAE,KAAM,eAAe,UAAU,GAC7B;iBAAI,EAAE,KAAK,wBACN;qCAAuB,KAC3B;AACD;iBAAI,EAAE,WACF;qCAAsB,GAAG,EAAE,aAC9B;AACJ;AACJ;AAGD;;aAAI,+BACJ;WAAE,KAAM,uBAAuB,UAAU,GAAE,GACvC;eAAI,UAAU,EAAE,KAChB;mBACA;wCAA6B,KAChC;AAED;;aAAI,aAAa,EAAE,KACnB;oBACA;aAAI,kBAAkB,GAAG,MAAM,UAAW,MAAO,yBAAyB,OAE1E;;aAAI,qBACC;oBACW,aACP;mBAAM,cAAU,GAAI;sBAAO,EAAE,MAAU;AACvC;mBAAM,6CAET;AAJG;wBAIW,mBAAU,SAEtB;;;sBACY,CAAC,QAAQ,SAAU,aAClB,QAAQ,iBACR,QAET;;yBAAW,kBAAU,SAAS,SAE1B;;qBAAI,YAAY,GAAG,OACnB;2BAAU,KAAM,CAAC,QAAQ,KAAK,MAAM,aACpC;qBAAI,iBACJ;qBAAI,QAAS,IACT;oCAAiB,EAAE,QAAS,EAAE,KAAK,QAAS,KAAK,QACjD;uBAAI,eAAe,QACf;oCACA;+BAAU,OAAQ,QAAQ,QAAS,oBAAoB,MAAM,KAC7D,gBAAgB,eAAe,SAAS,aACtC,KAAM,SAAS,eAAe,KACnC;AACJ;AAED;;qBAAI,gBAAgB,EAAE,MAAM,6BAA6B,QAEzD;;qBAAI,QAAQ,KAAK,KAAK,eAAe,UAChC,6BAA6B,QAAQ,OAAO,cAAc,QAE3D;;iCAAc,KAEd;;uBAAI,cACJ;qBAAE,KAAM,eAAe,UAAU,GAC7B;iCAAa,KAChB;AAED;;6BACG,OAAO,UACP,QAAQ,qCAAqC,MAC7C,KAAK,UAAU,YACf,GAAI,SAAS,UAAU,GACtB;0BAAK,wBAAyB,QAAQ,IAChC,UAAU,GAAI;8BAAQ,EAAE,oBAAoB,QAAQ,MAAM,EAAqB;AADrF,wBAEM,UAAU,IAAM;8BAAO,aAAa,KAAK,WAAuB;AAFtE;sCAI4B,oBAAU,SAAS,GAAG,SAClC;6BAAI,EAAE,IAAK,GAAG,cACV;8BAAG,OAAQ,SAAS,MAAO,UAAU,QAAQ,gBAAiB,EAC9D;6BAAE,YAAY,CAAC,QAAQ,YAAY,EACtC;AAHD,gCAII;6BAAE,YAAY,CAAC,QAAQ,YAC1B;AACJ;AAED;;oCAAc,mBAAU,SACpB;kCAAS,WAAY,MAEjB;;gCAAK,MAAM,gBACX;+BAAI,KAAK,QACL;kCAAK,MAAO,UAAU,QAAQ,gBACjC;AAFD,kCAGI;kCAAK,QAAS,QACd;iCAAI,YAAY,KAAK,MACrB;kCAAK,QAAS,QACd;kCAAK,MAAO,UACf;AACJ;AACD;iCAAQ,kBACR;iCAAQ,cAAc,EAAE,MACxB;iCAAQ,gBAAe,WACA;oCAEvB,EAHsB;;2BAGpB,KAAM,QAAQ,aAAa,UAAU,QAAQ,GAC3C;+BAAI,EAAE,QACF;qCAAQ,YAAY,MAAM,KAAK,EAAE,QAAS,YAC7C;AAFD,kCAGI;qCAAQ,YAAY,MAAM,qBAAqB,EAAE,QAAS,YAC7D;AAEJ;AAEL;AAEA;;;kCAEI;oCAAc,IAAK,eAAe,UAAU,YAChC;mCAAQ,UAAU,SAAS,SACnC;sCAAS,iBACL;uCAAQ,YAAa,cAAc,CAAC,QAAQ,YAC5C;wCAAS,KAAM,WAAW,QAAQ,YAAa,cAAc,KAC7D;uCAAQ,OACX;AAED;;iCAEA;;iCAAI,WAAW,QACX;sCAAO,QAAQ,OAAQ,KAAK,KAAO,aAAa,UAC3B,MAAO,SAAS,QAAQ,gBAAgB,aAAa,GAAI,SAEjF;AAJD,oCAKI;sCAAO,QAAQ,OAAQ,KAAK,KAAO,mBACV,GAAI,SAEhC;AACD;iCAAI,WAAW,KAAK,OAAQ,SAAS,KAAM,QAAQ,YAAY,KAAM,WAGxE;AAAE,4BArBgB;AAyBpC,0BA1B6B;AADZ;AAvCJ;AAmEnB;AACJ;AAEN;AA9GK;AAkHZ;AA1HI,UADkC;;cA2HjC,8BAA8B,KAAK,4BAA4B,OACpE;cAAK,mBAAoB,KAAK,6BAA6B,KAAK,eAAe,OAAO,KAC1F;AACH;AAlPA,OAkPC,OAAO,GACL;aACH;AAED;;YAAO,EAAC,SAAU,WAAW,kBAAmB,gBAAgB,SACjE;AAED;;QAAK,sCAAsC,UAAU,aAAa,aAAa,YAE7E;;SAAI,iBAEJ;;SAGI;;qBAAc,eAAe,YAAa;gBAAY;AACtD;qBAAc,eAAe,YAAa;gBAAY;AAEtD;;WAAI,iBACJ;WAAI,2BAGJ;;WAAI,sBAAsB,qCAAsC,EAAE,OAAQ,KAAK,KAAK,OAAO,cACtD,KAAK,KAAK,OACV,MAIrC;;SAAE,KAAM,qBAAqB,UAAU,GACnC;aAAI,cACJ;aAAI,iBAEJ;;WAAE,KAAM,GAAG,UAAU,GACjB;uBAAa,EAAE,WACf;6BAAkB,EAAE,UAAU,IACjC;AAED;;AAEA;;AAEA;;AAGA;;;aAAI,gBACA;kBAAO,YACV;AAED;;aAAI,gBAAiB,EAAE,KAAM,aAE7B;;WAAE,KAAM,GAAG,UAAU,GACjB;eAAI,sBAAsB,GACtB;eAAE,OAAQ,EAAG,qBAChB;AAFD,kBAGI;eAAG,sBACN;AACH;AAEF;;WAAE,KAAM,aAAa,UAAU,GAAE,GAC7B;AACA;eAAI,mBAAmB,KAAK,SAAS,IACrC;eAAI,CAAE,iBAAiB,UACnB;8BAAiB,WACpB;AACD;4BAAiB,SAAU,cAC3B;eAAI,qBAAqB,kBACrB;eAAE,OAAQ,iBAAkB,oBAC/B;AAFD,kBAGI;8BAAkB,qBACrB;AACJ;AAEJ;AAGJ;AA/DD,OA+DE,OAAO,KACL;eAAQ,IACR;aACH;AAED;;YACD;AACD;AACA;YAAS,eAAe,SAAS,SAAS,OAAO,KAAK,WACpD;AAEA;;SAAI,WAAW,CAAC,QAAQ,SACtB;AACA;SAAE,oBAAoB,KAAK,UAAS,GAClC;WAAE,MACH;AAED;;WAAI,WAAW,EACf;WAAI,YAAY,GAAG,OAAO,SAC1B;eAAQ,mBAAmB;gBAClB,QAAQ,SACf;eACA;oBAAW,YAAY,YAGzB;AALE,QADgB;;AAQlB;;SAAE,MAAM,EAAE,KAAK,QAAQ,QAAQ,SAAS,QAAQ,UAAU,KAC3D;AAjBD,YAkBE;WAAI,WAAW,SAAS,QAAQ,SAC9B;iBAAQ,QAAQ,QAChB;iBAAQ,UACT;AACF;AACF;AAED;;AAEA;;OAAI,UAAU;;AACZ;gBAAa,KAAK;;AAClB;0BAAuB;OACvB,iBAAiB;OACjB,aAAa;OACb,qBAAqB;OACrB;OACA,gBAAgB,GAAG,MAChB,MACA,SAAS,KACT,OAAO,CAAC,GAAG,SACX,MAAM,CAAC,KAEZ;;AAEA;;OAAI,oBAAoB,OACrB,QACA,GAAG,QAAQ,MACX,OAAO,UAAS,GACf;SAAI,EAAE,YACJ,OACE,KAAK,qBAAqB,CAAC,KAAK,IAAI,KAAK,IAAI,EAAE,SAAS,QAE5D;YAAO,KAAK,qBAAqB,CAAC,IAAI,KAAK,KAAK,KAAK,EACtD;AATkB,MAUlB,aAAa,UAAS,GACrB;YAAO,KAAK,IAAI,EAAE,QAAQ,SAC3B;AAZkB,MAalB,aAAa,UAAS,GACrB;SAAI,EAAE,YAAY,WAChB;cAAO,KAAK,MAAM,EACnB;AACD;YACD;AAlBkB,MAmBlB,eAAe,UAAU,MACzB,QAAQ,cAAc,KAAK,MAAM,SACjC,SAEH;;MAAG,OAAO,KAAK,WAAW,UAAU,gBAAgB,MAAM,WAC1D;MAAG,OAAO,KAAK,WAAW,UAAU,OACpC;QAAK,WAAW,UAAU,KAC1B;QAAK,cAAc,UAAU,KAE7B;;QAAK,iBACF,OAAO,KAAK,WACZ,OACD;AAHiB;AAAA,IAIhB,KAAK,MAAM,KAAK,aAAa,gBAC7B,KAAK,SAAS,KAAK,QAAQ,KAAK,OAAO,OAAO,KAAK,OAAO,OAC1D,KAAK,UAAU,KAAK,SAAS,KAAK,OAAO,MAAM,KAAK,OAEvD;;QAAK,2BAGL;;AACA;AAEA;;QAAK,aAAa,KAAK,YAAY,OAAO,KAAK,KAAK,aAEpD;;QAAK,YACF,OAAO,QACP,OAAO,UACP,KAAK,MAAM,KAAK,aAAa,cAC7B,KAAK,QAAQ,GAAG;IAChB,KAAK,QAAQ,GACb,KAAK,eAAe,GACpB,KAAK,gBAAgB,GACrB,KAAK,UAAU,QACf,KAAK,UAAU,WACf,KAAK,QAAQ,WACb,OAAO,QACP,KAAK,KAAK,oBA53Kb,CA83KA;;AAEA;;AAEA;;MAAG,OAAO,KAAK,WAAW,UAAU,gBAAgB,MAAM,WAE1D;;OAAI,SACF;SAAI,EAAE,SAAS,QAAQ,YACrB;YAAK,oBAAoB,QAC1B;AAED;;SAAI,eAAe,SACjB;YAAK,YAAY,QAClB;AAED;;SAAI,iBAAiB,SACnB;YAAK,cAAc,QACpB;AAED;;SAAI,eAAe,SAChB;eAAQ,aACV;AAGD;;UACA;oBAEA;;SAAI,EAAE,QAAQ,QAAQ,YACpB;YAAK,uBACD,OAAO,KAAK,UAAU,UAAS,GAC/B;gBAAO,QAAQ,UAAU,QAAQ,EAAE,eACpC;AAEJ,QAJG;AAKL;AACD;UACD;AA/6KD;;AAi7KA,KAAI,iCAAiC,wCAAS,OAAO,KACnD;OAAI,gBAAgB,GAAG,OAEvB;;mBAAgB,GAAG,OAAO,KAAK,OAC/B;OAAI,cAAc,SAChB;qBAAgB,GAAG,OAAO,KAAK,OAChC;AAED;;OAAI,aAEJ;;OAAI,CAAC,cAAc,SACjB;OAAE,KAAK,MAAM,oBAAoB,UAAS,OAAO,KAC/C;WAAI,KAAK,YAAY,OAAO,SAC1B;eACD;AACD;WAAI,EAAE,SAAS,QACb;oBAAW,KAAK,CAAC,KAClB;AACF;AACF;AAED;;OAAI,UACJ;KAAE,KAAK,MAAM,WAAW,iBAAiB,UAAS,OAAO,OACvD;UAAK,IAAI,IAAI,GAAG,IAAI,OAAO,KACzB;eAAQ,KAAK,QACd;AACF;AACD;aAAU,QAAQ,gBAClB;cAAW,KAAK,CAAC,cACjB;cAAW,KAAK,CACd,2BACA,oBAAoB,QAEtB;cAAW,KAAK,CACd,6BACA,oBAAoB,QAEtB;cAAW,KAAK,CACd,4BACA,QAAQ,SAAS,QAAQ,QAE3B;cAAW,KAAK,CACd,0CACA,QAAQ,QAAQ,QAAQ,QAG1B;;aAAU,QAAQ,gBAAgB,MAClC;cAAW,KAAK,CAAC,iBACjB;cAAW,KAAK,CACd,2BACA,oBAAoB,QAEtB;cAAW,KAAK,CACd,6BACA,oBAAoB,QAEtB;cAAW,KAAK,CACd,4BACA,QAAQ,SAAS,QAAQ,QAE3B;cAAW,KAAK,CACd,0CACA,QAAQ,QAAQ,QAAQ,QAG1B;;OAAI,KAAK,UACP;uBAAkB,kBACd,IAAI,MAAM,UAAU,UAAS,GAC7B;cAAO,EACR;AAEH,MAJE,CADQ;gBAKC,KAAK,CAAC,kCACjB;gBAAW,KAAK,CACd,2BACA,sBAAsB,QAExB;gBAAW,KAAK,CACd,6BACA,sBAAsB,QAExB;gBAAW,KAAK,CACd,4BACA,sBAAsB,QAAQ,UAC5B,QACA,sBAAsB,QAE1B;gBAAW,KAAK,CACd,0CACA,sBAAsB,QAAQ,SAC5B,QACA,sBAAsB,QAE3B;AAED;;OAAI,OAAO,cAAc,UAAU,MAAM,KACzC;QAAK,QAAQ,OACb;QAAK,OACL;OAAI,eAAe,UAAU,MAAM,KAAK,UAAS,GAC/C;YACD;AACD,IAHc;WAGN,QAAQ,OAChB;WACA;WAAQ,KAAK,UAAS,GACpB;YACD;AACF;AAzGD;;AA2GA,QAAO,QAAQ,iBAAiB;AAChC,QAAO,QAAQ,iBAAiB;AAChC,QAAO,QAAQ,eAAe,+B;;;;;;;;;;AC5vL9B,KAAI,KAAK,oBAAQ;KACf,IAAI,oBAAQ;KACZ,UAAU,oBAAQ;;AAEpB,UAAS,gCAAgC,KAEvC;;OAAI,QAAQ,IAAI;OACd,QAAQ,IAEV;;OAAI,iBAEJ;;SAAM,QAAQ,UAAS,GAAG,GAExB;;cAAS,SAAS,GAAG,IACnB;cAAO,EAAE,MACV;AAED;;SAAI,UAAU,EAEd;;SAAI,WAAW,OAAO,UAAS,GAC3B;cAAO,SAAS,GAAG,QACpB;AAFM,QAEJ;SACH,WAAW,OAAO,UAAS,GACzB;cAAO,SAAS,GAAG,QACpB;AAFI,QAIP;;oBAAe,GAAG,MAAM,eAAe,GAAG,IAAI,KAAK,MAAM,eAAe,GAAG,MAAM,CACjF;oBAAe,GAAG,MAAM,eAAe,GAAG,IAAI,KAAK,MAAM,eAAe,GAAG,MAAM,CAElF;AAED;;UAED;;;AAED,KAAI,uCAAuC;;AAE3C,GAAE,KAAK,EAAE,MAAM,GAAG,KAAK,UAAS,GAC9B;OAAI,aAAa,KAAK,KAAK,IAC3B;wCAAqC,OAAO,IAAI,EAAE,MAAM,GAAG,IAAI,UAAS,GACtE;YAAO,CAAC,KAAK,IAAI,aAAa,IAAI,KAAK,IAAI,aAC5C;AACF,IAH2C;AAF5C;;AAOA,UAAS,6BAA6B,MAGpC;;WACE;UACA;UACA;UACA;UACA;UACA;UACE;cAAO,GAAG,IAAI,SAAS,KACzB;UACE;cAAO,IAAI,gCAAgC,MAC7C;UACE;cAAO,IAAI,gCAAgC,MAC7C;UACE;cAAO,IAAI,gCAAgC,MAC7C;UACE;cAAO,IAAI,gCAAgC,MAC7C;UACE;cAAO,IAAI,gCAAgC,MAC7C;UACE;cAAO,IAEX;;AACA;UAAO,GAAG,IAAI,SAAS,KACxB;;;AAED,KAAI,gCAAgC,yCAElC;;OAAI,OAEJ;;QAAK,UAAU,YAEb;;SAAI,OAAO,OAAO,KAAK,SAAU,UAAU,KAAK,SAAS,IAAK,MAAM,KAAK,SAAS,OAAO,YAAa,KAAK,SAC3G;YAED;AAED;;QAAK,QAAQ,OAAO,YAClB;YAAO,KACR;AAED;;QAAK,QAAQ,OAAO,UAAS,MAE3B;;SAAI,EAAE,SAAS,OACb;YAAK,OACL;YAAK,SAAS,KAAK,KAAK,OAAO,OAAO,KACtC;cAAO,KACR;AAED;;YAAO,KAER;AAED;;QAAK,QAAQ,KAEb;;UAAO,KACR;AA9BD;;AAgCA,KAAI,gCAAgC,yCAElC;;OAAI,OAEJ;;QAAK,UAAU,YAEb;;SAAI,OAAO,OAAO,KAAK,SAEvB;;SAAI,KAAK,SAAS,sCAChB;oDAA6C,KAAK,OAAO,IAAI,UAAS,OACpE;gBAAO,OAAO,KAAK,SAAS,MAAM,KAAK,MAAM,KAAK,SAAS,MAC5D;AAFO,UAEL,KACJ;AAJD,YAKE;WAAI,aAAa,KAAK,KAAK,IAAI,KAAK;WAClC,gBACF;YAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,GAAG,KAC9B;0BACA;iBAAQ,OAAO,KAAK,SAAS,KAAK,IAAI,iBAAiB,MAAM,KAAK,SAAS,KAAK,IACjF;AACF;AAED;;aACA;YACD;AAED;;QAAK,QAAQ,QAAQ,UAAS,MAE5B;;SAAI,EAAE,SAAS,SAAS,OAAO,GAC7B;YAAK,QACL;cAAO,KACR;AAED;;YAAO,KAER;AAED;;QAAK,QAAQ,OAAO,YAClB;YAAO,KACR;AAED;;QAAK,QAAQ,OAAO,UAAS,MAE3B;;SAAI,EAAE,SAAS,OACb;YAAK,OACL;YAAK,SAAS,KAAK,KAAK,OAAO,KAC/B;cAAO,KACR;AAED;;YAAO,KAER;AAED;;QAAK,QAAQ,KACb;QAAK,QAEL;;UAAO,KAER;AAzDD;;AA2DA,UAAS,oCAAoC,KAE3C;;OAAI,QAAQ,IAAI;OACd,QAAQ,IAGV;;SAAM,QAAQ,UAAS,GACrB;OAAE,YAAY,GACf;AAED;;SAAM,QAAQ,UAAS,GACrB;WAAM,EAAE,QAAQ,UAAU,IAAI,EAC9B;WAAM,EAAE,QAAQ,UAAU,IAAI,EAC/B;AAEF;;;AAED;AACA,UAAS,kBAAkB,MAAM,GAAG,GAElC;;OAAI,YACJ;OAAI,SACJ;OAAI,SAEJ;;QAAK,IAAI,IAAI,GAAG,IAAI,KAAK,GAAG,GAAG,QAAQ,KAErC;;SAAI,IAAI,KAAK,GAAG,GAChB;SAAI,eAEJ;;SAAI,iBAAiB,QAAQ,gBAAgB,GAC3C;cAAO,CACL,CAAC,SAAS,IAAI,SAEjB;AAJD,YAME;;WAAI,YAAY,kBAAkB,MAAM,GACxC;WAAI,YAAY,kBAAkB,MAAM,cAExC;;YAAK,IAAI,YAAY,GAAG,YAAY,UAAU,QAAQ,aACpD;aAAI,MAAM,UACV;cAAK,IAAI,YAAY,GAAG,YAAY,UAAU,QAAQ,aACpD;eAAI,MAAM,UACV;eAAI,IAAI,QACN;iBAAK,IAAI,MAAM,KAAO,IAAI,IAAI,SAAS,MAAM,KAAO,IAAI,MAAM,KAAO,IAAI,IAAI,SAAS,MAAM,GAC1F;mBACA;yBAAU,KAAK,IAAI,OACpB;AACF;AACF;AACF;AACF;AACF;AAED;;UAED;;;AAED,UAAS,yBAAyB,MAAM,MAAM,GAAG,GAE/C;;OAAI,QAAQ,kBAAkB,MAAM,GAEpC;;AACA;iBAAc,IAAI,UAAS,SACzB;YAAO,QAAQ,MAAM,GAAG,CACzB;AAED,IAJQ;;OAIJ,CAAC,OACH;YACD;AAED;;OAAI,YAEJ;;QAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAChC;eAAU,MACV;eAAU,QAAQ,YAAY,IAAI,UAAS,GACzC;cAAO,KACR;AACF,MAHuB,CAAP;AAKjB;;OAAI,OAAO,GAAG,KAEd;;OAAI,SAAS,WACX;YACD;AAED;;UAED;;;AAGD;AACA,UAAS,oDAAoD,KAAK,QAAQ,sBAExE;;AACA;OAAI,YACJ;OAAI,OACJ;OAAI,QAAQ,IACZ;OAAI,QAAQ,IACZ;OAAI,WAEJ;;OAAI,iBAAiB,gCAErB;;OAAI,CAAC,QACH;cAAS,OAAO,KACjB;AAED;;OAAI,aAAa,OAEjB;;QAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,KACjC;SAAI,SAAS,OACb;SAAI,cAAc,MAAM,YAAY,IAAI,UAAS,GAC/C;cACD;AACD,MAHgB;SAGZ,WAAW,MAAM,YAAY,IAAI,UAAS,GAC5C;cACD;AACD,MAHa;eAGH,KACV;UAAK,KACN;AAED;;QAAK,IAAI,QAAQ,GAAG,QAAQ,OAAO,QAAQ,SACzC;SAAI,SAAS,OACb;UAAK,IAAI,SAAS,GAAG,SAAS,OAAO,QAAQ,UAC3C;WAAI,cAAc,OAClB;WAAI,eAAe,QACjB;4BAAmB,QAAQ,IAAI,UAAS,GACpC;kBAAO,EACR;AAFC,YAEC,QAAQ,gBAAgB,CAAC,GAC5B;qBAAU,OAAO,UACjB;qBAAU,QAAQ,SACnB;AACF;AACF;AACF;AAED;;QAAK,IAAI,UAAU,GAAG,UAAU,OAAO,QAAQ,WAC7C;SAAI,MAAM,OACV;UAAK,IAAI,UAAU,GAAG,UAAU,OAAO,QAAQ,WAC7C;WAAI,MAAM,OACV;WAAI,WAAW,SACb;cAAK,SAAS,WACf;AAFD,cAGE;cAAK,SAAS,WAAW,CAC1B;AACF;AACF;AAED;;AACA;OAAI,aAAa,EAAE,IAAI,WAAW,EAClC;OAAI,IAEJ;;QAAK,IAAI,UAAU,GAAG,UAAU,OAAO,QAAQ,WAC7C;SAAI,MAAM,OACV;UAAK,IAAI,UAAU,GAAG,UAAU,OAAO,QAAQ,WAC7C;WAAI,MAAM,OACV;YAAK,IAAI,UAAU,GAAG,UAAU,OAAO,QAAQ,WAC7C;aAAI,MAAM,OAEV;;aAAI,OAAO,KAET;;kBAAO,UAAU,SACjB;kBAAO,UAAU,SACjB;kBAAO,UAAU,SAEjB;;eAAI,SAAS,QAAQ,SAAS,MAC5B;qBACA;iBAAI,SAAS,QAAS,OAAO,MAC3B;0BAAW,SAAS,WACpB;0BAAW,SAAS,WACpB;oBAAK,SAAS,WACd;oBAAK,SAAS,WAAW,KAAK,SAAS,SAAS,OAAO,KAAK,SAC5D;AACD;AAND,oBAMO,IAAI,QAAQ,MACjB;oBAAK,SAAS,WAAW,KAAK,SAAS,SAAS,OAAO,KAAK,SAC7D;AACF;AACD;AACA;sBAAW,SAAS,WAAW,UAAU,SACzC;sBAAW,SAAS,WAAW,UAAU,SAC1C;AACF;AACF;AAED;;SAAI,IACJ;kBACA;iBAED;AAED;;;iBAEE;kBACA;aAGH;AALG;;;AAOJ,UAAS,mCAAmC,MAAM,KAEhD;;OAAI,QAAQ,IAAI;OACd,QAAQ,IAAI;OACZ,aAEF;;AACA;OAAI,iBAAiB,OAAO,UAAS,GACnC;YAAO,QAAQ,EAChB;AAED,IAJe;;OAIX,UACF;kBAAa,SAAS,GACvB;AAFD,UAGE;aAAQ,IACR;YACD;AAED;;AACA;OAAI,yBAAyB,OAAO,UAAS,GAC3C;YAAO,cAAc,EACtB;AACD,IAHuB;OAGnB,4BAA4B,IAAI,UAAS,GAC3C;YAAO,EACR;AACD,IAHe;OAGX,yBAAyB,OAAO,UAAS,GAC3C;YAAO,SAAS,QAAQ,EAAE,UAAU,OAAO,CAC5C;AAED,IAJuB;;OAInB,eACJ;gBAAa,WACb;gBAAa,WACb;UAED;;;AAED,UAAS,6DAA6D,SAAS,KAAK,IAElF;;OAAI,QAAQ,IAAI;OACd,QAAQ,IAGV;;OAAI,yBAAyB,OAAO,UAAS,GAC3C;YAAO,WAAW,EACnB;AACD,IAHuB;OAGnB,4BAA4B,IAAI,UAAS,GAC3C;YAAO,EACR;AACD,IAHe;OAGX,yBAAyB,OAAO,UAAS,GAC3C;YAAO,SAAS,QAAQ,EAAE,UAAU,OAAO,CAC5C;AAED,IAJuB;;OAInB,eACJ;gBAAa,WACb;gBAAa,WAEb;;AACA;OAAI,iBAAiB,SAAS,IAC5B;QAAG,qBACH;AACD;AAED;;AACA;OAAI,QAAQ,oDACZ;OAAI,4BAA4B,IAAI,UAAS,GAC3C;YAAO,EACR;AAED,IAJe;;OAIX,cACJ;oBAAiB,QAAQ,UAAS,GAChC;iBAAY,EAAE,MAAM,wCAAwC,EAAE,IAAI,cACnE;AAED;;MAAG,MACH;AAED;;;AAED;AACA;AACA,UAAS,wCAAwC,MAAM,KAAK,OAE1D;;OAAI,CAAC,OACH;SAAI,eAAe,mCAAmC,MACtD;aAAQ,oDACT;AAED;;AACA;OAAI,QAAQ,MAAM,SAAS,QAE3B;;OAAI,SAAS,CAAC,GACZ;YACD;AAED;;OAAI,SAAS,MAAM,UAEnB;;OAAI,UAAU,GACZ;aAAQ,KAAK,CAAC,SAAS,MAAM,SAC9B;AAFD,UAGE;aACD;AAGD;;AACA;AACA;OAAI,kBACJ;QAAK,IAAI,KAAK,EAAE,MAAM,SACpB;UAAK,IAAI,KAAK,EAAE,MAAM,SACpB;uBAAgB,KAAK,yBAAyB,OAAO,MAAM,MAAM,GAClE;AACF;AAED;;UAAO,GAAG,IAAI,mBAEf;;;AAGD,UAAS,8BAA8B,KAErC;;OAAI,QAAQ,IAAI;OACd,QAAQ,IAEV;;QAAK,IAAI,KAAK,OACZ;WAAM,GAAG,SACV;AAED;;QAAK,IAAI,KAAK,OACZ;WAAM,MAAM,GAAG,QACf;WAAM,MAAM,GAAG,QAChB;AAEF;;;AAED,UAAS,wBAAwB,IAAI,KACnC;cAAW,MAAM,OAAO,UAAS,GAC/B;YAAO,MAAM,EACd;AAFM,MAEJ,MACJ;;;AAED,UAAS,qCAAqC,KAAK,UAEjD;;OAAI,QAAQ,IAEZ;;YAAS,WAAW,OAAO,OAAO,MAChC;YAAO,KAAK,QAAQ,WACrB;AAED;;AACA;OAAI,iBAAiB,IAAI,UAAS,GAChC;YAAO,EACR;AACD,IAHe;OAGX,kBAAkB,SAAS,OAE/B;;OAAI,WAEJ;;YAAS,GAAG,KAAK,SAEf;;AAEA;;UAAK,IAAI,QAAQ,SACf;+BAAwB,MAAM,KAAK,iBAAiB,QACrD;AAED;;SAAI,YAAY,gBAAgB,QAC9B;gBACD;AAEF;AAED;;AACA;mBAAgB,QAAQ,UAAS,YAC/B;0DAAqD,YAAY,KAClE;AAED;;AAED;;;AAGD,UAAS,wBAAwB,MAC/B;UAAO,KAAK,WAAW,QAAQ,kBAAkB,CAClD;;;AAED,UAAS,wBAAwB,KAAK,UACpC;AACA;iCAEA;;wCAAqC,KAAK,UAAS,KACjD;SAAI,iBAAiB,MAAM,IAAI,UAAS,GACtC;cAAO,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,wBAAwB,IAAI,EAAE,WAAW,KAC5F;AACD,MAHiB;gBAGN,QAAQ,CAAC,SAAS,WAAW,UAAU,eAAe,kBACjE;gBAAW,GAAG,IAAI,OAClB;cAAS,MACV;AACF;;;AAED,UAAS,2BAA2B,OAAO,KAEzC;;OAAI,+BAA+B,OAAO,UAAS,KAAK,MACtD;SAAI,SAAS,MACX;WAAI,MAAM,SAAS,cACnB;WAAI,aAAa,QAAQ,iCAAiC,mBAC1D;WAAI,aAAa,YACjB;WAAI,YACJ;WAAI,YACJ;SAAE,KAAK,OACR;AACF;AAEF,IAXY;;;AAcb,UAAS,+BAA+B,WAAW,UAAU,KAE3D;;OAAI,aAAa,GAAG,OACpB;cAAW,UAAU,iCAErB;;2BAAwB,OAAO,KAC5B,KAAK,UAAU,UACf,KAAK,aAAa,mBAClB,GAAG,SAAS,UAAS,MAAM,SAC1B;QAAG,MACH;SAAI,YAAY,GAAG,OAAO,MAAM,KAChC;SAAI,aAAa,QAAQ,cACzB;aAAQ,eAAe,YAAY,UAAU,UAAU,KAAK,QAC7D;AARU,MASV,KAAK,cAER;;cAAW,OAAO,KAAK,QAAQ,wBAC/B;UAED;;;AAED,KAAI,mDAAmD,KAAK,UAAS,KAEnE;;uCAEA;;OAAI,QAAQ,IAEZ;;SAAM,QAAQ,UAAS,GAErB;;SAAI,SACJ;SAAI,oBAAoB,OAAO,UAE/B;;SAAI,oBAAoB,GACtB;cAAO,MACR;AAFD,YAIE;;WAAI,oBAAoB,KACtB;gBAAO,MACR;AAFD,cAGE;AACA;wBAAe,OAAO,UACtB;mBACA;cAAK,KAAK,GAAG,KAAK,mBAAmB,MAAM,GACzC;gBAAK,KAAK,KAAK,GAAG,KAAK,mBAAmB,MAAM,GAC9C;iBAAI,MAAM,aAAa,KAAK,UAAU,IAAI,aAAa,MACrD;AACD;AACF;AACF;AACD;gBAAO,MAAM,IAAI,UAAU,qBAAqB,oBACjD;AACF;AAEF;AAEF;AAlCoD;;AAoCrD,UAAS,yBAAyB,UAAU,cAC1C;AACA;AACA;AACA;AACD;;;AAED,UAAS,sBAAsB,OAAO,WAEpC;;OAAI,OAAO,UAAU,aACnB;YACD;AACD;OAAI,UAAU,oBACZ;YACD;AACD;OAAI,UAAU,oBACZ;YACD;AAED;;OAAI,UAAU,qBACZ;YACD;AAED;;UAAO,YAAY,UAAU,SAE9B;;;AAED,UAAS,+BAAgC,aAAa,WAAW,SAAS,SAAS,SAAS,QAAQ;;aAEtF;gBAEN;UACA;YACA;aAAQ,IACR;WAAM,IACN;gBACA;gBACA;YACA;aAGJ;AAXI;;OAWA,kBAAkB,WAAW,QAEjC;;OAAI,QAAS,QAAQ,QAAQ,QAAQ,OAAO,QAC5C;OAAI,SAAU,QAAQ,SAAS,QAAQ,MAAM,QAE7C;;YAAS,UAAU,UAAU,MACzB;SAAI,OAAO,KAAK;SACZ,kBAAkB,IAAI;SACtB,YAAY,IAEhB;;qBAAgB,QAChB;qBAAgB,YAChB;eAAU,YAGV;;SAAI,UAAU,KAAK,MAAO,KAAK,aAAa,KAC5C;qBAAgB,SAAW,UAC3B;qBAAgB,SAAU,GAAE,GAC5B;eAAU,SAAU,GAAE,GAEtB;;qBAAgB,YAAa,QAAQ,WAAW,IAAI,IACpD;eAAU,SAAW,UAAW,IAChC;eAAU,QAEV;;YAAO,CAAC,MAAM,UAAU,MAAM,MAAM,iBAEvC;AAED;;AAeA;;;;;;;;;;;;;;;OAAI,IAAI,GAAG,KAAK,QACX,MAAM,CAAC,GAEZ;;OAAI,IAAI,UAAU,UAAU,GAAG,MAE/B;;KAAE,MAAM,CAAC,QAIT;;OAAI,QAAQ,GAAG,IAAI,OACd,MAAM,GACN,OAAO,UACP,MAAO,GAAG,WAAW,GAAG,KAAK,OAElC;;OAAI,QAAQ,GAAG,IAAI,OACd,MAAM,GACN,OAAO,QAAQ,MAAO,GAG3B;;OAAI,SACJ;OAAI,sBACJ;OAAI,WACJ;OAAI,cACJ;OAAI,SAAsB,WAAW,QAAS,YAAa,QAAS,YACpE;OAAI,UAEJ;;KAAE,KAAM,aAAa,UAAU,OAAO,OAClC;SAAI,UAAU,OAAQ,MACtB;SAAI,EAAG,QAAS,MAAM,SAClB;cAAQ,QAAQ,MAAM,EAAC,QAAS,QAAQ,IAAI,KAAM,QAClD;cAAQ,QAAQ,IAAI,YACpB;SAAE,KAAM,OAAO,UAAU,GAAG,GACxB;aAAI,KAAK,QACL;kBAAQ,QAAQ,IAAI,KACvB;AACJ;AACJ;AAED;;YAAQ,QAAQ,IAAI,aACpB;eAAU,KAAK,IAAK,SAAS,OAAQ,QAAQ,IAE7C;;SAAI,IACJ;OAAG,YAAY,QACf;OAAE,KAAM,OAAO,UAAU,GAAG,GACpB;WAAI,KAAK,QACN;gBAAQ,QAAQ,IAAI,GAAG,KAAK,OAAQ,QAAQ,IAAI,GAAG,KAAK,OAAQ,QAAQ,IAAI,GAAG,KAAK,IACnF;aAAI,EAAG,KAAK,sBACR;+BAAqB,KACxB;AACD;aAAI,KAAK,oBAAqB,IAC1B;+BAAqB,GACxB;AAFD,gBAGI;+BAAqB,GAAG,KAC3B;AACD;mBAAU,KAAK,IAAK,SAAS,OAAQ,QAAQ,IAAI,GACjD;WAAG,KAAK,EAAE,MAAO,oBACpB;AACJ;AAEL;;WAAO,OACP;WAAO,UAAU,QACpB;AAGD;;OAAI,eACJ;KAAE,KAAM,QAAQ,UAAU,GAAE,GACxB;OAAE,QACF;kBAAa,KAEhB;AAED;;gBAAa,KAAM,UAAU,GAAE,GAC3B;YAAO,EAAE,UAAU,EAAE,UAAU,IAAK,EAAE,WAAW,EAAE,UAAU,IAAI,CACpE;AAGD;;OAAI,WAAW,IAAK,aAAa,UAAS,GACtC;YAAO,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9C;AACD,IAHY;OAGR,WAAW,IAAK,aAAa,UAAS,GACtC;YAAO,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9C;AAED,IAJY;;KAIV,OAAO,CAAC,OAAM,QAAQ,MACxB;KAAE,OAAQ,CAAC,KAAK,KAAK,MAAO,kBAAkB,UAAU,IAAI,YAAY,SAAS,OAAO,MAGxF;;AAEA;;AAKA;;;;aAAU,UAAU,KAAK,SArJzB,CAuJA;;OAAI,cAAc,UAAU,OAAO,KAAK,KAAK,aAAa,gBAAgB,QAAQ,OAAO,QAAQ,YAAY,OAAO,OAAO,QAAQ,MAAM,QAAQ,aAEjJ;;OAAI,MAAM,UAAU,OAAO,KACtB,KAAK,aAAa,eAAe,QAAQ,OAAO,MAAM,QAAQ,MAGnE;;AAEA;;OAAI,QAAQ,EAAE,KAAM,qBAGpB;;OAAI,cAAgB,eAAe,WAAY,QAAQ,gBAAiB,SAAS,QAAQ,eAAiB,QAAQ,aAAa,SAAQ,GAAG,MAE1I;;mBAAgB,KAAM,aAAa,UAAS,MAAM,KAC5C;SAAI,OAAO,UAAU,OACrB;YAAO,KAGR;AAEL,IAPc;;OAOV,aAAa,EAAE,KAAM,oBACzB;cAAW,KACX;cAEA;;OAAI,WAAW,QAAS,SACpB;SAAI,OAAO,GAAG,SACd;UAAK,GAAI,QAAQ,YACb;eAAS,QAAQ,KAAK,GAAG,MACzB;eAAS,QAAQ,KAAK,GAAG,MACzB;UAAG,OAAQ,MAAM,KAAM,aAAa,eAAe,QAAS,QAAQ,IAAI,MAAM,QAAS,QAAQ,IAClG;AACD;eAAU,KACb;AAID;;OAAI,eAAe,YAAY,UAAU,KAAK,KAE9C;;gBAAa,QAAQ,OAAO,KAAK,KAAK,SAEtC;;YAAS,eAAgB,KAAK,QAC1B;QAAG,OAAQ,mBAAmB,MAAM,MAAM,MAAO,gBAAgB,SAAS,MAC1E;QAAG,OAAQ,oBAAoB,MAAM,MAAM,MAAO,gBAAgB,SAAS,IAC9E;AAED;;gBAAa,UAAU,QAAQ,KAAK,UAAS,GACrC;YAAO,CACV;AAFL,MAEO,QAAQ,OAAO,QACjB,KAAK,aAAa,UAAS,GAAG,GAAG,GAC9B;YAAO,eAAe,QAAQ,YAAY,OAAO,QAAQ,aAAa,WAAW,SAAS,IAAI,MAAM,QAAQ,YAAY,QAAQ,cACnI;AALL,MAMK,KAAK,MAAM,SACX,MAAO,aAAa,QAAQ,WAC5B,KAAK,UAAS,GACX;YACH;AAVL,MAUO,GAAI,aAAa,UAAU,GAC1B;oBAAgB,SAAS,GAC5B;AAZL,MAYO,GAAI,YAAY,UAAU,GACzB;oBAAgB,SAAS,GAC5B;AAIL;;gBAAa,UAAU,QAAQ,KAAK,UAAS,GACrC;YAAO,CACV;AAFL,MAEO,QAAQ,OAAO,QACjB,KAAK,KAAK,GACV,KAAK,KAAK,UAAS,GAAG,GAAG,GACtB;YAAO,QAAQ,aAAa,WAAW,SAAS,IACnD;AANL,MAOK,KAAK,SAAS,QAAQ,WACtB,KAAK,UAAU,QAAQ,WACvB,KAAK,SAAS,QACd,MAAM,QAAQ,UAAS,GAAG,GAAG,GAC1B;YAAO,YACV;AAZL,MAYO,GAAI,aAAa,UAAU,GAC1B;oBAAgB,SAAS,GAC5B;AAdL,MAcO,GAAI,YAAY,UAAU,GACzB;oBAAgB,SAAS,GAC5B;AAGH;;OAAI,OAAO,EAAE,MAAO,YAAY,YAAY,SAC5C;QAAM,UAAU,EAAE,SAClB;eAAY,KAEb;;KAAE,KAAM,YAAY,UAAU,UAAU,KAErC;;SAAI,aAAa,YACjB;SAAI,aAAa,oBAAU,GACvB;AACA;WAAI,YAAY,EAAE,MACd;gBAAO,EAAE,KACZ;AACD;WAAI,SAAS,EAAE,MACX;aAAI,YAAY,EAAE,KAAK,QACnB;kBAAO,EAAE,KAAK,OACjB;AACJ;AACD;cACH;AAEF;;SAAI,eAAe,sBAAU,GACxB;WAAI,SAAS,YAAY,EAAE,QACvB;gBAAO,EAAE,OACZ;AAFD,cAGI;aAAI,YAAY,GACZ;kBAAO,EACV;AACJ;AACD;cACH;AAGD;;SAAI,CAAC,iBACD;WAAI,WAAW,IAAI,OACd,EAAE,UAAS,GAAM;gBAAO,EAAE,EAAa;AADhC,UAEP,GAAG,UAAS,GAAK;gBAAO,EAAE,WAAiB;AAFpC,UAGP,GAAG,UAAS,GAAK;gBAAO,EAAO;AAHxB,UAIP,YAEF;;WAAI,OAAO,QACP,MAAM,aACN,QAAS,SAAS,MAClB,MAAO,QAAQ,YACf,MAAO,UAAU,YACjB,KAAK,KAAK,OACV,KAAM,eAAe,SAC/B;AAED;;kBAAa,QAAS,UAAU,GAC5B;WAAI,OAAQ,UAAU,KAAM,MAAM,EAAE,EAAE,UAAU,KAAM,MAAM,EAAE,aAAc,KAAK,KAAM,KAAK,KAC3F,QAAS,QAAQ,MACjB,MAAO,QAAQ,YACf,MAAO,UAAU,YACjB,KAAM,SAAS,WAAW,QAAQ,aACtC;AAED;;SAAI,gBAAgB,IAAI,OACnB,EAAE,UAAS,GAAM;cAAO,EAAE,EAAa;AAD3B,QAEZ,EAAE,UAAS,GAAK;cAAO,EAAE,aAAmB;AAFhC,QAGZ,YAEF;;SAAI,OAAO,QACP,MAAM,cACN,QAAS,UAAU,MACnB,MAAO,UAAU,YACjB,KAAK,KAAK,YACV,KAAM,gBAAgB,SAGhC;AAGA;;AACD;OAAI,SAAS,IAAI,OAAO,KACnB,KAAK,SAAS,UACd,KAAK,aAAa,iBAAiB,SAAS,KAC5C,MAAO,aAAa,QAAQ,WAC5B,KAEL;;UAAO,UAAW,QAAQ,KAAK,aAAa,cACvB,KAAK,MAAM,OACX,KAAK,MAG1B;;UAAO,OAAO,QACT,KAAK,KAAK,OACV,KAAK,MAAM,SACX,MAAM,eAAe,OACrB,MAAO,aAAa,QAAQ,WAC5B,KAIN;;AACC;OAAI,OAAO,KACN,KAAK,SAAS,UACd,MAAO,aAAa,QAAQ,WAC5B,KAAK,OACL,OAAO,QACP,MAAO,aAAa,QAAQ,WAC5B,KAAK,aAAa,eAClB,KAAK,KAAK,GACV,KAAK,MAAM,SACX,MAAM,eAAe,OACrB,KAAK,UAEb;;;AAED,QAAO,QAAQ,uBAAuB;AACtC,QAAO,QAAQ,oBAAoB;AACnC,QAAO,QAAQ,iBAAiB;AAChC,QAAO,QAAQ,yBAAyB;AACxC,QAAO,QAAQ,8CAA8C;AAC7D,QAAO,QAAQ,yBAAyB;AACxC,QAAO,QAAQ,6BAA6B;AAC5C,QAAO,QAAQ,oBAAoB;AACnC,QAAO,QAAQ,uBAAuB;AACtC,QAAO,QAAQ,2BAA2B;AAC1C,QAAO,QAAQ,YAAY;AAC3B,QAAO,QAAQ,YAAY;AAC3B,QAAO,QAAQ,aAAa;AAC5B,QAAO,QAAQ,eAAe;AAC9B,QAAO,QAAQ,UAAU;AACzB,QAAO,QAAQ,SAAS;AACxB,QAAO,QAAQ,mBAAmB,+B;;;;;;;;;;ACx/BlC,KAAI,WAAW,oBAAQ;;AAEvB,KAAI,yBAAyB,gCAAS,KACpC;KAAE,oBAAoB,KACtB;KAAE,eACH;AAHD;;AAKA,UAAS,UAAU,KAAK,WAAW,SACjC;OAAI,MAAM,IAEV;;OAAI,UAEJ;;OAAI,SAAS,SAAS,SACpB;SAAI,SAAS,SAAS,eACtB;YAAO,QAAQ,IACf;YAAO,SAAS,IAEhB;;SAAI,MAAM,OAAO,WACjB;SAAI,YACJ;SAAI,SAAS,GAAG,GAAG,OAAO,OAAO,OACjC;SAAI,UAAU,KAAK,GAAG,GAAG,OAAO,OAAO,OAEvC;;SAAG,OAAO,UACR;WAAI,OAAO,OAAO,SAClB;iBACA;cAAO,UAAU,WAAW,MAC7B;AAJD,YAKE;cAAO,OACR;AACF;AAED;;OAAI,MACL;;;AAED,KAAI,+BAA+B,sCAAS,MAC1C;UAAO,GAAG,IAAI,OACd;OAAI,SAAS,MACX;SAAI,MAAM,SAAS,cACnB;SAAI,aAAa,QAAQ,iCAAiC,mBAC1D;SAAI,aAAa,YACjB;SAAI,YACJ;SAAI,YACJ;OAAE,QAAQ,OACV;SACA;SACD;AACF;AAZD;;AAcA,KAAI,wBAAwB,+BAAS,MAAM,WAEzC;;OAAI;YAEF;YACA;UAGF;AALE;;YAKO,WAAW,KAElB;;cAAS,mBAAmB,IAC1B;WACE;aAAI,GAAG,UACL;gBAAK,IAAI,IAAI,GAAG,IAAI,GAAG,SAAS,QAAQ,KACtC;iBAAI,OAAO,GAAG,SACd;iBAAI,KAAK,SAAS,GAChB;AACA;kCAAmB,KACpB;AAHD,oBAIE;AACA;mBAAI,KAAK,cACP;qBAAI,KAAK,aAAa,QAAQ,SAAS,CAAC,GACtC;6BAAU,OAAO,KAClB;AACF;AACF;AACF;AACF;AACF;AAjBD,SAiBE,OAAO,GACP;iBAAQ,IAAI,oCACb;AACF;AAED;;SAAI,SAAS;SACX,cAAc,IAEhB;;SAAI,aACF;YAAK,IAAI,IAAI,GAAG,IAAI,YAAY,QAAQ,KACtC;4BAAmB,YACpB;AACF;AAED;;YAED;AAED;;OAAI,qBAAqB,4BAAS,cAEhC;;SAAI,QAAQ,SAAS,eAErB;;WAAM,SAAS,YAEb;;WAAI,SAAS,SAAS,eACtB;cAAO,QAAQ,MACf;cAAO,SAAS,MAChB;WAAI,UAAU,OAAO,WACrB;eAAQ,YACR;eAAQ,SAAS,GAAG,GAAG,MAAM,OAAO,MACpC;eAAQ,UAAU,OAAO,GACzB;WAAI,MAAM,OAAO,UACjB;WAAI,MAAM,SAAS,cACnB;WAAI,aAAa,YACjB;WAAI,OAAO,OAAO,UAClB;SAAE,QAAQ,OACV;WACA;WAED;AAED;;WAAM,MAEP;AAED;;OAAI,MAAM,EAAE,WAAW,KAAK,OAC5B;OAAI,CAAC,KACH;WAAM,EAAE,WACT;AAED;;OAAI,SAAS,WAAW,OAExB;;OAAI,aAAa,WAEjB;;OAAI,SAAS,SAAS,cACtB;OAAI,aAAa,QAAQ,IAEzB;;OAAI,UAAU,SAAS,cACvB;UAAO,YACP;WAAQ,aAAa,QAGrB;;AACA;OAAI,gBACJ;OAAI,gBAEJ;;AACA;OAAI,CAAC,IAAI,eAAe,OAAO,OAAO,UACpC;SAAI,eAAe,OAAO,OAAO,SAAS,OAC3C;AAED;;OAAI,CAAC,IAAI,eAAe,OAAO,OAAO,gBACpC;SAAI,eAAe,OAAO,OAAO,eAAe,OACjD;AAED;;OAAI,SAAU,IAAI,gBAAiB,kBAAkB,KAAK,QAAQ,YAAY,cAAc,SAC5F;OAAI,OAAO,IACX;OAAI,UACJ;OAAI,cAAc,CAAC,UACnB;OAAI,eAAe,+BAA+B,mBAElD;;OAAI,UAAU,YAAc;AAC1B;cAAS,cAAc,aACxB;AAFD,cAEW,QAAQ,OACjB;eAAU,cACR,UAAS,MACP;WAAI,MAAM,OAAO,IAAI,gBACrB;WAAI,MAAM,SAAS,cACnB;WAAI,aAAa,YACjB;WAAI,aAAa,QACjB;SAAE,QAAQ,OACV;WACA;WACD;AATH,QAUE,UAAS,OACP;eAAQ,IACT;AACJ;AAdM,UAeL;SAAI,MAAM,SAAS,cACnB;SAAI,aAAa,YACjB;SAAI,aAAa,QACjB;OAAE,QAAQ,OACV;SACA;SACD;AAEF;AAtID;;AAwIA,KAAI,2BAA2B,oCAE7B;;AACA;OAAI,EAAE,MAAM,MAAM,WAAW,GAC3B;OAAE,MAAM,KAAK,eACb;OAAE,MAAM,SAAS,YACjB;OAAE,MAAM,SAAS,SAEjB;;YAAO;cAEL;aAAM;AADN,QAEC,YAAY,EAEhB;AAVD,cAUW,MAAM,KAAK,MAAM,EAAE,MAAM,SAClC;OAAE,MAAM,KAAK,eACb;OAAE,MAAM,SAAS,YACjB;OAAE,MAAM,SAAS,SAEjB;;YAAO;cAEL;aAAM;AADN,QAEC,YAAY,EAEhB;AAVM,UAWL;OAAE,MAAM,SAAS,YACjB;OAAE,MAAM,SAAS,SACjB;OAAE,MAAM,KAAK,eACd;AAEF;AA7BD;;AA+BA,UAAS,sBAAsB,KAC7B;OAAI,SAAS;OACX,cAAc,IAEhB;;OAAI,aACF;UAAK,IAAI,IAAI,GAAG,IAAI,YAAY,QAAQ,KACtC;yBAAkB,YACnB;AACF;AAED;;YAAS,kBAAkB,IACzB;SAAI,GAAG,UACL;YAAK,IAAI,IAAI,GAAG,IAAI,GAAG,SAAS,QAAQ,KACtC;aAAI,OAAO,GAAG,SACd;aAAI,KAAK,SAAS,GAChB;AACA;6BAAkB,KACnB;AAHD,gBAIE;AACA;eAAI,KAAK,cACP;iBAAI,KAAK,aAAa,QAAQ,SAAS,CAAC,GACtC;yBAAU,OAAO,KAClB;AACF;AACF;AACF;AACF;AACF;AACD;UACD;;;AAED,UAAS,iCACP;OAAI,sBACJ;OAAI,MAAM,EAAE,qBAAqB,KACjC;OAAI,MAAM,SAAS,cACnB;OAAI,aAAa,QAAQ,0CAA0C,mBACnE;OAAI,aAAa,YACjB;KAAE,QAAQ,OACV;OACA;OACD;;;AAED,UAAS,8BAA8B,cACrC;OAAI,QAAQ,SAAS,eACrB;SAAM,MAEN;;SAAM,SAAS,YACb;SAAI,SAAS,SAAS,eACtB;YAAO,QAAQ,MACf;YAAO,SAAS,MAChB;SAAI,UAAU,OAAO,WACrB;aAAQ,YACR;aAAQ,SAAS,GAAG,GAAG,MAAM,OAAO,MACpC;aAAQ,UAAU,OAAO,GACzB;SAAI,MAAM,OAAO,UAEjB;;SAAI,MAAM,SAAS,cACnB;SAAI,aAAa,YACjB;SAAI,OAAO,OAAO,UAClB;OAAE,QAAQ,OACV;SACA;SACD;AACF;;;AAED,UAAS,4BAA4B,MAEnC;;OAAI;YAEF;YACA;UAGF;AALE;;OAKE,iBACJ;OAAI,MAAM,EAAE,mBAAmB,KAAK,OACpC;OAAI,SAAS,sBAAsB,OAEnC;;OAAI,aAAa,WAEjB;;OAAI,SAAS,SAAS,cACtB;OAAI,aAAa,QAAQ,IAEzB;;OAAI,UAAU,SAAS,cACvB;UAAO,YACP;WAAQ,aAAa,QAGrB;;AACA;OAAI,gBACJ;OAAI,gBAEJ;;AACA;OAAI,CAAC,IAAI,eAAe,OAAO,OAAO,UACpC;SAAI,eAAe,OAAO,OAAO,SAAS,OAC3C;AAED;;OAAI,CAAC,IAAI,eAAe,OAAO,OAAO,gBACpC;SAAI,eAAe,OAAO,OAAO,eAAe,OACjD;AAED;;OAAI,SAAU,IAAI,gBAAiB,kBAAkB,KAAK,QAAQ,YAAY,cAAc,SAC5F;OAAI,OAAO,IACX;OAAI,UACJ;OAAI,cAAc,CAAC,UACnB;OAAI,eAAe,+BAA+B,mBAElD;;OAAI,QAAQ,OACV;mCACD;AAFD,UAGE;SAAI,MAAM,SAAS,cACnB;SAAI,aAAa,YACjB;SAAI,aAAa,QACjB;OAAE,QAAQ,OACV;SACA;SACD;AAEF;;;AAED,UAAS,0BAA0B,OACjC;OAAI,EAAE,MAAM,KAAK,8BAA8B,GAAG,SAChD;SAAI,QACJ;SAAI,MAAM,KAAK,EAAE,MAAM,KAAK,sBAAsB,QAChD;AACA;SAAE,MAAM,YACR;SAAE,MAAM,SACR;SAAE,MAAM,KAAK,eACd;AALD,YAME;SAAE,MAAM,KAAK,eACb;SAAE,MAAM,YACR;SAAE,MAAM,YACR;SAAE,MAAM,SACR;WAAI,cAAc;gBAEhB;eAAM;AADN,QADS,EAGR,YAAY,EAChB;AACF;AAjBD,UAkBE;OAAE,MAAM,YACR;OAAE,MAAM,YACR;OAAE,MAAM,KAAK,eACd;AAEF;;;AAED,UAAS,2BAA2B,QAAQ,SAE1C;;OAAI,IAEJ;;OAAI,OAAO,QAEP;;YAAO,KAAK,GAEZ;;SAAI;cACK,GAAG,IACV;cAAO,GAAG,IACV;iBAAU,GAAG,OACb;aAAM,GAAG,SAAS,QAClB;aAAM,GAAG,SAAS,QAClB;eAAQ,GAAG,KAEf;AAPI;AALN,UAaI;SAAI;cAEF;cACA;iBACA;aACA;aACA;eAGJ;AARI;AAUN;;OAAI,SAEF;;SAAI,kBAAkB,EAAE,SAAS,MAAM,EAAE,SAAS,OAAO,aAAa,EAAE,QAAQ,MAAM,EAAE,QAAQ,OAAO,aAAa,EAAE,UAAU,OAAO,aAAa,EAAE,YAAY,OAElK;;AAMD;;;;;;AAED;;UAED;;;AAED,UAAS,0BAA0B,MAAM,UAAU,UAEjD;;YAAS,cACP;SAAI,KAAK,OAAO,UAChB;SAAI,OAAO,GAAG,QACd;SAAI,OAAO,KAAK,CAAC,CAAC,UAAU,UAAU,MAAM,sBAC1C;cACD;AACD;YACD;AAED;;OAAI,eACF;SAAI,WAAW,OACf;cAAS,SAAS,MAClB;cAAS,SACT;cAAS,SAAS,YAAY,UAAU,MAAM,WAC9C;cACD;AAND,UAOE;SAAI,MAAM,SAAS,cACnB;SAAI,aAAa,QAAQ,WAAW,YAAY,gBAAgB,oBAAoB,mBACpF;SAAI,aAAa,YAAY,YAC7B;SACA;SACD;AAEF;;;AAED,UAAS,yBAAyB,UAAU,KAC1C;SAAM,OACN;OAAI,aACJ;MAAG,OAAO,WAAW,UAAU,UAAU,MAAM,KAAK,YAClD;gBAAW,KAAK,GAAG,OAAO,MAC3B;AACD;OAAI,YACJ;MAAG,OAAO,WAAW,UAAU,UAAU,MAAM,KAAK,UAAS,GAAG,GAC9D;eAAU,KACV;QAAG,OAAO,MAAM,UAAU,MAAM,KAAK,YACnC;iBAAU,GAAG,KAAK,GAAG,OAAO,MAC7B;AACF;AAED;;UAAO,WAAW,KAAK,OAAO,iBAClB,IAAI,UAAS,GACrB;YAAO,EAAE,KACV;AAFD,MAEG,KACN;;;AAED,UAAS,sBAAsB,GAC7B;OAAI,EAAE,SAAS,GACb;YAAO,EAAE,GAAG,gBAAgB,EAAE,MAC/B;AAFD,UAGE;YACD;AACF;;;AAED,UAAS,4BAA4B,MACnC;OACE;YAAO,EAAE,KAAK,MACf;AAFD,KAEE,OAAO,GACP;AACD;AACD;UACD;;;AAED,UAAS,eAAe,QAAQ,UAC9B;cAAW,YAAY,UAAS,OAC9B;YACD;AACD;YAAS,OAAO,QAAQ,UAAS,KAAK,OAAO,OAC3C;YAAO,MAAM,SAAS,OACvB;AAFM,MAGR;;;AAED,UAAS,uCAAuC,MAC9C;OACE;2BAAsB,KAAK,eAAe,UAAS,OACjD;cAAO,MAAM,YAAY,GAC1B;AACF,MAHQ;AADT,KAIE,OAAO,GACP;AACD;AACD;UACD;;;AAED,UAAS,uBAAuB,MAAM,WAAW,SAC/C;OAAI,SACJ;eAAY,EAAE,KAAK,WACnB;KAAE,KAAK,QAAQ,KAAK,UAAS,OAAO,KAClC;SAAI,UAAU,OAAO,MACnB;cAAO,OACR;AACF;AAJY,MAKb;UACD;;;AAED,UAAS,oBAAoB,MAAM,WAAW,SAC5C;OAAI,SACJ;eAAY,EAAE,KAAK,WACnB;KAAE,KAAK,QAAQ,KAAK,UAAS,OAAO,KAClC;YAAO,OAAO,UAAU,OACzB;AAFY,MAGb;UACD;;;AAED,QAAO,QAAQ,aAAa;AAC5B,QAAO,QAAQ,oBAAoB;AACnC,QAAO,QAAQ,aAAa;AAC5B,QAAO,QAAQ,gBAAgB;;AAE/B,QAAO,QAAQ,sBAAsB;AACrC,QAAO,QAAQ,qBAAqB;AACpC,QAAO,QAAQ,mBAAmB;AAClC,QAAO,QAAQ,iBAAiB;AAChC,QAAO,QAAQ,kBAAkB;AACjC,QAAO,QAAQ,gBAAgB;AAC/B,QAAO,QAAQ,iBAAiB;AAChC,QAAO,QAAQ,aAAa;AAC5B,QAAO,QAAQ,sBAAsB;AACrC,QAAO,QAAQ,+BAA+B;AAC9C,QAAO,QAAQ,MAAM;AACrB,QAAO,QAAQ,SAAS;AACxB,QAAO,QAAQ,MAAM,oB;;;;;;;;AC7gBrB,iIAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA,EAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;;AAEA,6BAA4B;AAC5B;AACA;AACA;AACA;;;AAGA,+BAA8B;AAC9B;AACA,sBAAqB;AACrB,0CAAyC;AACzC;AACA;AACA;AACA,oC;AACA;AACA;AACA,iCAAgC,cAAc,KAAK;AACnD;AACA,KAAI;AACJ,IAAG;;;AAGH;AACA,oCAAmC;;AAEnC;AACA;AACA;AACA,KAAI,K;AACJ;AACA;AACA,sBAAqB;AACrB;;AAEA,IAAG,KAAK;AACR,sC;AACA;AACA,WAAU,KAAK;AACf,uCAAsC,eAAe;AACrD,K;AACA;AACA;AACA;AACA,2BAA0B,eAAe;;;AAGzC;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAS,KAAK;;AAEd,gCAA+B,WAAW;AAC1C;;AAEA;;AAEA,+BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,sBAAsB,wCAAwC;AACtF,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B,oHAAmH,mBAAmB;AACtI;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAsC;AACtC;AACA;AACA;AACA,0BAAyB,8BAA8B,EAAE;;AAEzD,IAAG;;;;;AAKH,8BAA6B;AAC7B;AACA;;AAEA,gBAAe;AACf;AACA,IAAG;AACH;AACA;AACA;AACA,8CAA6C;AAC7C,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH,EAAC;;;;;;;;;;ACtKD,KAAI,KAAK,oBAAQ;KACf,IAAI,oBAAQ;;AAEd,UAAS,4BAA4B,QAAQ,GAAG,GAAG,IAAI,QAAQ,OAC3D;OAAI,yBAAyB,GAAG,KAAK,OACrC;OAAI,sBAAsB,GAAG,OAC7B;OAAI,8BAA8B,GAAG,KAAK,OAE5C;;OAAI;UAEA;YACA;aACA;WAAM;AAHN;OAKF,QAAQ,IAAI,OAAO,OAAO,OAAO;OACjC,SAAS,IAAI,OAAO,MAAM,OAG5B;;OAAI,KAAK,QAAQ,GAAG,KAAK,UAAU,GAAG,MAAM,UACzC,UAAU,OAAO,QAAQ,UAAS,GACjC;YAAO,EACR;AAFO,KADF,EAIL,MAAM,CAAC,GAEV;;OAAI,KAAK,QAAQ,GAAG,KAAK,UAAU,GAAG,MAAM,UACzC,UAAU,OAAO,QAAQ,UAAS,GACjC;YAAO,EACR;AAFO,KADF,EAIL,MAAM,CAAC,QAEV;;OAAI,QAAQ,GAAG,IAAI,OAChB,MAAM,GACN,OAAO,UAAU,WAAW,QAAQ,8BAEvC;;OAAI,QAAQ,GAAG,IAAI,OAChB,MAAM,GACN,OAAO,QAAQ,WAAW,QAAQ,8BAErC;;OAAI,gBAAgB,GAAG,OAAO,IAAI,UAElC;;OAAI,CAAC,cAAc,SACjB;mBACD;AAED;;mBAAgB,GAAG,OAAO,IAAI,OAAO,OAAO,KAAK,SAAS,GAAG,KAAK,UAAU,GAAG,OAAO,KAAK,KAAK,aAAa,eAAe,OAAO,OAAO,MAAM,OAAO,MAEvJ;;YAAS,cAAc,UAAU,UAAU,KAC3C;UAAO,QAAQ,OAEf;;UAAO,KAAK,MAAM,UAAS,GACzB;YAAO,EAAE,EACV;AAFD,MAEG,KAAK,MAAM,UAAS,GACrB;YAAO,EAAE,EACV;AAJD,MAIG,KAAK,KAAK,GAAG,QAAQ,gBAExB;;UAAO,KAAK,UAAS,GACnB;SAAI,WAAW,GACb;UAAG,OAAO,MAAM,OAAO,SAAS,KAAK,EACtC;AACF;AAED;;OAAI,SAAS,cAAc,OAAO,KAC/B,KAAK,SAAS,UACd,KAAK,aAAa,iBAAiB,SAAS,KAC5C,KAGH;;UAAO,UAAU,QAAQ,KAAK,aAAa,eAAe,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,MAAM,eACxG;UAAO,OAAO,QAAQ,KAAK,OAAO,GAAG,KAAK,aAAa,eAAe,QAAQ,OAAO,KAAK,MAAM,QAAQ,KAAK,eAE7G;;OAAI,SAAS,cAAc,OAAO,KAC/B,KAAK,SAAS,UACd,KAAK,aAAa,iBAAiB,IAAI,KACvC,KAEH;;UAAO,UAAU,QAAQ,KAAK,aAAa,eAAe,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,MAAM,eACxG;UAAO,OAAO,QAAQ,KAAK,OAAO,GAAG,KAAK,aAAa,eAAe,KAAK,MAAM,OAAO,KAAK,eAE9F;;;AAED,QAAO,QAAQ,cAAc,4B;;;;;;;;;AChF7B,KAAI,KAAK,oBAAQ;KACf,IAAI,oBAAQ;;AAEd,UAAS,2BAA4B,MAAM,GAAG,GAAG,IAAI,SAAS,SAAS,SAAS,WAAW;;SAEnF,YAAY,YAEhB;;SAAI,YAAY,GAAG,OAEnB;;SAAI;cACS,YACL;gBAAO,YACP;iBAAQ,IACR;eAAM,IAAI;AAHV;SAMJ,QAAS,IAAI,OAAO,OAAO,OAAO;SAClC,SAAS,IAAI,OAAO,MAAM,OAAO;SACjC,YAAY,WAAY;SACxB,YAAY,YAIZ;;SAAI,IAAI,GAAG,KAAK,QACX,MAAM,CAAC,GAEZ;;SAAI,IAAI,UAAU,UAAU,GAAG,MAG/B;;OAAE,MAAM,CAAC,QAIT;;SAAI,QAAQ,GAAG,IAAI,OACd,MAAM,GACN,OAAO,UA9BhB,CAgCI;;SAAI,QAAQ,GAAG,IAAI,OACd,MAAM,GACN,OAAO,QAAQ,MAAO,GAAG,YAAY,MAG1C;;OAAE,UAAU,OAAO,WAAW,UAAS,GACnC;gBAAO,EACV;AAFQ,SAEL,MAGJ;;SAAI,aAAa,OAAO,WAAW,UAAS,GACxC;gBAAO,EAAE,IAAK,EACjB;AAED,MAJc;;SAIV,aAAa,CAAC,UAAU,GAAG,KAAK,eAAgB,UAAU,UAAU,SAAO,GAAG,KAGlF;;OAAE,KAAM,QAAQ,UAAU,GAAG,MACzB;aAAI,QAAQ,WAAW,MAAM,QAAQ,WAAW,IAC5C;iBAAI,SAAS,IAAK,GAAG,UAAU,GAAI;wBAAO,EAAE,MAAM,YAAY,IAAI,EAAM;AACxE,cADW;qBACH,KAAK,KAAK,IAAK,QAAQ,IAAI,KAEtC;AACJ;AAID;;OAAE,OAAQ,CAAC,KAAK,QAAQ,KAGxB;;SAAI,gBAAgB,OAAO,OAAM;AAAvB,MACL,KAAK,SAAS,QAAQ,OAAO,OAAO,OAAO,OAC3C,KAAK,UAAU,SAAS,OAAO,MAAM,OAG1C;;SAAI,cAAc,IAAI,OAAO,KAAK,KAAK,aAAa,gBAAgB,OAAO,OAAO,YAAY,OAAO,OAAO,OAAO,MAAM,aAEzH;;WAAM,IAAI,OAAO,KACZ,KAAK,aAAa,eAAe,OAAO,OAAO,MAAM,OAAO,MAGjE;;AAEA;;SAAI,cAAc,GAAG,MAErB;;SAAI,eAAe,IAAI,UAAU,GAAG,MAAM,UAAS,GAAE,GACjD;gBACH;AAED,MAJiB;;gBAMjB;;SAAI,eAAe,YAAY,UAAU,KAAK,KAE9C;;kBAAa,QAAQ,OAAO,KAAK,KAAK,SAEtC;;kBAAa,UAAU,QAAQ,KAAK,UAAS,GACrC;gBAAO,CACV;AAFL,QAEO,QAAQ,OAAO,QACjB,KAAK,aAAa,UAAS,GAAG,GAAG,GAC9B;gBAAO,eAAe,YAAY,OAAO,aAAa,WAAW,SAAS,IAAI,MAAM,YAAY,cACnG;AALL,QAMK,KAAK,MAAM,SACX,KAAK,UAAS,GACX;gBACH;AAEL;;AAEA;;kBAAa,UAAU,QAAQ,KAAK,UAAS,GACrC;gBAAO,CACV;AAFL,QAEO,QAAQ,OAAO,QACjB,KAAK,KAAK,GACV,KAAK,KAAK,UAAS,GAAG,GAAG,GACtB;gBAAO,aAAa,WAAW,SAAS,IAC3C;AANL,QAOK,KAAK,SAAS,WACd,KAAK,UAAU,WACf,KAAK,SAAS,QACd,MAAM,QAAQ,UAAS,GAAG,GAAG,GAC1B;gBAAO,YACd;AAED;;OAAE,KAAM,YAAY,UAAU,UAAU,KAEpC;;aAAI,aAAa,YAEjB;;aAAI,aAAa,oBAAU,GAAI;oBAAO,EAAE,KAAe;AACvD;aAAI,cAEJ;;cAAK,IAAI,WAAW,IAAI,KAAK,WAAW,IAAI,KACxC;iBAAI,KAAK,QACL;4BAAW,OAAO,GAClB;4BAAW,SACX;6BAAY,KAAM,EAAC,KAAM,IAAI,KAAM,GAAG,GAAG,IAAI,KAChD;AACJ;AAID;;aAAI,kBAAkB,OAAO,KAAK,KAAK,KAEvC;;aAAI,4BAA6B,IAAK,UAAU,GAAI;oBAAO,CAAC,CAAC,EAAE,OAAO,EAAE,SAAU,MAAI,iBAAiB,EAAS;AAEhH,UAFqB,CAAZ;;AAST;;;;;;;aAAI,UAAU,IAAI,OACb,EAAE,UAAS,GAAK;oBAAO,EAAE,EAAU;AAD7B,YAEN,EAAE,UAAS,GAAK;oBAAO,EAAE,EAAU;AAF7B,YAGN,YAEJ;;aAAI,OAAO,QACT,MAAM,aACN,QAAS,QAAQ,MACjB,MAAO,UAAU,YACjB,KAAK,KAER;;AAYA;;;;;;;;;;qBAAY,QAAS,UAAU,GAC3B;iBAAI,OAAQ,UAAU,KAAM,MAAM,EAAE,EAAE,OAAO,KAAM,MAAM,EAAE,EAAE,OAAO,KAAM,KAAK,KAC9E,QAAS,QAAQ,MACjB,MAAO,QAAQ,YACf,MAAO,UACX;AAED;;qBAAY,QAAS,UAAU,GAC3B;iBAAI,OAAQ,QAAQ,KAAM,KAAK,EAAE,EAAE,QAAQ,GAAG,KAAM,KAAK,EAAE,EAAE,QAAQ,GACpE,KAAM,EAAE,MAAK;cACb,KAAM,MAAM,MAAI,MAAM,OAC1B;AAED;;aAAI,WAAW,IAAI,OACd,EAAE,UAAS,GAAK;oBAAO,EAAE,EAAU;AAD5B,YAEP,GAAG,UAAS,GAAK;oBAAO,EAAE,WAAiB;AAFpC,YAGP,GAAG,UAAS,GAAK;oBAAO,EAAO;AAHxB,YAIP,YAEF;;aAAI,OAAO,QACP,MAAM,WACN,QAAS,SAAS,MAClB,MAAO,QAAQ,YACf,MAAO,UAAU,YACjB,KAAK,KACf;AAIA;;AACD;SAAI,OAAO,KACN,KAAK,SAAS,UACd,KAAK,aAAa,iBAAiB,SAAS,KAC5C,KAAK,OACL,OAAO,QACP,KAAK,KAAK,OACV,KAAK,MAAM,UACX,MAAM,eAAe,OACrB,KAIN;;AACC;SAAI,OAAO,KACN,KAAK,SAAS,UACd,KAAK,OACL,OAAO,QACP,KAAK,aAAa,eAClB,KAAK,KAAK,GACV,KAAK,MAAM,SACX,MAAM,eAAe,OACrB,KAAK,UAEV;;AACA;AAGP;;;;;AAED,SAAQ,aAAa,2B;;;;;;;;;ACrOrB,KAAI,KAAK,oBAAQ;KACf,IAAI,oBAAQ;;AAEd,UAAS,mBAAmB,OAAO,eAAe,iBAEhD;;OAAI,qBAAqB,GAAG,OAC5B;OAAI,cAAc;OAChB,cAEF;;6BAA0B,MAAM,WAAW,iBACzC,MAAM,WAAW,WACjB,aACA,aAGF;;OAAI,QAAQ,kEAAkE,MAAM,WAAW,WAAW,oCACxG,mBAAmB,MAAM,WAE3B;;OAAI,MAAM,WAAW,aAAa,WAChC;cAAS,cAAc,mBAAmB,MAAM,WAAW,UAAU,MAAM,QAAQ,mBAAmB,MAAM,WAAW,UAAU,MAClI;AAED;;MAAG,OAAO,iBAAiB,KAC5B;;;AAED,UAAS,6BAA6B,OAAO,eAAe,iBAE1D;;OAAI,qBAAqB,GAAG,OAC5B;OAAI,cAAc;OAChB,cAEF;;OAAI,iBAAiB,IAAI,MAAM,UAAU,UAAS,MAChD;YAAO,KACR;AAGD,IALmB;;wCAKkB,cACnC,aACA,aAGF;;OAAI,QACJ;MAAG,OAAO,iBAAiB,KAC5B;;;AAED,UAAS,qCAAqC,MAAM,GAAG,GAAG,IAExD;;OAAI;UAEA;YACA;aACA;WAAM;AAHN;OAKF,QAAQ,IAAI,OAAO;OACnB,SAAS,IAAI,OAAO,MAAM,OAE5B;;OAAI,gBAAgB,GAAG,OAAO,IAAI,UAElC;;OAAI,eACF;mBACD;AAED;;OAAI,KAAK,SAAS,GAEd;;SAAI,iBAAiB,GAAG,OAAO,YAE/B;;SAAI,IAAI,GAAG,MAAM,SACd,OAAO,GAAG,OAEb;;SAAI,OAAO,MAAM,SACd,QAAQ,MAAM,MAAM,IAAI,gBAAgB,UAAS,GAChD;cAAO,EACR;AAFkB,OAAP,CAAJ,CADF,EAGA,MAAM,CAAC,QAEf;;YAAO,QAAQ,KAAG,KAAK,KAAK,KAAK,MAAO,EAAE,SAC1C;cAAS,OACT;OAAE,MAAM,CAAC,GAET;;SAAI,QAAQ,GAAG,IAAI,OAChB,MAAM,GACN,OAEH;;SAAI,QAAQ,GAAG,IAAI,OAChB,MAAM,GACN,OAIH;;oBAAe,OAAO,GAAG;YAClB,EAAE,SACP;YACA;aAEF;AAJE;oBAIa,OAAO,eAAe,QAAQ;YACtC,EAAE,SACP;YACA;aAGF;AALE;;qBAKc,GAAG,OAAO,IAAI,OAAO,OAAO,oBACzC,KAAK,SAAS,QAAQ,OAAO,OAAO,OAAO,OAC3C,KAAK,UAAU,SAAS,OAAO,MAAM,OAAO,QAC5C,OAAO,KACP,KAAK,aAAa,eAAe,OAAO,OAAO,MAAM,OAAO,MAAM,KAClE,MAEH;;SAAI,oBAAoB,IAAI,OACzB,EAAE,UAAS,GACV;cAAO,EAAE,EAAE,IAAI,EAChB;AAHkB,QAIlB,EAAE,UAAS,GACV;cAAO,EAAE,EACV;AANkB,QAOlB,YAEH;;mBAAc,UAAU,QACxB;mBAAc,OAAO,QAClB,KAAK,KAAK,UAAS,GAClB;cAAO,eAAe,KACvB;AAHH,QAIG,KAAK,SAIR;;SAAI,SAAS,cAAc,OAAO,KAC/B,KAAK,SAAS,UACd,KAAK,aAAa,iBAAiB,SAAS,KAC5C,KAEH;;YAAO,UAAU,QAAQ,KAAK,aAAa,cAAc,KAAK,MAAM,OAAO,KAAK,MAEhF;;SAAI,uBAAuB,OAAO,KAC/B,KAAK,SACN;AAFW;AAAA,MAGV,KACJ;AAEJ;;;AAED,UAAS,0BAA0B,QAAQ,KAAK,GAAG,GAAG,IAEpD;;OAAI;UAEA;YACA;aACA;WAAM;AAHN;OAKF,QAAQ,IAAI,OAAO,OAAO,OAAO;OACjC,SAAS,IAAI,OAAO,MAAM,OAE5B;;OAAI,IAAI,GAAG,MAAM,SACd,OAAO,CAAC,GAAG,OAAO,SAAS,IAC3B,MAAM,CAAC,GAEV;;OAAI,IAAI,GAAG,MAAM,MACd,OAAO,CAAC,GAAG,GAAG,IAAI,UAClB,MAAM,CAAC,QAEV;;OAAI,QAAQ,GAAG,IAEf;;OAAI,QAAQ,GAAG,IAAI,OAChB,MAAM,GACN,OAEH;;OAAI,gBAAgB,GAAG,OAAO,IAAI,UAElC;;OAAI,eACF;mBACD;AAED;;OAAI,sBAAsB,IAAI,UAAS,GAAG,GACxC;;YACO,IACL;YAAK,IAER;AAHG;AAIJ,IANmB;gBAMN;UACN,OAAO,SACZ;UAEF;AAHE;gBAGW;UAEX;UAEF;AAHE;gBAGW;UAEX;UAAK,OAAO,KAGd;AAJE;;mBAIc,GAAG,OAAO,IAAI,OAAO,OAAO,oBACzC,KAAK,SAAS,QAAQ,OAAO,OAAO,OAAO,OAC3C,KAAK,UAAU,SAAS,OAAO,MAAM,OAAO,QAC5C,OAAO,KACP,KAAK,aAAa,eAAe,OAAO,OAAO,MAAM,OAAO,MAAM,KAClE,MAEH;;OAAI,oBAAoB,IAAI,OACzB,EAAE,UAAS,GACV;YAAO,EAAE,EACV;AAHkB,MAIlB,EAAE,UAAS,GACV;YAAO,EAAE,EACV;AANkB,MAOlB,YAEH;;iBAAc,UAAU,QACxB;iBAAc,OAAO,QAClB,KAAK,KAAK,UAAS,GAClB;YAAO,eAAe,KACvB;AAHH,MAIG,KAAK,SAIR;;OAAI,KACF;SAAI,cAAc,IAAI,OACnB,YAAY,UACZ,EAAE,UAAS,GAAG,GACb;cAAO,EAAE,IAAI,KAAK,CAAC,EAAE,IAAI,KAAK,EAAE,MACjC;AAJY,QAKZ,EAAE,UAAS,GACV;cAAO,EAAE,IAAI,IACd;AACH;mBAAc,OAAO,QAAQ,MAAM,KAChC,KAAK,SAAS,QACd,KAAK,KAAK,UAAS,GAClB;cAAO,SACR;AACJ;AAED;;OAAI,SAAS,cAAc,OAAO,KAC/B,KAAK,SAAS,UACd,KAAK,aAAa,iBAAiB,SAAS,KAC5C,KAEH;;UAAO,UAAU,QAAQ,KAAK,aAAa,cAAc,KAAK,MAAM,OAAO,KAAK,MACjF;;;AAED,SAAQ,YAAY;AACpB,SAAQ,qBAAqB,6B","file":"hivtrace.js","sourcesContent":["window.jQuery = window.$ = $; \n\nrequire(\"font-awesome/css/font-awesome.css\");\nrequire('./hivtrace.css');\nrequire('bootstrap');\n\nvar hivtrace = require('./hivtrace.js');\n\n// Create new hyphy-vision export\nwindow.hivtrace = hivtrace;\n\n\n\n// WEBPACK FOOTER //\n// ./src/entry.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/font-awesome/css/font-awesome.css\n// module id = 5\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/hivtrace.css\n// module id = 15\n// module chunks = 0","import Bootstrap from 'bootstrap/dist/css/bootstrap.css';\nimport {\n  clusterNetwork,\n  graphSummary\n} from './clusternetwork.js';\nimport {\n  histogram,\n  histogramDistances\n} from './histogram.js';\nimport {\n  scatterPlot\n} from './scatterplot.js';\n\nvar misc = require('./misc.js');\nvar helpers = require('./helpers.js');\n\nmodule.exports.clusterNetwork = clusterNetwork;\nmodule.exports.graphSummary = graphSummary;\nmodule.exports.histogram = histogram;\nmodule.exports.histogramDistances = histogramDistances;\nmodule.exports.helpers = helpers;\nmodule.exports.misc = misc;\nmodule.exports.scatterPlot = scatterPlot;\n\n\n// WEBPACK FOOTER //\n// ./src/hivtrace.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bootstrap/dist/css/bootstrap.css\n// module id = 31\n// module chunks = 0","var d3 = require(\"d3\"),\n  _ = require(\"underscore\"),\n  misc = require(\"misc\"),\n  helpers = require(\"helpers\"),\n  scatterPlot = require(\"scatterplot\"),\n  prevalence = require (\"prevalence\");\n\nvar _networkGraphAttrbuteID = \"patient_attribute_schema\";\nvar _networkNodeAttributeID = \"patient_attributes\";\nvar _networkMissing = \"missing\";\nvar _networkMissingOpacity = \"0.1\";\nvar _networkMissingColor = \"#999\";\nvar _networkContinuousColorStops = 9;\nvar _networkShapeOrdering = [\n  \"circle\",\n  \"square\",\n  \"hexagon\",\n  \"diamond\",\n  \"cross\",\n  \"octagon\",\n  \"ellipse\",\n  \"pentagon\"\n];\nvar _defaultFloatFormat = d3.format(\",.2r\");\nvar _defaultPercentFormat = d3.format(\",.3p\");\nvar _defaultDateFormats = [d3.time.format(\"%Y-%m-%dT%H:%M:%S.%LZ\"), d3.time.format(\"%Y-%m-%dT%H:%M:%S.%LZ\")];\nvar _defaultDateViewFormat = d3.time.format(\"%B %d, %Y\");\nvar _defaultDateViewFormatShort = d3.time.format(\"%B %Y\");\nvar _defaultDateViewFormatSlider = d3.time.format(\"%Y-%m-%d\");\nvar _networkDotFormatPadder = d3.format (\"08d\");\n\nvar _networkCategoricalBase = [\n  \"#a6cee3\",\n  \"#1f78b4\",\n  \"#b2df8a\",\n  \"#33a02c\",\n  \"#fb9a99\",\n  \"#e31a1c\",\n  \"#fdbf6f\",\n  \"#ff7f00\",\n  \"#cab2d6\",\n  \"#6a3d9a\",\n  \"#ffff99\",\n  \"#b15928\"\n];\n\nvar _networkCategorical = [];\n\n_.each ([0,-0.5,0.5], function (k) {\n    _.each (_networkCategoricalBase, function (s) {\n        _networkCategorical.push (d3.rgb(s).darker (k).toString());\n    });\n});\n\nvar _maximumValuesInCategories = _networkCategorical.length;\n\nvar _networkSequentialColor = {\n  2: [\"#feb24c\", \"#e31a1c\"],\n  3: [\"#ffeda0\", \"#feb24c\", \"#f03b20\"],\n  4: [\"#ffffb2\", \"#fecc5c\", \"#fd8d3c\", \"#e31a1c\"],\n  5: [\"#ffffb2\", \"#fecc5c\", \"#fd8d3c\", \"#f03b20\", \"#bd0026\"],\n  6: [\"#ffffb2\", \"#fed976\", \"#feb24c\", \"#fd8d3c\", \"#f03b20\", \"#bd0026\"],\n  7: [\n    \"#ffffb2\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#b10026\"\n  ],\n  8: [\n    \"#ffffcc\",\n    \"#ffeda0\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#b10026\"\n  ],\n  9: [\n    \"#ffffcc\",\n    \"#ffeda0\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#bd0026\",\n    \"#800026\"\n  ]\n};\n\nvar _networkPresetColorSchemes = {\n  trans_categ: {\n    \"MSM-Male\": \"#1f78b4\",\n    \"MSM-Unknown sex\": \"#1f78b4\",\n    \"Heterosexual Contact-Male\": \"#e31a1c\",\n    \"Heterosexual Contact-Female\": \"#e31a1c\",\n    \"Heterosexual Contact-Unknown sex\": \"#e31a1c\",\n    \"IDU-Male\": \"#33a02c\",\n    \"MSM & IDU-Male\": \"#33a02c\",\n    \"IDU-Female\": \"#33a02c\",\n    \"IDU-Unknown sex\": \"#33a02c\",\n    \"Other/Unknown-Male\": \"#636363\",\n    \"Other/Unknown-Female\": \"#636363\",\n    \"Other-Male\": \"#636363\",\n    \"Other-Female\": \"#636363\",\n    Missing: \"#636363\",\n    \"\": \"#636363\",\n    \"Other/Unknown-Unknown sex\": \"#636363\",\n    Perinatal: \"#ff7f00\",\n    \"Other/Unknown-Child\": \"#ff7f00\",\n    \"Other-Child\": \"#ff7f00\"\n  },\n  race: {\n    Asian: \"#1f77b4\",\n    \"Black/African American\": \"#bcbd22\",\n    \"Hispanic/Latino\": \"#9467bd\",\n    \"American Indian/Alaska Native\": \"#2ca02c\",\n    \"Native Hawaiian/Other Pacific Islander\": \"#17becf\",\n    \"Multiple Races\": \"#e377c2\",\n    \"Unknown race\": \"#999\",\n    Missing: \"#999\",\n    missing: \"#999\",\n    White: \"#d62728\"\n  }\n};\n\nvar _networkPresetShapeSchemes = {\n  birth_sex: {\n    Male: \"square\",\n    Female: \"ellipse\",\n    Missing: \"diamond\",\n    missing: \"diamond\",\n    Unknown: \"diamond\"\n  },\n  race: {\n    Asian: \"hexagon\",\n    \"Black/African American\": \"square\",\n    \"Hispanic/Latino\": \"triangle\",\n    \"American Indian/Alaska Native\": \"pentagon\",\n    \"Native Hawaiian/Other Pacific Islander\": \"octagon\",\n    \"Multiple Races\": \"diamond\",\n    \"Unknown race\": \"diamond\",\n    Missing: \"diamond\",\n    missing: \"diamond\",\n    White: \"ellipse\"\n  },\n  current_gender: {\n    Male: \"square\",\n    Female: \"ellipse\",\n    \"Transgender-Male to Female\": \"hexagon\",\n    \"Transgender-Female to Male\": \"pentagon\",\n    \"Additional Gender Identity\": \"diamond\",\n    Unknown: \"diamond\",\n    Missing: \"diamond\",\n    missing: \"diamond\"\n  }\n};\n\nvar hivtrace_cluster_depthwise_traversal = function (nodes, edges, edge_filter,save_edges) {\n\n    var clusters  = [],\n        adjacency = {},\n        by_node   = {};\n    \n    _.each (nodes, function (n) {\n        n.visited = false;\n        adjacency[n.id] = [];\n    });\n\n    if (edge_filter) {\n        edges = _.filter (edges, edge_filter);\n    }\n    \n    _.each (edges, function (e) {\n        try {\n            adjacency[nodes[e.source].id].push ([nodes[e.target],e]);\n            adjacency[nodes[e.target].id].push ([nodes[e.source],e]);\n        } catch (err) {\n            console.log (\"Edge does not map to an existing node \" + e.source + \" to \" + e.target);\n            throw (\"Edge does not map to an existing node \" + e.source + \" to \" + e.target);\n        }\n    });\n    \n    var traverse = function (node) {\n        if (! (node.id in by_node)) {\n            clusters.push ([node]);\n            by_node [node.id] = clusters.length - 1;\n            if (save_edges) {\n                save_edges.push ([]);\n            }\n        }\n        node.visited = true;\n        \n        _.each ( adjacency[node.id], function (neighbor) {\n            if (!neighbor[0].visited) {\n                by_node [neighbor[0].id] = by_node [node.id];\n                clusters [by_node [neighbor[0].id]].push (neighbor[0]);\n                if (save_edges) {\n                    save_edges[by_node [neighbor[0].id]].push (neighbor[1]);\n                }\n                traverse (neighbor[0]);\n            }\n        });     \n        \n    };\n    \n     _.each (nodes, function (n) {\n        if (!n.visited) {\n            traverse (n);\n        }\n     });\n       \n    return clusters;\n}\n\nvar _networkUpperBoundOnDate = (new Date()).getFullYear();\nvar _networkCDCDateField = \"hiv_aids_dx_dt\";\n\nvar hivtrace_cluster_network_graph = function(\n  json,\n  network_container,\n  network_status_string,\n  network_warning_tag,\n  button_bar_ui,\n  attributes,\n  filter_edges_toggle,\n  clusters_table,\n  nodes_table,\n  parent_container,\n  options\n) {\n  // [REQ] json                        :          the JSON object containing network nodes, edges, and meta-information\n  // [REQ] network_container           :          the CSS selector of the DOM element where the SVG containing the network will be placed (e.g. '#element')\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] network_warning_tag         :          the CSS selector of the DOM element where the any warning messages would go (e.g. '#element')\n  // [OPT] button_bar_ui               :          the ID of the control bar which can contain the following elements (prefix = button_bar_ui value)\n  //                                                - [prefix]_cluster_operations_container : a drop-down for operations on clusters\n  //                                                - [prefix]_attributes :  a drop-down for operations on attributes\n  //                                                - [prefix]_filter : a text box used to search the graph\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] attributes                  :          A JSON object with mapped node attributes\n\n  var self = {};\n  \n\n  self._is_CDC_ = options && options[\"no_cdc\"] ? false : true;\n  self.ww =\n    options && options[\"width\"]\n      ? options[\"width\"]\n      : d3.select(parent_container).property(\"clientWidth\");\n  self.container = network_container;\n  self.nodes = [];\n  self.edges = [];\n  self.clusters = [];\n  self.cluster_sizes = [];\n  self.cluster_mapping = {};\n  self.percent_format = _defaultPercentFormat;\n  self.missing = _networkMissing;\n  \n  if (options && _.isFunction (options[\"init_code\"])) {\n    options[\"init_code\"].call (null, self, options);\n  }\n  self.dom_prefix = options && options ['prefix'] ? options ['prefix'] : \"hiv-trace\";\n  self.extra_cluster_table_columns    = options && options ['cluster-table-columns'] ? options ['cluster-table-columns'] : null;\n  self.subcluster_table = null;\n  \n  if (self._is_CDC_) {\n    self.subcluster_table = options && options ['subcluster-table'] ?  d3.select(options ['subcluster-table']) : null;\n    self.extra_subcluster_table_columns = null;\n    var cdc_extra = [\n        {'description' : {\n             value: \"Cases dx within 36 months\",\n             sort: function (c) {return c.value.length ? c.value[0] : 0;},\n             help: \"Number of linked (0.5%) cases diagnosed in the past 36 months\"\n            },\n          'generator' : function (cluster) {\n            return {\n                'html' : true,\n                'value' : cluster.recent_nodes,\n                'format' : function (v) {\n                    if (v.length) {\n                        return v.join (\", \");\n                    } else {\n                        return \"\";\n                    }\n                }\n            }\n          }          \n        },\n        {'description' : {\n             value: \"Cases dx within 12 months\",\n             sort: \"value\",\n             help: \"Number of linked (0.5%, only through recent nodes) cases diagnosed in past 12 months\"\n            },\n          'generator' : function (cluster) {\n            return {\n                'html' : true,\n                'value' : cluster.priority_score,\n                'format' : function (v) {\n                    if (v.length) {\n                        var str = v.join (\", \");\n                        if (v[0] >= 3) {\n                            return \"<span style='color:red'>\" + str + \" <span class = 'fa fa-exclamation-circle'></span></span>\";\n                        }        \n                        return str;\n                    }\n                    return \"\";\n                }\n            }\n          }\n        }\n      ];\n      \n    if (self.subcluster_table) {\n        self.extra_subcluster_table_columns = cdc_extra;\n    } else {\n        if (self.extra_cluster_table_columns) {\n            self.extra_cluster_table_columns = self.extra_cluster_table_columns.concat (cdc_extra);\n        } else {\n            self.extra_cluster_table_columns = cdc_extra;\n        }\n    }\n  }\n\n    self.extra_node_table_columns = options && options ['node-table-columns'] ? options ['node-table-columns'] :\n    (\n        self._is_CDC_ ? [\n        {'description' : {\n             value: \"Recent and Rapid\",\n             sort: \"value\",\n             help: \"Is the node a member of a regular or recent & rapid subcluster?\"\n            },\n          'generator' : function (node) {\n            return {\n                'callback':   function  (element, payload) {\n                        //payload = _.filter (payload, function (d) {return d});\n                        var this_cell = d3.select(element);\n                        \n                        var data_to_use = [\n                            [payload[0][0],payload[0][1],payload[0][2]], \n                            [payload[1][0] ? \"36 months\" : \"\", payload[1][1]], \n                            [payload[2][0] ? \"12 months\" : \"\",payload[2][1]],\n                            [ (payload.length > 3 && payload[3][0] ? \"Recent cluster ≥ 3\" : \"\"), payload.length > 3 ? payload[3][1] : null]\n                            ];\n                    \n                        var buttons = this_cell.selectAll(\"span\").remove();\n                        \n                        _.each (data_to_use, function (button_text) {\n                            \n                             //self.open_exclusive_tab_view (cluster_id)\n                            if (button_text[0].length) {\n                                var button_obj = this_cell.append(\"span\")\n                                  .classed(\"btn btn-xs btn-node-property\", true)\n                                  .classed(button_text[1], true).text(button_text[0]); \n                                  \n                                if (_.isFunction (button_text[2])) {\n                                  button_obj.on (\"click\", button_text[2]);\n                                } else {\n                                  button_obj.attr(\"disabled\", true);\n                                }\n                                                        \n                            }\n                        });\n                        \n                      },\n                'value' : function () {\n                    return [[node.subcluster ? \"Subcluster \" + node.subcluster : \"\",\"btn-primary\", \n                             node.subcluster ? function () {self.view_subcluster(node.subcluster, \n                                                                                 function (n) {return n.subcluster == node.subcluster;}, \n                                                                                 \"Subcluster \" + node.subcluster)} : null, \n                             ], \n                             \n                            [node.priority_flag == 2,\"btn-warning\"], \n                            \n                            [node.priority_flag == 1,\"btn-danger\"],\n                            [node.priority_flag == 1 && node.in_rr, \"btn-danger\"]\n                           ];\n                }\n            }\n          }\n        }\n      ]\n    : null\n    ); \n     \n  self.colorizer = {\n    selected: function(d) {\n      return d == \"selected\" ? d3.rgb(51, 122, 183) : \"#FFF\";\n    }\n  };\n  \n  self.subcluster_threshold = options && options ['subcluster-thershold'] ? options ['subcluster-thershold'] : 0.005;\n  self.today = options && options ['today'] ? options ['today'] : new Date();\n\n  self.node_shaper = {\n    id: null,\n    shaper: function() {\n      return \"circle\";\n    }\n  };\n  (self.filter_edges = true), (self.hide_hxb2 = false), (self.charge_correction = 5), (self.margin = {\n    top: 20,\n    right: 10,\n    bottom: 30,\n    left: 10\n  }), (self.width =\n    self.ww - self.margin.left - self.margin.right), (self.height =\n    self.width * 9 / 16), (self.cluster_table = d3.select(\n    clusters_table\n  )), (self.node_table = d3.select(\n    nodes_table\n  )), (self.needs_an_update = false), (self.json = json), (self.hide_unselected = false), (self.show_percent_in_pairwise_table = false), (self.gradient_id = 0);\n\n  self._additional_node_pop_fields = [];\n  /** this array contains fields that will be appended to node pop-overs in the network tab\n      they will precede all the fields that are shown based on selected labeling */\n\n  if (options && \"minimum size\" in options) {\n    self.minimum_cluster_size = options[\"minimum size\"];\n  } else {\n    if (self._is_CDC_) {\n      self.minimum_cluster_size = 5;\n    } else {\n      self.minimum_cluster_size = 0;\n    }\n  }\n  \n  if (options && \"cluster-time\" in options) {\n    self.cluster_time_scale = options[\"cluster-time\"];\n  }  \n  \n  if (self._is_CDC_) {\n    self._additional_node_pop_fields.push(_networkCDCDateField);\n    self.cluster_time_scale = self.cluster_time_scale || _networkCDCDateField;\n  }\n\n  if (options && \"core-link\" in options) {\n    self.core_link_length  = options[\"core-link\"];   \n  } else {\n    self.core_link_length  = -1.;   \n  }\n  \n  if (options && \"edge-styler\" in options) {\n    self.additional_edge_styler = options[\"edge-styler\"];\n  } else {\n    self.additional_edge_styler = null;\n  }\n  \n  \n  self.filter_by_size = function(cluster) {\n    return cluster.children.length >= self.minimum_cluster_size;\n  };\n\n  self.cluster_filtering_functions = {'size' : self.filter_by_size};\n  self.cluster_display_filter = function (cluster) {return _.every (self.cluster_filtering_functions, \n    function (filter) {\n        return filter (cluster);\n    })}\n  \n  self.primary_graph = options && \"secondary\" in options ? false : true;\n  self.initial_packed = options && options [\"initial_layout\"] == \"tiled\" ? false : true;\n    \n  self.recent_rapid_definition = function (network, date) {\n       date = date || self.today;\n       var subcluster_enum = [\"Subcluster\", \n                              \"12 months (on ar after \" + _defaultDateViewFormat(_n_months_ago(date,12)) + \")\", \n                              \"36 months (on ar after \" + _defaultDateViewFormat(_n_months_ago(date,36)) + \")\", \n                              \"Future node (after \" + _defaultDateViewFormat (date) + \")\", \n                              \"Not a member of subcluster (as of \" + _defaultDateViewFormat(date) + \")\",\n                              \"Not in a subcluster\"];\n\n       return {\n           depends: _networkCDCDateField,\n           label: \"Subcluster or Priority Node\",\n           enum: subcluster_enum,\n           type : \"String\",\n           volatile: true,\n           color_scale: function() {\n            return d3.scale\n              .ordinal()\n              .domain(subcluster_enum.concat ([_networkMissing]))\n              .range(_.union([\"#CCCCCC\",\"red\",\"blue\",\"#9A4EAE\",\"yellow\",\"#FFFFFF\"], [_networkMissingColor]));\n           },\n\n\n          map: function(node) {\n             if (node.subcluster) {\n                if (node.priority_flag > 0) {\n                    return subcluster_enum[node.priority_flag];\n                } \n                return subcluster_enum[0];\n             } \n             return subcluster_enum[5];\n          }         \n    };};\n  \n  self._networkPredefinedAttributeTransforms = {\n    /** runtime computed node attributes, e.g. transforms of existing attributes */\n\n    binned_vl_recent_value: {\n      depends: \"vl_recent_value\",\n      label: \"binned_vl_recent_value\",\n      enum: [\"≤200\", \"200-10000\", \">10000\"],\n      type : \"String\",\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain([\"≤200\", \"200-10000\", \">10000\", _networkMissing])\n          .range(_.union(_networkSequentialColor[3], [_networkMissingColor]));\n      },\n\n      map: function(node) {\n        var vl_value = self.attribute_node_value_by_id(node, \"vl_recent_value\", true);\n        if (vl_value != _networkMissing) {\n          if (vl_value <= 200) {\n            return \"≤200\";\n          }\n          if (vl_value <= 10000) {\n            return \"200-10000\";\n          }\n          return \">10000\";\n        }\n        return _networkMissing;\n      }\n    },\n\n    recent_rapid : self.recent_rapid_definition,\n    \n    subcluster_index: {\n           depends: _networkCDCDateField,\n           label: \"Subcluster ID\",\n           type : \"String\",\n\n\n          map: function(node) {\n             return node.subcluster;\n          }       \n    },\n    \n    age_dx: {\n      depends: \"age\",\n      label: \"age_dx\",\n      enum: [\"<13\", \"13-19\", \"20-29\", \"30-39\", \"40-49\", \"50-59\", \"≥60\"],\n      type : \"String\",\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain([\n            \"<13\",\n            \"13-19\",\n            \"20-29\",\n            \"30-39\",\n            \"40-49\",\n            \"50-59\",\n            \"≥60\",\n            _networkMissing\n          ])\n          .range([\n            \"#b10026\",\n            \"#e31a1c\",\n            \"#fc4e2a\",\n            \"#fd8d3c\",\n            \"#feb24c\",\n            \"#fed976\",\n            \"#ffffb2\",\n            \"#636363\"\n          ]);\n      },\n      map: function(node) {\n        var vl_value = self.attribute_node_value_by_id(node, \"age\");\n        if (vl_value == \">=60\") {\n          return \"≥60\";\n        }\n        return vl_value;\n      }\n    },\n\n    hiv_aids_dx_dt_year: {\n      depends: _networkCDCDateField,\n      label: \"hiv_aids_dx_dt_year\",\n      type: \"Number\",\n      map: function(node) {\n        try {\n          var value = self._parse_dates(\n            self.attribute_node_value_by_id(node, _networkCDCDateField)\n          );\n          if (value) {\n            value = \"\" + value.getFullYear();\n          } else {\n            value = _networkMissing;\n          }\n           return value;\n        } catch (err) {\n          return _networkMissing;\n        }\n      },\n      color_scale: function(attr) {\n        var range_without_missing = _.without(\n          attr.value_range,\n          _networkMissing\n        );\n        var color_scale = _.compose(\n          d3.interpolateRgb(\"#ffffcc\", \"#800026\"),\n          d3.scale\n            .linear()\n            .domain([\n              range_without_missing[0],\n              range_without_missing[range_without_missing.length - 1]\n            ])\n            .range([0, 1])\n        );\n        return function(v) {\n          if (v == _networkMissing) {\n            return _networkMissingColor;\n          }\n          return color_scale(v);\n        };\n      }\n    }\n  };\n \n  if (options && options [\"computed-attributes\"]) {\n    _.extend (self._networkPredefinedAttributeTransforms, options [\"computed-attributes\"]);\n  }\n \n  self._parse_dates = function (value) {\n  \n    if (value instanceof Date) {\n        return value;\n    }\n    var parsed_value = null;\n  \n    var passed = _.any (_defaultDateFormats, function (f) {\n        parsed_value = f.parse (value);\n        return parsed_value;\n    });\n    \n    //console.log (value + \" mapped to \" + parsed_value);\n    \n    if (passed) {\n        if (self._is_CDC_ && (parsed_value.getFullYear() < 1970 || parsed_value.getFullYear() > _networkUpperBoundOnDate )) {\n           throw (\"Invalid date\");\n        }\n        return parsed_value;\n    }\n    \n    throw (\"Invalid date\");\n  }\n\n  /*------------ Network layout code ---------------*/\n  var handle_cluster_click = function(cluster, release) {\n  \n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select(\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container\n        .append(\"ul\")\n        .attr(\"id\", id)\n        .attr(\"class\", \"dropdown-menu\")\n        .attr(\"role\", \"menu\");\n    }\n\n    menu_object.selectAll(\"li\").remove();\n\n    var already_fixed = cluster && cluster.fixed == 1;\n\n    if (cluster) {\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Expand cluster\")\n        .on(\"click\", function(d) {\n          cluster.fixed = 0;\n          self.expand_cluster_handler(cluster, true);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Center on screen\")\n        .on(\"click\", function(d) {\n          cluster.fixed = 0;\n          center_cluster_handler(cluster);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(function(d) {\n          if (cluster.fixed) return \"Allow cluster to float\";\n          return \"Hold cluster at current position\";\n        })\n        .on(\"click\", function(d) {\n          cluster.fixed = !cluster.fixed;\n          menu_object.style(\"display\", \"none\");\n        });\n\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(function(d) {\n          return \"Show this cluster in separate tab\";\n        })\n        .on(\"click\", function(d) {\n          self.open_exclusive_tab_view (cluster.cluster_id);\n          menu_object.style(\"display\", \"none\");\n        });\n\n\n      cluster.fixed = 1;\n\n      menu_object\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style(\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style(\"display\", \"block\");\n    } else {\n      if (release) {\n        release.fixed = 0;\n      }\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\n      \"click\",\n      function(d) {\n        handle_cluster_click(null, already_fixed ? null : cluster);\n      },\n      true\n    );\n  };\n  \n  self._check_for_time_series = function (export_items) {\n      if (self.cluster_time_scale) {\n         export_items.push (\n            [\n               \"Show time-course plots\",\n                function (network, e) {\n                    e = d3.select (e);\n                    \n                    if (!network.network_cluster_dynamics) {\n                        network.network_cluster_dynamics = network.network_svg.append (\"g\").attr(\"id\", self.dom_prefix + \"-dynamics-svg\").\n                                                           attr (\"transform\", \"translate (\" + network.width*0.45 + \",0)\")\n                                                            ;\n                                                  \n                                                  \n                        network.handle_inline_charts = function () {                           \n                            var attr = null;\n                            var color = null;\n                            if (network.colorizer[\"category_id\"] && !network.colorizer[\"continuous\"]) {\n                                var attr_desc = network.json [_networkGraphAttrbuteID][network.colorizer[\"category_id\"]];\n                                attr = {};\n                                attr[network.colorizer[\"category_id\"]] = attr_desc[\"label\"];\n                                color = {};\n                                color[attr_desc[\"label\"]] = network.colorizer[\"category\"];\n                            }\n\n                             misc.cluster_dynamics (network.extract_network_time_series (self.cluster_time_scale, attr), \n                                network.network_cluster_dynamics, \n                                \"Time\", \"Cluster Members\",null,null, {\n                                    base_line : 20,\n                                    top: network.margin.top,\n                                    right: network.margin.right,\n                                    bottom: 3 * 20,\n                                    left: 5 * 20,\n                                    font_size : 12,\n                                    rect_size : 14,\n                                    width : network.width/2,\n                                    height : network.height/2,\n                                    colorizer: color,\n                                    prefix : network.dom_prefix,\n                                    drag : {x : network.width*0.45 ,\n                                            y : 0 }\n                                });\n                            };\n                            network.handle_inline_charts();\n                            e.text (\"Hide time-course plots\");\n                    } else {\n                          e.text (\"Show time-course plots\");\n                          network.network_cluster_dynamics.remove();\n                          network.network_cluster_dynamics = null;\n                          network.handle_inline_charts = null;\n                    }\n                 }\n            ]        \n        );\n    }\n\n  };\n  \n  self.open_exclusive_tab_close = function (tab_element, tab_content, restore_to_tag) {  \n    $('#' + restore_to_tag).tab('show');\n    $('#' + tab_element).remove();\n    $('#' + tab_content).remove();\n  }\n  \n  self.open_exclusive_tab_view = function (cluster_id, custom_filter, custom_name, additional_options) {\n    var cluster = _.find (self.clusters, function (c) {\n        return c.cluster_id == cluster_id;}\n    );\n        \n        \n    if (!cluster) {\n        return;\n    }\n\n    additional_options = additional_options || {};\n\n    var filtered_json = _extract_single_cluster (custom_filter ? _.filter (self.json.Nodes, custom_filter) : cluster.children);\n                        \n    if (_networkGraphAttrbuteID in json) {\n        filtered_json [_networkGraphAttrbuteID] = {};\n        jQuery.extend (true, filtered_json [_networkGraphAttrbuteID], json [_networkGraphAttrbuteID]);\n    }\n    \n    var export_items = [\n                            [\n                            \"Export cluster to .CSV\",\n                                function (network) {\n                                    helpers.export_csv_button  (self._extract_attributes_for_nodes (self._extract_nodes_by_id (cluster_id), \n                                                                self._extract_exportable_attributes ()));\n                                }\n                            ]\n                        ];\n                        \n                         \n    self._check_for_time_series (export_items);\n    \n    if (\"extra_menu\" in additional_options) {\n        _.each (export_items, function (item) {\n            additional_options[\"extra_menu\"][\"items\"].push (item);\n        });\n    } else {\n        _.extend (additional_options,{\"extra_menu\" : \n                        {\"title\" : \"Action\",\n                         \"items\" : export_items\n                        }});\n    }\n\n    return self.open_exclusive_tab_view_aux (filtered_json, custom_name ? custom_name (cluster_id) : (\"Cluster \" + cluster_id),\n        additional_options   \n    );\n  }\n  \n  \n  self.open_exclusive_tab_view_aux = function (filtered_json, title, option_extras) {\n \n    var random_id = function (alphabet, length) {\n        var s = \"\";\n        for (var i = 0; i < length; i++) {\n            s += _.sample (alphabet);\n        }\n        return s;\n    };\n \n    var letters             = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n \n    var random_prefix       = random_id (letters, 32);\n    var random_tab_id       = random_prefix + \"_tab\";\n    var random_content_id   = random_prefix + \"_div\";\n    var random_button_bar   = random_prefix + \"_ui\";\n    \n    while ($(\"#\" + random_tab_id).length || $(\"#\" + random_content_id).length || $(\"#\" + random_button_bar).length) {\n         random_prefix       = random_id (letters, 32);\n         random_tab_id       = random_prefix + \"_tab\";   \n         random_content_id   = random_prefix + \"_div\";\n         random_button_bar   = random_prefix + \"_ui\";\n    }\n    \n    var tab_container       = \"top_level_tab_container\";\n    var content_container   = \"top_level_tab_content\";\n    var go_here_when_closed = \"trace-default-tab\";\n    \n\n    // add new tab to the menu bar and switch to it\n    var new_tab_header    = $(\"<li></li>\").attr (\"id\", random_tab_id);\n    var new_link = $ (\"<a></a>\").attr (\"href\", \"#\" + random_content_id).attr (\"data-toggle\",\"tab\").text (title);\n    $('<button type=\"button\" class=\"close\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>').appendTo (new_link).\n    on ('click', function () {\n        self.open_exclusive_tab_close (random_tab_id, random_content_id, go_here_when_closed);\n    });\n    \n    new_link.appendTo (new_tab_header);\n    $(\"#\" + tab_container).append (new_tab_header);\n\n    var new_tab_content   = $(\"<div></div>\").addClass (\"tab-pane\").attr (\"id\", random_content_id);\n    //     <li class='disabled' id=\"attributes-tab\"><a href=\"#trace-attributes\" data-toggle=\"tab\">Attributes</a></li>\n    var new_button_bar = $('[data-hivtrace=\"cluster-clone\"]').clone ().attr ('data-hivtrace', null);\n    new_button_bar.find (\"[data-hivtrace-button-bar='yes']\").attr (\"id\", random_button_bar).attr ('data-hivtrace-button-bar', null);\n    \n    new_button_bar.appendTo (new_tab_content);\n    new_tab_content.appendTo (\"#\" + content_container);\n\n    // show the new tab\n    $(new_link).tab('show');\n    \n    var cluster_options = {\"no_cdc\" : options && options[\"no_cdc\"], \"minimum size\" : 0, \"secondary\": true, \"prefix\" : random_prefix, \n        \"extra_menu\" : (options && \"extra_menu\" in options) ? options [\"extra_menu\"] : null , \n        \"edge-styler\" : (options && \"edge-styler\" in options) ? options [\"edge-styler\"] : null,\n        \"no-subclusters\" : true };\n        \n            \n    if (option_extras) {\n        _.extend (cluster_options, option_extras);\n    }\n    \n    var cluster_view = hivtrace.clusterNetwork(filtered_json, '#' + random_content_id, null, null, random_button_bar, attributes, null, null, null, parent_container, cluster_options);\n        \n    //console.log (cluster_view.clusters[0]);\n    cluster_view.expand_cluster_handler (cluster_view.clusters[0], true);\n    if (self.colorizer[\"category_id\"]) {\n        if (self.colorizer[\"continuous\"]) {\n            cluster_view.handle_attribute_continuous (self.colorizer[\"category_id\"]);\n        } else {\n            cluster_view.handle_attribute_categorical (self.colorizer[\"category_id\"]);\n        }\n    }\n        \n    if (self.node_shaper[\"id\"]) {\n        cluster_view.handle_shape_categorical (self.node_shaper[\"id\"]);\n    }\n \n    if (self.colorizer[\"opacity_id\"]) {\n        cluster_view.handle_attribute_opacity (self.colorizer[\"opacity_id\"]);\n    }\n    \n    return cluster_view;\n        \n    // copy all the divs other than the one matching the network tab ID\n    /*var cloned_empty_tab  = $('#trace-results').clone();\n    cloned_empty_tab.attr (\"id\", random_content_id);\n    console.log (cloned_empty_tab);\n\n    cloned_empty_tab.appendTo (\".tab-content\");    */\n    \n    /*self.cluster_filtering_functions ['cluster_id'] = function (c) {return c.cluster_id == cluster.cluster_id;};\n    cluster.exclusive = 1;\n    self.has_exclusive_view = cluster.cluster_id;\n    self.draw_attribute_labels();\n    self.update(false);*/\n    \n    \n}\n  \n  self.get_ui_element_selector_by_role = function (role, not_nested) {\n    if (not_nested && !self.primary_graph) {\n        return undefined;    \n    }\n    return (not_nested ? \"\" : \"#\" + self.ui_container_selector) + \" [data-hivtrace-ui-role='\" + role +\"']\";\n  }\n\n  var handle_node_click = function(node) {\n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select(\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container\n        .append(\"ul\")\n        .attr(\"id\", id)\n        .attr(\"class\", \"dropdown-menu\")\n        .attr(\"role\", \"menu\");\n    }\n\n    menu_object.selectAll(\"li\").remove();\n\n    if (node) {\n      node.fixed = 1;\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Collapse cluster\")\n        .on(\"click\", function(d) {\n          node.fixed = 0;\n          collapse_cluster_handler(node, true);\n          menu_object.style(\"display\", \"none\");\n        });\n        \n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Show sequences used to make cluster\")\n        .on(\"click\", function(d) {\n          node.fixed = 0;\n          show_sequences_in_cluster (node, true);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style(\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style(\"display\", \"block\");\n    } else {\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\n      \"click\",\n      function(d) {\n        handle_node_click(null);\n      },\n      true\n    );\n  };\n\n  function get_initial_xy (packed) {\n    // create clusters from nodes\n    var mapped_clusters = get_all_clusters(self.nodes);\n\n    var d_clusters = {\n      id: \"root\",\n      children: []\n    };\n\n    // filter out clusters that are to be excluded\n    if (self.exclude_cluster_ids) {\n      mapped_clusters = _.omit(mapped_clusters, self.exclude_cluster_ids);\n    }\n\n    d_clusters.children = _.map(mapped_clusters, (value, key) => {\n      return {\n        cluster_id: key,\n        children: value\n      };\n    });\n    \n    var treemap = packed ? \n    \n       (\n       d3.layout\n      .pack()\n      .size([self.width, self.height])\n      //.sticky(true)\n      .children(function(d) {\n        return d.children;\n      })\n      .value(function(d) {\n        return Math.pow (d.parent.children.length, 1.5);\n      })\n      .sort (function (a,b) {\n        return b.value - a.value;\n      })\n      .padding (5)\n      )\n      \n      :\n\n      (d3.layout\n      .treemap ()\n      .size([self.width, self.height])\n      //.sticky(true)\n      .children(function(d) {\n        return d.children;\n      })\n      .value(function(d) {\n        return Math.pow (d.parent.children.length,1.0);\n      })\n      .sort (function (a,b) {\n        return a.value - b.value;\n      })\n      .ratio (1.)\n      );\n\n    var clusters = treemap.nodes(d_clusters);\n    _.each (clusters, function (c) {\n        //c.fixed = true;\n    });\n    return clusters;\n  }\n\n  function prepare_data_to_graph() {\n    var graphMe = {};\n    graphMe.all = [];\n    graphMe.edges = [];\n    graphMe.nodes = [];\n    graphMe.clusters = [];\n\n    var expandedClusters = [];\n    var drawnNodes = [];\n\n    self.clusters.forEach(function(x) {\n      if (self.cluster_display_filter(x)) {\n        // Check if hxb2_linked is in a child\n        var hxb2_exists =\n          x.children.some(function(c) {\n            return c.hxb2_linked;\n          }) && self.hide_hxb2;\n        if (!hxb2_exists) {\n          if (x.collapsed) {\n            graphMe.clusters.push(x);\n            graphMe.all.push(x);\n          } else {\n            expandedClusters[x.cluster_id] = true;\n          }\n        }\n      }\n    });\n\n    self.nodes.forEach(function(x, i) {\n      if (expandedClusters[x.cluster]) {\n        drawnNodes[i] = graphMe.nodes.length + graphMe.clusters.length;\n        graphMe.nodes.push(x);\n        graphMe.all.push(x);\n      }\n    });\n\n    self.edges.forEach(function(x) {\n      if (!(x.removed && self.filter_edges)) {\n        if (\n          drawnNodes[x.source] !== undefined &&\n          drawnNodes[x.target] !== undefined\n        ) {\n          var y = {};\n          for (var prop in x) {\n            y[prop] = x[prop];\n          }\n\n          y.source = drawnNodes[x.source];\n          y.target = drawnNodes[x.target];\n          graphMe.edges.push(y);\n        }\n      }\n    });\n\n    return graphMe;\n  }\n  \n  \n  self.view_subcluster = function (cluster, custom_filter, custom_name) {\n    \n    var filtered_json = _extract_single_cluster (custom_filter ? _.filter (self.json.Nodes, custom_filter) : cluster.children, function (e) {                                                            \n                                                                    return e.length < self.subcluster_threshold;\n                                                        });\n                                                        \n    _.each (filtered_json.Nodes, function (n) {\n        n.subcluster = \"1.1\";\n    });\n    \n    if (_networkGraphAttrbuteID in json) {\n        filtered_json [_networkGraphAttrbuteID] = {};\n        jQuery.extend (true, filtered_json [_networkGraphAttrbuteID], json [_networkGraphAttrbuteID]);\n    }\n    \n    var extra_menu_items = [\n                       [function (network, item) {\n                            var enclosure = item.append (\"div\").classed (\"form-group\", true);\n                            var label = enclosure.append (\"label\").text (\"Recalculate R&R from \").classed (\"control-label\", true);\n                            var date = enclosure.append (\"input\").attr ('type','date').classed (\"form-control\", true)\n                            .attr ('value', _defaultDateViewFormatSlider (self.today))\n                            .attr ('max', _defaultDateViewFormatSlider (self.today))\n                            .attr ('min', _defaultDateViewFormatSlider(d3.min (network.nodes, \n                                function (node) {\n                                    return network.attribute_node_value_by_id(node, _networkCDCDateField);\n                                })))\n                            .on (\"input\", function (e) {\n                                //d3.event.preventDefault();\n                                var set_date = _defaultDateViewFormatSlider.parse (this.value);\n                                if (this.value) {\n                                    network.annotate_priority_clusters (_networkCDCDateField, 36, 12, set_date);\n                                    var field_def = network.recent_rapid_definition (network, set_date);\n                                    network.inject_attribute_description (\"recent_rapid\", field_def);\n                                    network._aux_process_category_values(network._aux_populate_category_fields (field_def, \"recent_rapid\"));\n                                    network.handle_attribute_categorical (\"recent_rapid\");\n                                    enclosure.classed ('has-success',true).classed ('has-error',false);\n                                }  else {\n                                    enclosure.classed ('has-success',false).classed ('has-error',true);\n                                }\n                            });\n                        },\n                        null\n                       ],\n                       [\"Export cluster to .CSV\",\n                            function (network) {\n                                helpers.export_csv_button  (network._extract_attributes_for_nodes (network._extract_nodes_by_id (\"1.1\"), \n                                                            network._extract_exportable_attributes ()));\n                            }\n                       ]\n                     ];\n    \n    self._check_for_time_series (extra_menu_items);\n    self.open_exclusive_tab_view_aux (filtered_json, custom_name || (\"Subcluster \" + cluster.cluster_id), \n            { //\"core-link\" : self.subcluster_threshold,\n              \"extra_menu\" : \n                {\"title\" : \"Action\",\n                     \"items\" : extra_menu_items\n                    }\n            }\n    ).handle_attribute_categorical (\"recent_rapid\");\n  }\n  \n  function _n_months_ago (reference_date, months) {\n  \n    var past_date = new Date (reference_date);\n    var past_months = past_date.getMonth();\n    var diff_year = Math.floor (months/12);\n    var left_over = months - diff_year * 12;\n    \n    if (left_over > past_months) {\n        past_date.setFullYear (past_date.getFullYear() - diff_year - 1);\n        past_date.setMonth (12-(left_over - past_months));\n    } else {\n        past_date.setFullYear (past_date.getFullYear() - diff_year);\n        past_date.setMonth (past_months-left_over);\n    }\n    \n    \n    //past_date.setTime (past_date.getTime () - months * 30 * 24 * 3600000);\n    return past_date;\n  } \n  \n  self.annotate_priority_clusters = function (date_field, span_months, recent_months, start_date) {\n  \n    try {\n\n        start_date = start_date || self.today;\n   \n        var filter_by_date = function (cutoff, node) {\n            var node_dx = self.attribute_node_value_by_id (node, date_field);\n            if (node_dx instanceof Date) {\n                return node_dx >= cutoff && node_dx <= start_date;\n            } else {\n                node_dx = self._parse_dates(self.attribute_node_value_by_id(node, date_field));\n                if (node_dx instanceof Date) {\n                    return node_dx >= cutoff && node_dx <= start_date;\n                } \n            }\n            return false;\n        };\n        \n        var cutoff_long  = _n_months_ago (start_date, span_months);\n        var cutoff_short = _n_months_ago (start_date, recent_months);\n \n        var node_iterator;\n        \n        if (start_date == self.today) {\n            node_iterator = self.nodes; \n        } else {\n            var beginning_of_time = new Date (); \n            beginning_of_time.setYear (1900);\n            node_iterator = [];\n            _.each (self.nodes, function (node) {\n                 if (filter_by_date (beginning_of_time, node)) {\n                    node.priority_flag = 4;\n                    node_iterator.push (node);\n                } else {\n                    node.priority_flag = 3;\n                }\n            });\n       }\n  \n       \n        var oldest_nodes_first = function (n1,n2) { \n        // consistent node sorting, older nodes first\n                        var node1_dx = self.attribute_node_value_by_id (n1, date_field);\n                        var node2_dx = self.attribute_node_value_by_id (n2, date_field);\n                        \n                        if (node1_dx == node2_dx) {\n                            return n1.id < n2.id ? -1 : 1;\n                        } else {\n                            return node1_dx < node2_dx ? -1 : 1;\n                        }\n                        return 0;\n                    };\n                    \n        // extract all clusters at once to avoid inefficiencies of multiple edge-set traverals\n        \n        var split_clusters = {};\n        var node_id_to_local_cluster = {};\n        \n        // reset all annotations \n  \n              \n        _.each (node_iterator, function (node) {\n            if (node.cluster) {\n                if (! (node.cluster in split_clusters)) {\n                    split_clusters [node.cluster] = {'Nodes' : [], 'Edges' : []};\n                }\n                node_id_to_local_cluster [node.id] = split_clusters [node.cluster][\"Nodes\"].length;\n                split_clusters [node.cluster][\"Nodes\"].push (node);\n            }\n            \n        });\n        \n        _.each (self.edges, function (edge) {\n            if (edge.length <= self.subcluster_threshold) {\n                var edge_cluster = json.Nodes[edge.source].cluster;\n                \n                var source_id = json.Nodes[edge.source].id,\n                    target_id = json.Nodes[edge.target].id;\n                    \n                \n                if ((source_id in node_id_to_local_cluster) && (target_id in node_id_to_local_cluster)) {\n                    var copied_edge = _.clone (edge);\n\n                    copied_edge.source = node_id_to_local_cluster[source_id];\n                    copied_edge.target = node_id_to_local_cluster[target_id];\n                \n                    split_clusters[edge_cluster][\"Edges\"].push (copied_edge);\n                }\n            }\n        });\n        \n         \n        _.each (split_clusters, function (cluster_nodes,cluster_index) {   \n        \n            /** extract subclusters; all nodes at given threshold */\n            /** Sub-Cluster: all nodes connected at 0.005 subs/site; there can be multiple sub-clusters per cluster */\n            \n            //var cluster_nodes       = _extract_single_cluster (cluster.children, null, true);\n            \n            var array_index = self.cluster_mapping [cluster_index];\n                        \n            self.clusters[array_index].priority_score = 0;\n                        \n            /** all clusters with more than one member connected at 'threshold' edge length */\n            var edges        = [];\n                        \n            var subclusters  = _.filter (hivtrace_cluster_depthwise_traversal (\n                cluster_nodes.Nodes, \n                cluster_nodes.Edges,null, edges), function (cc) {return cc.length > 1;});\n                \n                              \n            edges =  _.filter (edges, function (es) {return es.length > 1;});\n               \n            /** sort subclusters by oldest node */\n \n            _.each (subclusters, function (c,i) {\n                 c.sort (oldest_nodes_first);\n            });\n            \n            subclusters.sort (function (c1, c2) {\n                return oldest_nodes_first (c1[0], c2[0]);\n            });\n\n            \n            subclusters = _.map (subclusters, function (c, i) {\n                var label = self.clusters[array_index].cluster_id + \".\" + (i+1);\n                 \n                 \n                _.each (c, function (n) {\n                    n.subcluster = label;\n                    n.priority_flag = 0;\n                    n.in_rr         = 0;\n               });\n            \n                return {\n                    'children' : _.clone (c), \n                    'parent_cluster' : self.clusters[array_index], \n                    'cluster_id': label,\n                    'distances' : helpers.describe_vector(_.map (edges[i], function (e) {return e.length;}))\n                };\n            });\n\n\n\n            _.each (subclusters, function (c) {\n                 _compute_cluster_degrees (c);\n            });\n           \n            self.clusters[array_index].subclusters = subclusters;\n            \n \n            /** now, for each subcluster, extract the recent and rapid part */\n            \n            /** Recent & Rapid (R&R) Cluster: the part of the Sub-Cluster inferred using only cases dx’d in the previous 36 months \n                and at least two cases dx’d in the previous 12 months; there is a path between all nodes in an R&R Cluster\n                \n                20180406 SLKP: while unlikely, this definition could result in multiple R&R clusters \n                per subclusters; for now we will add up all the cases for prioritization, and \n                display the largest R&R cluster if there is more than one\n            */\n               \n            _.each (subclusters, function (sub) {\n                // extract nodes based on dates\n                 var subcluster_json = _extract_single_cluster (_.filter (sub.children, _.partial (filter_by_date, cutoff_long)), null, true, cluster_nodes);\n                 var rr_cluster = _.filter (hivtrace_cluster_depthwise_traversal (\n                    subcluster_json.Nodes, \n                    _.filter (subcluster_json.Edges, function (e) {return e.length <= self.subcluster_threshold;\n                    })), function (cc) {return cc.length > 1;});\n                    \n                 sub.rr_count           = rr_cluster.length;\n                 \n                 rr_cluster.sort (function (a,b) { return b.length - a.length});\n                 \n                 sub.priority_score     = [];\n                 sub.recent_nodes       = [];\n                 \n                 _.each (rr_cluster, function (recent_cluster) {                 \n                    var priority_nodes = _.groupBy (recent_cluster, _.partial (filter_by_date, cutoff_short));\n                    sub.recent_nodes.push (recent_cluster.length);\n                    if (true in priority_nodes) {\n                        sub.priority_score.push (priority_nodes[true].length);\n                        _.each (priority_nodes[true], function (n) { \n                            n.priority_flag = filter_by_date (start_date, n) ? 3 : 1;\n                            n.in_rr = priority_nodes[true].length >= 3;\n                        });\n                    } \n                    if (false in priority_nodes) {\n                        _.each (priority_nodes[false], function (n) { n.priority_flag = 2;});                    \n                    }\n                 });\n                 \n                 //console.log (sub.recent_nodes);\n                 \n                 self.clusters[array_index].priority_score = sub.priority_score;\n                 \n            });\n            \n                       \n        });\n    } catch (err) {\n        console.log (err);\n        return;\n    }\n\n  }\n\n  function default_layout(packed) {\n    // let's create an array of clusters from the json\n    \n    var init_layout = get_initial_xy(packed);\n    \n    if (self.clusters.length == 0) {\n        self.clusters = init_layout.filter(function(v, i, obj) {\n          return !(typeof v.cluster_id === \"undefined\");\n        });\n        \n        \n    } else {\n        var coordinate_update = {};\n        _.each (self.clusters, function (c) {\n            coordinate_update [c.cluster_id] = c;\n        });        \n        _.each (init_layout, function (c) {\n            if (\"cluster_id\" in c) {\n               _.extendOwn (coordinate_update [c.cluster_id], c);\n            }\n        });\n    }\n\n    //var sizes = network_layout.size();\n    \n    var set_init_coords = packed ? function (n) {n.x += n.r * 0.5; n.y += n.r * 0.5;} :\n                                   function (n) {n.x += n.dx * 0.5; n.y += n.dy * 0.5;}\n    \n    _.each ([self.nodes, self.clusters], function (list) {\n        _.each (list, set_init_coords);\n    });\n   \n\n    self.clusters.forEach(collapse_cluster);\n  }\n\n  function change_spacing(delta) {\n    self.charge_correction = self.charge_correction * delta;\n    network_layout.start();\n  }\n\n  function change_window_size(delta, trigger) {\n    if (delta) {\n      var x_scale = (self.width + delta / 2) / self.width;\n      var y_scale = (self.height + delta / 2) / self.height;\n\n      self.width += delta;\n      self.height += delta;\n\n      var rescale_x = d3.scale.linear().domain(\n        d3.extent(network_layout.nodes(), function(node) {\n          return node.x;\n        })\n      );\n      rescale_x.range(\n        _.map(rescale_x.domain(), function(v) {\n          return v * x_scale;\n        })\n      );\n      //.range ([50,self.width-50]),\n      var rescale_y = d3.scale.linear().domain(\n        d3.extent(network_layout.nodes(), function(node) {\n          return node.y;\n        })\n      );\n      rescale_y.range(\n        _.map(rescale_y.domain(), function(v) {\n          return v * y_scale;\n        })\n      );\n\n      _.each(network_layout.nodes(), function(node) {\n        node.x = rescale_x(node.x);\n        node.y = rescale_y(node.y);\n      });\n    }\n\n    self.width = Math.min(Math.max(self.width, 200), 4000);\n    self.height = Math.min(Math.max(self.height, 200), 4000);\n\n    network_layout.size([self.width, self.height]);\n    self.network_svg.attr(\"width\", self.width).attr(\"height\", self.height);\n\n    if (trigger) {\n      network_layout.start();\n    } else {\n      if (delta) {\n        self.update(true);\n      }\n    }\n  }\n\n  self.compute_adjacency_list = _.once(function() {\n    self.nodes.forEach(function(n) {\n      n.neighbors = d3.set();\n    });\n\n    self.edges.forEach(function(e) {\n      self.nodes[e.source].neighbors.add(e.target);\n      self.nodes[e.target].neighbors.add(e.source);\n    });\n  });\n\n  self.compute_local_clustering_coefficients = _.once(function() {\n    self.compute_adjacency_list();\n\n    self.nodes.forEach(function(n) {\n      _.defer(function(a_node) {\n        neighborhood_size = a_node.neighbors.size();\n        if (neighborhood_size < 2) {\n          a_node.lcc = misc.undefined;\n        } else {\n          if (neighborhood_size > 500) {\n            a_node.lcc = misc.too_large;\n          } else {\n            // count triangles\n            neighborhood = a_node.neighbors.values();\n            counter = 0;\n            for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n              for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n                if (\n                  self.nodes[neighborhood[n1]].neighbors.has(neighborhood[n2])\n                ) {\n                  counter++;\n                }\n              }\n            }\n\n            a_node.lcc =\n              2 * counter / neighborhood_size / (neighborhood_size - 1);\n          }\n        }\n      }, n);\n    });\n  });\n\n  self.get_node_by_id = function(id) {\n    return self.nodes.filter(function(n) {\n      return n.id == id;\n    })[0];\n  };\n\n  self.compute_local_clustering_coefficients_worker = _.once(function() {\n    var worker = new Worker(\"workers/lcc.js\");\n\n    worker.onmessage = function(event) {\n      var nodes = event.data.Nodes;\n\n      nodes.forEach(function(n) {\n        node_to_update = self.get_node_by_id(n.id);\n        node_to_update.lcc = n.lcc ? n.lcc : misc.undefined;\n      });\n    };\n\n    var worker_obj = {};\n    worker_obj[\"Nodes\"] = self.nodes;\n    worker_obj[\"Edges\"] = self.edges;\n    worker.postMessage(worker_obj);\n  });\n\n  var estimate_cubic_compute_cost = _.memoize(\n    function(c) {\n      self.compute_adjacency_list();\n      return _.reduce(\n        _.first(_.pluck(c.children, \"degree\").sort(d3.descending), 3),\n        function(memo, value) {\n          return memo * value;\n        },\n        1\n      );\n    },\n    function(c) {\n      return c.cluster_id;\n    }\n  );\n\n  self.compute_global_clustering_coefficients = _.once(function() {\n    self.compute_adjacency_list();\n\n    self.clusters.forEach(function(c) {\n      _.defer(function(a_cluster) {\n        cluster_size = a_cluster.children.length;\n        if (cluster_size < 3) {\n          a_cluster.cc = misc.undefined;\n        } else {\n          if (estimate_cubic_compute_cost(a_cluster, true) >= 5000000) {\n            a_cluster.cc = misc.too_large;\n          } else {\n            // pull out all the nodes that have this cluster id\n            member_nodes = [];\n\n            var triads = 0;\n            var triangles = 0;\n\n            self.nodes.forEach(function(n, i) {\n              if (n.cluster == a_cluster.cluster_id) {\n                member_nodes.push(i);\n              }\n            });\n            member_nodes.forEach(function(node) {\n              my_neighbors = self.nodes[node].neighbors\n                .values()\n                .map(function(d) {\n                  return +d;\n                })\n                .sort(d3.ascending);\n              for (n1 = 0; n1 < my_neighbors.length; n1 += 1) {\n                for (n2 = n1 + 1; n2 < my_neighbors.length; n2 += 1) {\n                  triads += 1;\n                  if (\n                    self.nodes[my_neighbors[n1]].neighbors.has(my_neighbors[n2])\n                  ) {\n                    triangles += 1;\n                  }\n                }\n              }\n            });\n\n            a_cluster.cc = triangles / triads;\n          }\n        }\n      }, c);\n    });\n  });\n\n  self.mark_nodes_as_processing = function(property) {\n    self.nodes.forEach(function(n) {\n      n[property] = misc.processing;\n    });\n  };\n\n  self.compute_graph_stats = function() {\n    d3.select(this).classed(\"disabled\", true).select(\"i\").classed({\n      \"fa-calculator\": false,\n      \"fa-cog\": true,\n      \"fa-spin\": true\n    });\n    self.mark_nodes_as_processing(\"lcc\");\n    self.compute_local_clustering_coefficients_worker();\n    self.compute_global_clustering_coefficients();\n    d3.select(this).remove();\n  };\n\n  /*------------ Constructor ---------------*/\n  function initial_json_load() {\n    var connected_links = [];\n    var total = 0;\n    self.exclude_cluster_ids = {};\n    self.has_hxb2_links = false;\n    self.cluster_sizes = [];\n\n    graph_data.Nodes.forEach(function(d) {\n      if (typeof self.cluster_sizes[d.cluster - 1] === \"undefined\") {\n        self.cluster_sizes[d.cluster - 1] = 1;\n      } else {\n        self.cluster_sizes[d.cluster - 1]++;\n      }\n      if (\"is_lanl\" in d) {\n        d.is_lanl = d.is_lanl == \"true\";\n      }\n\n      if (d.attributes.indexOf(\"problematic\") >= 0) {\n        self.has_hxb2_links = d.hxb2_linked = true;\n      }\n    });\n\n    /* add buttons and handlers */\n    /* clusters first */\n    \n    self.ui_container_selector = button_bar_ui;\n    \n    self._extract_attributes_for_nodes = function (nodes, column_names) {\n        var result = [_.map (column_names, function (c) {return c.raw_attribute_key;})];\n        _.each (nodes, function (n) {\n            result.push (_.map (column_names, function (c) {return self.attribute_node_value_by_id(n, c.raw_attribute_key)}));       \n        });\n        return result;\n    };\n    \n    self._extract_exportable_attributes = function () {\n        var allowed_types = {\n          String: 1,\n          Date: 1,\n          Number: 1\n        };\n\n        return _.filter(self.json[_networkGraphAttrbuteID], function(\n          d\n        ) {\n          return d.type in allowed_types;\n        });\n        \n    };\n    \n    self._extract_nodes_by_id = function (id) {\n    \n        var string_id = id.toString();\n        return _.filter(self.nodes, function(n) {\n          return n.cluster == id || n.subcluster == string_id \n        });\n    };\n\n    self._cluster_list_view_render = function (cluster_id,group_by_attribute, the_list) {\n      \n      \n        the_list.selectAll(\"*\").remove();\n        var column_ids =   self._extract_exportable_attributes ();   \n        var cluster_nodes = self._extract_nodes_by_id (cluster_id);\n        \n        d3.select(self.get_ui_element_selector_by_role (\"cluster_list_data_export\", true)).on (\n        \"click\", function (d) {\n            helpers.export_csv_button (self._extract_attributes_for_nodes (cluster_nodes, column_ids));\n        }\n        );\n        \n        if (group_by_attribute) {\n          _.each(column_ids, function(column) {\n            var binned = _.groupBy(cluster_nodes, function(n) {\n              return self.attribute_node_value_by_id(n, column.raw_attribute_key);\n            });\n            var sorted_keys = _.keys(binned).sort();\n            var attribute_record = the_list.append(\"li\");\n            attribute_record.append(\"code\").text(column.raw_attribute_key);\n            var attribute_list = attribute_record\n              .append(\"dl\")\n              .classed(\"dl-horizontal\", true);\n            _.each(sorted_keys, function(key) {\n              attribute_list.append(\"dt\").text(key);\n              attribute_list.append(\"dd\").text(\n                _.map(binned[key], function(n) {\n                  return n.id;\n                }).join(\", \")\n              );\n            });\n          });\n        } else {\n          _.each(\n            cluster_nodes,\n            function(node) {\n              var patient_record = the_list.append(\"li\");\n              patient_record.append(\"code\").text(node.id);\n              var patient_list = patient_record\n                .append(\"dl\")\n                .classed(\"dl-horizontal\", true);\n              _.each(column_ids, function(column) {\n                patient_list.append(\"dt\").text(column.raw_attribute_key);\n                patient_list\n                  .append(\"dd\")\n                  .text(\n                    self.attribute_node_value_by_id(node, column.raw_attribute_key)\n                  );\n              });\n            }\n          );\n        }\n      };\n      \n    self._setup_cluster_list_view  = function () {\n        d3\n        .select(self.get_ui_element_selector_by_role (\"cluster_list_view_toggle\", true))\n        .on(\"click\", function() {\n          d3.event.preventDefault();\n          var group_by_id = false;\n\n          var button_clicked = $(this);\n          if (button_clicked.data(\"view\") == \"id\") {\n            button_clicked.data(\"view\", \"attribute\");\n            button_clicked.text(\"Group by ID\");\n            group_by_id = false;\n          } else {\n            button_clicked.data(\"view\", \"id\");\n            button_clicked.text(\"Group by attribute\");\n            group_by_id = true;\n          }\n          self._cluster_list_view_render(\n            button_clicked.data(\"cluster\").toString(),\n            !group_by_id,\n            d3.select(self.get_ui_element_selector_by_role (\"cluster_list_payload\", true))\n          );\n        });\n\n \n      $(self.get_ui_element_selector_by_role (\"cluster_list\", true)).on(\"show.bs.modal\", function(\n        event\n      ) {\n        var link_clicked = $(event.relatedTarget);\n        var cluster_id = link_clicked.data(\"cluster\");\n        var modal = d3.select(self.get_ui_element_selector_by_role (\"cluster_list\", true));\n        modal\n          .selectAll(\".modal-title\")\n          .text(\"Listing nodes in cluster \" + cluster_id);\n        $(self.get_ui_element_selector_by_role (\"cluster_list_view_toggle\", true)).data(\n          \"cluster\",\n          cluster_id\n        );\n\n  \n        self._cluster_list_view_render(\n          cluster_id,\n          $(self.get_ui_element_selector_by_role (\"cluster_list_view_toggle\", true)).data(\"view\") !=\n            \"id\",\n          modal.select(self.get_ui_element_selector_by_role (\"cluster_list_payload\", true))\n        );\n      });     \n    };\n   \n    if (button_bar_ui) {\n    \n      self._setup_cluster_list_view ();          \n\n      var cluster_ui_container = d3.select(\n        self.get_ui_element_selector_by_role (\"cluster_operations_container\")\n      );\n\n      cluster_ui_container.selectAll(\"li\").remove();\n      \n      var fix_handler = function (do_fix) {\n         _.each ([self.clusters, self.nodes], function (list) {\n                _.each (list, function (obj) {\n                    obj.fixed = do_fix;\n                });\n            });\n      };\n\n      var layout_reset_handler = function (packed) {\n            var fixed = [];\n            _.each (self.clusters, function (obj) {\n                if (obj.fixed) {\n                    fixed.push (obj);\n                }\n                obj.fixed = false;\n            });\n            default_layout(packed);\n            network_layout.tick();\n            self.update();\n            _.each (fixed, function (obj) {\n                obj.fixed = true;\n            });\n      };\n\n      var cluster_commands = [\n        [\n          \"Expand All\",\n          function() {\n            return self.expand_some_clusters();\n          },\n          true,\n          \"hivtrace-expand-all\"\n        ],\n        [\n          \"Collapse All\",\n          function() {\n            return self.collapse_some_clusters();\n          },\n          true,\n          \"hivtrace-collapse-all\"\n        ],\n        [\n          \"Expand Filtered\",\n          function() {\n            return self.expand_some_clusters(\n              self.select_some_clusters(function(n) {\n                return n.match_filter;\n              })\n            );\n          },\n          true,\n          \"hivtrace-expand-filtered\"\n        ],\n        [\n          \"Collapse Filtered\",\n          function() {\n            return self.collapse_some_clusters(\n              self.select_some_clusters(function(n) {\n                return n.match_filter;\n              })\n            );\n          },\n          true,\n          \"hivtrace-collapse-filtered\"\n        ],\n         [\n          \"Fix all objects in place\",\n          _.partial (fix_handler, true),\n          true,\n          \"hivtrace-fix-in-place\"\n         ],\n         [\n          \"Allow all objects to float\",\n          _.partial (fix_handler, false),\n          true,\n          \"hivtrace-allow-to-float\"\n        ],\n         [\n          \"Reset layout [packed]\",\n          _.partial (layout_reset_handler, true),\n          true,\n          \"hivtrace-reset-layout\"\n        ],\n        [\n          \"Reset layout [tiled]\",\n          _.partial (layout_reset_handler, false),\n          true,\n          \"hivtrace-reset-layout\"\n        ],       \n        [\n          \"Hide problematic clusters\",\n          function(item) {\n            d3\n              .select(item)\n              .text(\n                self.hide_hxb2\n                  ? \"Hide problematic clusters\"\n                  : \"Show problematic clusters\"\n              );\n            self.toggle_hxb2();\n          },\n          self.has_hxb2_links,\n          \"hivtrace-hide-problematic-clusters\"\n        ]\n      ];\n\n      if (!self._is_CDC_) {\n        cluster_commands.push([\n          \"Show removed edges\",\n          function(item) {\n            self.filter_edges = !self.filter_edges;\n            d3\n              .select(item)\n              .text(\n                self.filter_edges ? \"Show removed edges\" : \"Hide removed edges\"\n              );\n            self.update(false);\n          },\n          function() {\n            return _.some(self.edges, function(d) {\n              return d.removed;\n            });\n          },\n          \"hivtrace-show-removed-edges\"\n        ]);\n      }\n\n      cluster_commands.forEach(function(item, index) {\n        var handler_callback = item[1];\n        if (item[2]) {\n          this.append(\"li\")\n            .append(\"a\")\n            .text(item[0])\n            .attr(\"href\", \"#\")\n             //.attr(\"id\", item[3])\n            .on(\"click\", function(e) {\n              handler_callback(this);\n              d3.event.preventDefault();\n            });\n        }\n      }, cluster_ui_container);\n      \n\n      var button_group = d3.select(self.get_ui_element_selector_by_role(\"button_group\"));\n\n      if (!button_group.empty()) {\n        button_group.selectAll(\"button\").remove();\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Expand spacing\")\n          .on(\"click\", function(d) {\n            change_spacing(5 / 4);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-plus\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Compress spacing\")\n          .on(\"click\", function(d) {\n            change_spacing(4 / 5);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-minus\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Enlarge window\")\n          .on(\"click\", function(d) {\n            change_window_size(100, true);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-expand\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Shrink window\")\n          .on(\"click\", function(d) {\n            change_window_size(-100, true);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-compress\", true);\n\n        if (!self._is_CDC_) {\n          button_group\n            .append(\"button\")\n            .classed(\"btn btn-default btn-sm\", true)\n            .attr(\"title\", \"Compute graph statistics\")\n            .attr(\"id\", \"hivtrace-compute-graph-statistics\")\n            .on(\"click\", function(d) {\n              _.bind(self.compute_graph_stats, this)();\n            })\n            .append(\"i\")\n            .classed(\"fa fa-calculator\", true);\n        }\n\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Save Image\")\n          //.attr(\"id\", \"hivtrace-export-image\")\n          .on(\"click\", function(d) {\n             helpers.save_image(\"png\", \"#\" + self.dom_prefix + \"-network-svg\");\n          })\n          .append(\"i\")\n          .classed(\"fa fa-image\", true);\n      }\n\n      $(self.get_ui_element_selector_by_role (\"filter\")).on(\n        \"input propertychange\",\n        _.throttle(function(e) {\n          var filter_value = $(this).val();\n          self.filter(\n            filter_value\n              .split(\" \")\n              .filter(function(d) {\n                return d.length > 0;\n              })\n              .map(function(d) {\n                if (d.length > 2) {\n                  if (d[0] == '\"' && d[d.length - 1] == '\"') {\n                    return {\n                      type: \"re\",\n                      value: new RegExp(\n                        \"^\" + d.substr(1, d.length - 2) + \"$\",\n                        \"i\"\n                      )\n                    };\n                  }\n                  if (d[0] == \"<\") {\n                    var distance_threshold = parseFloat(d.substr(1));\n                    if (distance_threshold > 0) {\n                      return {\n                        type: \"distance\",\n                        value: distance_threshold\n                      };\n                    }\n                  }\n                }\n                return {\n                  type: \"re\",\n                  value: new RegExp(d, \"i\")\n                };\n              })\n          );\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role (\"hide_filter\")).on(\n        \"change\",\n        _.throttle(function(e) {\n          self.hide_unselected = !self.hide_unselected;\n          self.filter_visibility();\n          self.update(true);\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role (\"show_small_clusters\")).on(\n        \"change\",\n        _.throttle(function(e) {\n        \n          if ('size' in self.cluster_filtering_functions) {\n            delete self.cluster_filtering_functions['size'];\n          } else {\n            self.cluster_filtering_functions['size'] = self.filter_by_size;\n          }\n            \n          self.update(false);\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role (\"pairwise_table_pecentage\", true)).on(\n        \"change\",\n        _.throttle(function(e) {\n          self.show_percent_in_pairwise_table = !self.show_percent_in_pairwise_table;\n          render_binned_table(\n            \"attribute_table\",\n            self.colorizer[\"category_map\"],\n            self.colorizer[\"category_pairwise\"]\n          );\n        }, 250)\n      );\n    }\n\n    if (_networkGraphAttrbuteID in json) {\n      attributes = json[_networkGraphAttrbuteID];\n    } else {\n      if (attributes && \"hivtrace\" in attributes) {\n        attributes = attributes[\"hivtrace\"];\n      }\n    }\n\n\n    // Initialize class attributes\n    singletons = graph_data.Nodes.filter(function(v, i) {\n      return v.cluster === null;\n    }).length;\n    self.nodes = graph_data.Nodes.filter(function(v, i) {\n      if (\n        v.cluster &&\n        typeof self.exclude_cluster_ids[v.cluster] === \"undefined\"\n      ) {\n        connected_links[i] = total++;\n        return true;\n      }\n      return false;\n    });\n    self.edges = graph_data.Edges.filter(function(v, i) {\n      return (\n        connected_links[v.source] != undefined &&\n        connected_links[v.target] != undefined\n      );\n    });\n    self.edges = self.edges.map(function(v, i) {\n      v.source = connected_links[v.source];\n      v.target = connected_links[v.target];\n      v.id = i;\n      return v;\n    });\n\n    compute_node_degrees(self.nodes, self.edges);\n\n    default_layout(self.initial_packed);\n    self.clusters.forEach(function(d, i) {\n      self.cluster_mapping[d.cluster_id] = i;\n      d.hxb2_linked = d.children.some(function(c) {\n        return c.hxb2_linked;\n      });\n      _compute_cluster_degrees (d);\n      d.distances = [];\n    });\n    \n      try {\n        if (options && options [\"extra_menu\"]) {\n          var extra_ui_container = d3.select(\n            self.get_ui_element_selector_by_role (\"extra_operations_container\")\n          );\n            \n          d3.select(\n            self.get_ui_element_selector_by_role (\"extra_operations_enclosure\")\n          )  .selectAll (\"button\").text (options[\"extra_menu\"][\"title\"]).append (\"span\").classed(\"caret\",\"true\");\n          //extra_ui_container\n          extra_ui_container.selectAll(\"li\").remove();\n\n            options[\"extra_menu\"][\"items\"].forEach(function(item, index) {  \n                //console.log (item);\n                var handler_callback = item[1];\n                if (_.isFunction (item[0])) {\n                   item[0](self,this.append(\"li\"));\n                } else {\n                  this.append(\"li\")\n                    .append(\"a\")\n                    .text(item[0])\n                    .attr(\"href\", \"#\")\n                    .on(\"click\", function(e) {\n                      handler_callback(self, this);\n                      d3.event.preventDefault();\n                    });\n                }\n              }, extra_ui_container);\n                      \n          d3.select (self.get_ui_element_selector_by_role (\"extra_operations_enclosure\")).style (\"display\" , null);\n       \n        }\n      } catch (err) {\n        console.log (err);\n      }\n\n      self._aux_populate_category_menus = function ()  {\n       if (button_bar_ui) {\n        // decide if the variable can be considered categorical by examining its range\n\n        //console.log (\"self._aux_populate_category_menus\");\n        var valid_cats = _.filter(\n          _.map(graph_data[_networkGraphAttrbuteID], self._aux_populate_category_fields),\n          function(d) {\n            //console.log (d);\n            return (\n              d.discrete && \"value_range\" in d &&\n              d[\"value_range\"].length <= _maximumValuesInCategories\n            );\n          }\n        );\n        \n\n        var valid_shapes = _.filter(valid_cats, function(d) {\n          return (\n            d.discrete && d.dimension <= 7 ||\n            d[\"raw_attribute_key\"] in _networkPresetShapeSchemes\n          );\n        });\n\n        // sort values alphabetically for consistent coloring\n\n        _.each([valid_cats, valid_shapes], function(list) {\n          _.each(list, self._aux_process_category_values)});\n\n        var valid_scales = _.filter(\n          _.map(graph_data[_networkGraphAttrbuteID], function(d, k) {\n            function determine_scaling(d, values, scales) {\n              var low_var = Infinity;\n\n              _.each(scales, function(scl) {\n                d[\"value_range\"] = d3.extent(values);\n                var bins = _.map(\n                  _.range(_networkContinuousColorStops),\n                  function() {\n                    return 0;\n                  }\n                );\n                scl\n                  .range([0, _networkContinuousColorStops - 1])\n                  .domain(d[\"value_range\"]);\n                _.each(values, function(v) {\n                  bins[Math.floor(scl(v))]++;\n                });\n\n                var mean = values.length / _networkContinuousColorStops;\n                var vrnc = _.reduce(bins, function(p, c) {\n                  return p + (c - mean) * (c - mean);\n                });\n\n                //console.log (d['value_range'], bins);\n\n                if (vrnc < low_var) {\n                  low_var = vrnc;\n                  d[\"scale\"] = scl;\n                }\n              });\n            }\n\n            d[\"raw_attribute_key\"] = k;\n            if (d.type == \"Number\") {\n              var values = _.filter(\n                _.map(graph_data.Nodes, function(nd) {\n                  return self.attribute_node_value_by_id(nd, k, true);\n                }),\n                function(v) {\n                  return v != _networkMissing;\n                }\n              );\n               // automatically determine the scale and see what spaces the values most evenly\n              determine_scaling(d, values, [\n                d3.scale.linear(),\n                d3.scale.log(),\n                d3.scale.pow().exponent(1 / 3),\n                d3.scale.pow().exponent(0.25),\n                d3.scale.pow().exponent(0.5),\n                d3.scale.pow().exponent(1 / 8),\n                d3.scale.pow().exponent(1 / 16)\n              ]);\n            } else {\n              if (d.type == \"Date\") {\n                var values = _.filter(\n                  _.map(graph_data.Nodes, function(nd) {\n                    try {\n                      var a_date = self.attribute_node_value_by_id(nd, k);\n                      //console.log (k, a_date);\n                      inject_attribute_node_value_by_id(\n                        nd,\n                        k,\n                        self._parse_dates (a_date)\n                      );\n                    } catch (err) {\n                      inject_attribute_node_value_by_id(nd, k, _networkMissing);\n                    }\n                    return self.attribute_node_value_by_id(nd, k);\n                  }),\n                  function(v) {\n                    return v == _networkMissing ? null : v;\n                  }\n                );\n                // automatically determine the scale and see what spaces the values most evenly\n                if (values.length == 0) {// invalid scale \n                    return {};\n                }\n                determine_scaling(d, values, [d3.time.scale()]);\n              }\n            }\n            return d;\n          }),\n          function(d) {\n            return d.type == \"Number\" || d.type == \"Date\";\n          }\n        );\n\n        function _menu_label_gen (d) {\n            return (d[\"annotation\"] ? \"[\" + d[\"annotation\"] + \"] \": \"\") + d[\"label\"];\n        }\n\n        //console.log (valid_scales);\n        //valid_cats.splice (0,0, {'label' : 'None', 'index' : -1});\n\n        [\n          d3.select(self.get_ui_element_selector_by_role (\"attributes\")),\n          d3.select(self.get_ui_element_selector_by_role (\"attributes_cat\", true))\n        ].forEach(function(m) {\n        \n            \n          //console.log (m);  \n        \n          if (m.empty ()) {\n            return;\n          }\n          m.selectAll(\"li\").remove();\n\n          var menu_items = [\n            [[\"None\", null, _.partial(self.handle_attribute_categorical, null)]],\n            [[\"Categorical\", \"heading\", null]]\n          ].concat(\n            valid_cats.map(function(d, i) {\n              return [\n                [\n                  _menu_label_gen(d),\n                  d[\"raw_attribute_key\"],\n                  _.partial(\n                    self.handle_attribute_categorical,\n                    d[\"raw_attribute_key\"]\n                  )\n                ]\n              ];\n            })\n          );\n\n          if (valid_scales.length) {\n            menu_items = menu_items\n              .concat([[[\"Continuous\", \"heading\", null]]])\n              .concat(\n                valid_scales.map(function(d, i) {\n                  return [\n                    [\n                      _menu_label_gen(d),\n                      d[\"raw_attribute_key\"],\n                      _.partial(\n                        self.handle_attribute_continuous,\n                        d[\"raw_attribute_key\"]\n                      )\n                    ]\n                  ];\n                })\n              );\n          }\n\n          var cat_menu = m.selectAll(\"li\").data(menu_items);\n\n          cat_menu\n            .enter()\n            .append(\"li\")\n            .classed(\"disabled\", function(d) {\n              return d[0][1] == \"heading\";\n            })\n            .style(\"font-variant\", function(d) {\n              return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n            });\n\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (d[1] == \"heading\") return \"font-style: italic\";\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n\n        [d3.select(self.get_ui_element_selector_by_role (\"shapes\"))].forEach(function(m) {\n          m.selectAll(\"li\").remove();\n          var cat_menu = m.selectAll(\"li\").data(\n            [\n              [[\"None\", null, _.partial(self.handle_shape_categorical, null)]]\n            ].concat(\n              valid_shapes.map(function(d, i) {\n                return [\n                  [\n                    _menu_label_gen(d),\n                    d[\"raw_attribute_key\"],\n                    _.partial(self.handle_shape_categorical, d[\"raw_attribute_key\"])\n                  ]\n                ];\n              })\n            )\n          );\n\n          cat_menu.enter().append(\"li\").style(\"font-variant\", function(d) {\n            return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n          });\n\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n\n        $(self.get_ui_element_selector_by_role (\"opacity_invert\")).on(\"click\", function(e) {\n          if (self.colorizer[\"opacity_scale\"]) {\n            self.colorizer[\"opacity_scale\"].range(\n              self.colorizer[\"opacity_scale\"].range().reverse()\n            );\n            self.update(true);\n            self.draw_attribute_labels();\n          }\n          $(this).toggleClass(\"btn-active btn-default\");\n        });\n\n        $(self.get_ui_element_selector_by_role (\"attributes_invert\")).on(\"click\", function(e) {\n          if (self.colorizer[\"category_id\"]) {\n            graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n              \"scale\"\n            ].range(\n              graph_data[_networkGraphAttrbuteID][\n                self.colorizer[\"category_id\"]\n              ][\"scale\"]\n                .range()\n                .reverse()\n            );\n            self.clusters.forEach(function(the_cluster) {\n              the_cluster[\"gradient\"] = compute_cluster_gradient(\n                the_cluster,\n                self.colorizer[\"category_id\"]\n              );\n            });\n            self.update(true);\n            self.draw_attribute_labels();\n          }\n          $(this).toggleClass(\"btn-active btn-default\");\n        });\n\n        [d3.select(self.get_ui_element_selector_by_role (\"opacity\"))].forEach(function(m) {\n          m.selectAll(\"li\").remove();\n          var cat_menu = m.selectAll(\"li\").data(\n            [\n              [[\"None\", null, _.partial(self.handle_attribute_opacity, null)]]\n            ].concat(\n              valid_scales.map(function(d, i) {\n                return [\n                  [\n                    d[\"label\"],\n                    d[\"raw_attribute_key\"],\n                    _.partial(self.handle_attribute_opacity, d[\"raw_attribute_key\"])\n                  ]\n                ];\n              })\n            )\n          );\n\n          cat_menu.enter().append(\"li\").style(\"font-variant\", function(d) {\n            return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n          });\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n      }\n     };\n\n    if (attributes) {\n      /*\n         map attributes into nodes and into the graph object itself using\n         _networkGraphAttrbuteID as the key\n      */\n\n      if (\"attribute_map\" in attributes) {\n        var attribute_map = attributes[\"attribute_map\"];\n\n        if (\"map\" in attribute_map && attribute_map[\"map\"].length > 0) {\n          graph_data[_networkGraphAttrbuteID] = attribute_map[\n            \"map\"\n          ].map(function(a, i) {\n            return {\n              label: a,\n              type: null,\n              values: {},\n              index: i,\n              range: 0\n            };\n          });\n\n          graph_data.Nodes.forEach(function(n) {\n            n[_networkGraphAttrbuteID] = n.id.split(attribute_map[\"delimiter\"]);\n            n[_networkGraphAttrbuteID].forEach(function(v, i) {\n              if (i < graph_data[_networkGraphAttrbuteID].length) {\n                if (!(v in graph_data[_networkGraphAttrbuteID][i][\"values\"])) {\n                  graph_data[_networkGraphAttrbuteID][i][\"values\"][v] =\n                    graph_data[_networkGraphAttrbuteID][i][\"range\"];\n                  graph_data[_networkGraphAttrbuteID][i][\"range\"] += 1;\n                }\n              }\n              //graph_data [_networkGraphAttrbuteID][i][\"values\"][v] = 1 + (graph_data [_networkGraphAttrbuteID][i][\"values\"][v] ? graph_data [_networkGraphAttrbuteID][i][\"values\"][v] : 0);\n            });\n          });\n\n          graph_data[_networkGraphAttrbuteID].forEach(function(d) {\n            if (\n              d[\"range\"] < graph_data.Nodes.length &&\n              d[\"range\"] > 1 &&\n              d[\"range\"] <= 20\n            ) {\n              d[\"type\"] = \"category\";\n            }\n          });\n        }\n      }\n\n      _.each(self._networkPredefinedAttributeTransforms, function(\n        computed,\n        key\n      ) {\n      \n        if (_.isFunction (computed)) {\n            computed = computed (self);\n        }\n      \n        if (\n          !computed[\"depends\"] ||\n          _.has(graph_data[_networkGraphAttrbuteID], computed[\"depends\"])\n        ) {\n          var extension = {};\n          extension[key] = computed;\n          _.extend(graph_data[_networkGraphAttrbuteID], extension);\n          self.inject_attribute_description (key, computed);\n          _.each(graph_data.Nodes, function(node) {\n            inject_attribute_node_value_by_id(node, key, computed[\"map\"](node, self));\n          });\n        }\n      });\n\n      self._aux_populate_category_menus();\n    \n      // populate the UI elements\n    }\n\n    if (self.cluster_sizes.length > max_points_to_render) {\n      var sorted_array = self.cluster_sizes\n        .map(function(d, i) {\n          return [d, i + 1];\n        })\n        .sort(function(a, b) {\n          return a[0] - b[0];\n        });\n\n      for (var k = 0; k < sorted_array.length - max_points_to_render; k++) {\n        self.exclude_cluster_ids[sorted_array[k][1]] = 1;\n      }\n\n      warning_string =\n        \"Excluded \" +\n        (sorted_array.length - max_points_to_render) +\n        \" clusters (maximum size \" +\n        sorted_array[k - 1][0] +\n        \" nodes) because only \" +\n        max_points_to_render +\n        \" objects can be shown at once.\";\n    }\n\n\n    self.edges.forEach(function(e, i) {\n      self.clusters[\n        self.cluster_mapping[self.nodes[e.target].cluster]\n      ].distances.push(e.length);\n    });\n\n    self.clusters.forEach(function(d, i) {\n      d.distances = helpers.describe_vector(d.distances);\n    });\n    //self.clusters\n\n    self.update();\n  }\n\n  function sort_table_toggle_icon(element, value) {\n    if (value) {\n      $(element).data(\"sorted\", value);\n      d3\n        .select(element)\n        .selectAll(\"i\")\n        .classed(\"fa-sort-amount-desc\", value == \"desc\")\n        .classed(\"fa-sort-amount-asc\", value == \"asc\")\n        .classed(\"fa-sort\", value == \"unsorted\");\n    } else {\n      var sorted_state = $(element).data(\"sorted\");\n      sort_table_toggle_icon(element, sorted_state == \"asc\" ? \"desc\" : \"asc\");\n      return sorted_state == \"asc\" ? d3.descending : d3.ascending;\n    }\n  }\n\n  function sort_table_by_column(element, datum) {\n    d3.event.preventDefault();\n    var table_element = $(element).closest(\"table\");\n    if (table_element.length) {\n    \n      var sort_on = parseInt($(element).data(\"column-id\"));\n      var sort_key = datum.sort;\n      var sorted_state = $(element).data(\"sorted\");\n      var sorted_function = sort_table_toggle_icon(element);\n\n      var sort_accessor;\n            \n      if (sort_key) {\n        if (_.isFunction (sort_key)) {\n            sort_accessor = function (x) {\n                return sort_key (x);\n            }\n        } else {\n            sort_accessor = function(x) {\n                var val = x[sort_key];\n                if (_.isFunction (val)) return val();\n                return val;\n              };\n        }\n      } else {\n          sort_accessor = function(x) {\n            return x;\n          };\n       }\n        \n\n      d3\n        .select(table_element[0])\n        .select(\"tbody\")\n        .selectAll(\"tr\")\n        .sort(function(a, b) {\n          return sorted_function(\n            sort_accessor(a[sort_on]),\n            sort_accessor(b[sort_on])\n          );\n        });\n\n      // select all other elements from thead and toggle their icons\n\n      $(table_element)\n        .find(\"thead [data-column-id]\")\n        .filter(function() {\n          return parseInt($(this).data(\"column-id\")) != sort_on;\n        })\n        .each(function() {\n          sort_table_toggle_icon(this, \"unsorted\");\n        });\n    }\n  }\n  \n\n  function format_a_cell(data, index, item) {\n    var this_sel = d3.select(item);\n    var current_value =\n      typeof data.value === \"function\" ? data.value() : data.value;\n\n    \n    if (\"callback\" in data) {\n      data.callback(item, current_value);\n    } else {\n      var repr = \"format\" in data ? data.format(current_value) : current_value;\n      if (\"html\" in data) this_sel.html(repr);\n      else this_sel.text(repr);\n      if (\"sort\" in data) {\n        var clicker = this_sel\n          .append(\"a\")\n          .property(\"href\", \"#\")\n          .on(\"click\", function(d) {\n            sort_table_by_column(this, d);\n          })\n          .attr(\"data-sorted\", \"unsorted\")\n          .attr(\"data-column-id\", index)\n        clicker\n          .append(\"i\")\n          .classed(\"fa fa-sort\", true)\n          .style(\"margin-left\", \"0.2em\");\n      }\n    }\n    if (\"help\" in data) {\n      this_sel.attr(\"title\", data.help);\n    }\n  }\n\n  function add_a_sortable_table(container, headers, content, overwrite) {\n    var thead = container.selectAll(\"thead\");\n    if (thead.empty() || overwrite) {\n      thead.remove ();\n      thead = container.append(\"thead\");\n      thead\n        .selectAll(\"tr\")\n        .data(headers)\n        .enter()\n        .append(\"tr\")\n        .selectAll(\"th\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"th\")\n        .call(function(selection) {\n          return selection.each(function(d, i) {\n            format_a_cell(d, i, this);\n          });\n        });\n    }\n\n    var tbody = container.selectAll(\"tbody\");\n    if (tbody.empty() || overwrite) {\n      tbody.remove();\n      tbody = container.append(\"tbody\");\n      tbody\n        .selectAll(\"tr\")\n        .data(content)\n        .enter()\n        .append(\"tr\")\n        .selectAll(\"td\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"td\")\n        .call(function(selection) {\n          return selection.each(function(d, i) {\n            handle_cluster_click;\n            format_a_cell(d, i, this);\n          });\n        });\n    }\n  }\n\n  function _cluster_table_draw_id(element, payload) {\n    var this_cell = d3.select(element);\n    this_cell.selectAll(\"*\").remove();\n    var _is_subcluster = payload[1];\n    var cluster_id = payload[0];\n    \n    if (_is_subcluster) {\n        //this_cell.append(\"i\")\n        //      .classed(\"fa fa-arrow-circle-o-right\", true).style(\"padding-right\", \"0.25em\");  \n              \n        if (payload[2].rr_count) {\n            this_cell.append(\"i\")\n                 .classed(\"fa fa-exclamation-triangle\", true).attr (\"title\", \"Subcluster has recent/rapid nodes\"); \n        }  \n        this_cell.append(\"span\").text(cluster_id).style(\"padding-right\", \"0.5em\");\n        \n          \n        this_cell\n          .append(\"button\")\n          .classed(\"btn btn-primary btn-xs pull-right\", true)\n          .text(\"View\")\n          .on (\"click\", function (e) {\n            self.view_subcluster (payload[2]);\n          });\n\n    } else {\n        this_cell.append(\"span\").text(cluster_id).style(\"padding-right\", \"0.5em\");\n        this_cell\n          .append(\"button\")\n          .classed(\"btn btn-primary btn-xs pull-right\", true)\n          .text(\"View\")\n          .on (\"click\", function (e) {\n            self.open_exclusive_tab_view (cluster_id);\n          });\n    }\n    this_cell\n      .append(\"button\")\n      .classed(\"btn btn-xs pull-right\", true)\n      .text(\"List\")\n      .attr(\"data-toggle\", \"modal\")\n      .attr(\"data-target\", self.get_ui_element_selector_by_role (\"cluster_list\", true))\n      .attr(\"data-cluster\", cluster_id);    \n  }\n\n  function _cluster_table_draw_buttons(element, payload) {\n    var this_cell = d3.select(element);\n    var labels = [[payload[0] ? \"expand\" : \"collapse\", 0]];\n    if (payload[1]) {\n      labels.push([\"problematic\", 1]);\n    }\n    if (payload[2]) {\n      labels.push([\"match\", 1]);\n    }\n    var buttons = this_cell.selectAll(\"button\").data(labels);\n    buttons.enter().append(\"button\");\n    buttons.exit().remove();\n    buttons\n      .classed(\"btn btn-primary btn-xs\", true)\n      .text(function(d) {\n        return d[0];\n      })\n      .attr(\"disabled\", function(d) {\n        return d[1] ? \"disabled\" : null;\n      })\n      .on(\"click\", function(d) {\n        if (d[1] == 0) {\n          if (payload[0]) {\n            expand_cluster(\n              self.clusters[payload[payload.length - 1] - 1],\n              true\n            );\n          } else {\n            collapse_cluster(self.clusters[payload[payload.length - 1] - 1]);\n          }\n          self.update_volatile_elements (self.cluster_table);\n          if (self.subcluster_table) {\n            self.update_volatile_elements (self.subcluster_table);\n          }\n        }\n      });\n  }\n  \n  function _extract_single_cluster (nodes, filter, no_clone, given_json) {\n    /** \n        Extract the nodes and edges between them into a separate objects \n        @param nodes [array]  the list of nodes to extract\n        @param filter [function, optional] (edge) -> bool filtering function for deciding which edges will be used to define clusters\n        @param no_clone [bool] if set to T, node objects are not shallow cloned in the return object\n        \n        @return [dict] the object representing \"Nodes\" and \"Edges\" in the extracted cluster\n        \n    */\n    \n    var cluster_json = {};\n    var map_to_id    = {};\n        \n    cluster_json.Nodes = _.map (nodes, function (c, i) {\n        map_to_id [c.id] = i; \n        if (no_clone) {\n            return c;\n        }\n        var cc = _.clone (c);\n        cc.cluster = 1;\n        return cc;\n    });\n    \n    given_json = given_json || json;\n    \n    cluster_json.Edges = _.filter (given_json.Edges, function (e) {\n        return given_json.Nodes[e.source].id in map_to_id && given_json.Nodes[e.target].id in map_to_id;\n    });\n    \n    if (filter) {\n        cluster_json.Edges = _.filter (cluster_json.Edges, filter);\n    }\n    \n    cluster_json.Edges = _.map (cluster_json.Edges, function (e) {\n        var ne = _.clone (e);\n        ne.source = map_to_id[given_json.Nodes[e.source].id];\n        ne.target = map_to_id[given_json.Nodes[e.target].id];\n        return ne;\n    });  \n    \n    return cluster_json;\n   }\n\n  function _node_table_draw_buttons(element, payload) {\n    var this_cell = d3.select(element);\n\tvar labels = [\n      payload.length == 1\n        ? (_.isString (payload[0]) ? [ payload[0],1,\"btn-warning\"] : [\"can't be shown\", 1 ])\n        : [payload[0] ? \"hide\" : \"show\", 0]\n\t];\n\t\n\tif (payload.length == 2 && payload[1] >= 1) {\n\t    labels.push ([\"View cluster\", function () {self.open_exclusive_tab_view (payload[1])}]);\n\t}\n\t\n    var buttons = this_cell.selectAll(\"button\").data(labels);\n    buttons.enter().append(\"button\");\n    buttons.exit().remove();\n    buttons\n      .classed(\"btn btn-xs btn-node-property\", true)\n      .classed(\"btn-primary\", true)\n      //.classed(function (d) {return d.length >=3 ? d[2] : \"\";}, function (d) {return d.length >= 3;})\n      .text(function(d) {\n        return d[0];\n      })\n      .attr(\"disabled\", function(d) {\n        return d[1] && !_.isFunction (d[1]) ? \"disabled\" : null;\n      })\n      .on(\"click\", function(d) {\n        if (_.isFunction (d[1])) {\n            d[1].call (d);\n        } else {\n            if (d[1] == 0) {\n              if (payload[0]) {\n                collapse_cluster(\n                  self.clusters[payload[payload.length - 1] - 1],\n                  true\n                );\n              } else {\n                expand_cluster(self.clusters[payload[payload.length - 1] - 1]);\n              }\n              //format_a_cell(d3.select(element).datum(), null, element);\n              self.update_volatile_elements (self.node_table);\n            }\n        }\n    \n      });\n      buttons.each (function (d,e) {\n        if (d.length >= 3 ) {\n            d3.select (this).classed (\"btn-primary\", false).classed (d[2], true);\n        }\n      });\n  }\n\n  self.update_volatile_elements = function(container) {\n    container\n      .selectAll(\"td\")\n      .filter(function(d, i) {\n        return \"volatile\" in d;\n      })\n      .each(function(d, i) {\n        format_a_cell(d, i, this);\n      });\n  };\n\n  self.draw_node_table = function (extra_columns, node_list) {\n    if (self.node_table) {\n    \n     node_list = node_list || self.nodes;\n    \n     var headers = [\n          [\n            {\n              value: \"ID\",\n              sort: \"value\",\n              help: \"Node ID\"\n            },\n            {\n              value: \"Status\",\n              sort: \"value\"\n            },\n            {\n              value: \"# of links\",\n              sort: \"value\",\n              help: \"Number of links (Node degree)\"\n            },\n            {\n              value: \"Cluster\",\n              sort: \"value\",\n              help: \"Which cluster does the node belong to\"\n            }\n          ]\n        ];\n\n      if (extra_columns) {\n        _.each (extra_columns, function (d) {\n            headers[0].push (d.description);\n        });\n      }\n    \n      var rows =         node_list.map(function(n, i) {\n          var this_row = [\n            {\n              value: n.id,\n              help: \"Node ID\"\n            },\n            {\n              value: function() {\n                if (n.node_class != \"injected\") {\n                    try {\n                      if (self.exclude_cluster_ids[n.cluster]) {\n                        // parent cluster can't be rendered\n                        // because of size restrictions\n                        return [n.cluster];\n                      }\n                      return [\n                        !self.clusters[self.cluster_mapping[n.cluster]].collapsed,\n                        n.cluster\n                      ];\n                    } catch (err) {\n                        return [-1]\n                    }\n                } else {\n                    return [n.node_annotation];\n                }\n              },\n              callback: _node_table_draw_buttons,\n              volatile: true\n            },\n            {\n              value: (\"degree\" in n ? n.degree : \"Not defined\"),\n              help: \"Node degree\"\n            },\n            {\n              value: (\"cluster\" in n ? n.cluster : \"Not defined\"),\n              help: \"Which cluster does the node belong to\"\n            }\n          ];\n          \n           if (extra_columns) {\n            _.each (extra_columns, function (ed) {\n                this_row.push (ed.generator (n, self));\n            });\n          }\n          return this_row;\n\n        });\n      \n      add_a_sortable_table(\n        self.node_table,\n        headers,\n        rows,\n        true\n        // rows\n      );\n    }\n  }\n\n  self.draw_cluster_table = function (extra_columns, element, skip_clusters, skip_subclusters) {\n    element = element || self.cluster_table;\n    if (element) {\n    \n      var headers = [\n          [\n            {\n              value: \"Cluster ID\",\n              sort: function (c) {return _.map (c.value[0].split ('.'), function (ss) {return _networkDotFormatPadder(+ss)}).join (\"|\");},\n              help: \"Unique cluster ID\"\n            },\n            {\n              value: \"Visibility\",\n              sort: \"value\",\n              help: \"Visibility in the network tab\"\n            },\n            {\n              value: \"Size\",\n              sort: \"value\",\n              help: \"Number of nodes in the cluster\"\n            }\n            \n          ]\n        ];\n        \n     if (!self._is_CDC) {\n        headers.push ({\n              value: \"# links/node<br>Mean [Median, IQR]\",\n              html: true\n            });\n            \n        headers.push ({\n              value: \"Genetic distance<br>Mean [Median, IQR]\",\n              help: \"Genetic distance among nodes in the cluster\",\n              html: true\n            });\n     }\n        \n      if (extra_columns) {\n        _.each (extra_columns, function (d) {\n            headers[0].push (d.description);\n        });\n      }\n      \n      var rows = [];\n      \n      _.each (self.clusters, function (cluster) {\n            var make_row = function (d, is_subcluster) {\n                    var this_row = [\n                    {\n                      value: [d.cluster_id, is_subcluster,d],//.cluster_id,\n                      callback: _cluster_table_draw_id\n                    },\n                    {\n                      value: function() {\n                        var actual_cluster = is_subcluster ? d.parent_cluster : d;\n                      \n                        return [\n                          actual_cluster.collapsed,\n                          actual_cluster.hxb2_linked,\n                          actual_cluster.match_filter,\n                          actual_cluster.cluster_id\n                        ];\n                      },\n                      callback: _cluster_table_draw_buttons,\n                      volatile: true\n                    },\n                    {\n                      value: d.children.length\n                    }\n                  ];\n                  \n                 if (!self._is_CDC_)  {\n                    this_row.push ({\n                      value: d.degrees,\n                      format: function(d) {\n                        try {\n                            return (\n                              _defaultFloatFormat(d[\"mean\"]) +\n                              \" [\" +\n                              _defaultFloatFormat(d[\"median\"]) +\n                              \", \" +\n                              _defaultFloatFormat(d[\"Q1\"]) +\n                              \" - \" +\n                              _defaultFloatFormat(d[\"Q3\"]) +\n                              \"]\"\n                            );\n                        } catch (e) {\n                            return \"\";\n                        }\n                      }\n                    });\n                    this_row.push ({\n                      value: d.distances,\n                      format: function(d) {\n                        try {\n                            return (\n                              _defaultFloatFormat(d[\"mean\"]) +\n                              \" [\" +\n                              _defaultFloatFormat(d[\"median\"]) +\n                              \", \" +\n                              _defaultFloatFormat(d[\"Q1\"]) +\n                              \" - \" +\n                              _defaultFloatFormat(d[\"Q3\"]) +\n                              \"]\"\n                            );\n                        } catch (e) {\n                            return \"\";\n                        }\n                      }\n                    });\n                    \n                 }    \n                  if (extra_columns) {\n                    _.each (extra_columns, function (ed) {\n                        this_row.push (ed.generator (d, self));\n                    });\n                  }  \n                  \n                  return this_row;          \n            };\n          \n          if (!skip_clusters) {\n            rows.push (make_row (cluster, false));\n          }\n          \n          if (!skip_subclusters) {\n              _.each (cluster.subclusters, function (sub_cluster) {\n                rows.push (make_row (sub_cluster, true));\n              });\n          }\n      });\n      \n    \n      add_a_sortable_table(\n        element,\n        headers,\n        rows,\n        true);\n    }\n  }\n\n  /*------------ Update layout code ---------------*/\n  function update_network_string(node_count, edge_count) {\n    if (network_status_string) {\n      var clusters_shown = _.filter(self.clusters, function(c) {\n          return !c.collapsed;\n        }).length,\n        clusters_removed = self.cluster_sizes.length - self.clusters.length,\n        nodes_removed =\n          graph_data.Nodes.length - singletons - self.nodes.length;\n          \n    var clusters_selected = _.filter(self.clusters, function(c) {\n          return !c.is_hidden && c.match_filter !== undefined && c.match_filter > 0;\n        }).length;\n        \n\n    \n    var nodes_selected = _.filter(self.nodes, function(n) {\n          return n.match_filter && ! n.is_hidden;\n        }).length;\n    \n    \n      /*var s = \"Displaying a network on <strong>\" + self.nodes.length + \"</strong> nodes, <strong>\" + self.clusters.length + \"</strong> clusters\"\n              + (clusters_removed > 0 ? \" (an additional \" + clusters_removed + \" clusters and \" + nodes_removed + \" nodes have been removed due to network size constraints)\" : \"\") + \". <strong>\"\n              + clusters_shown +\"</strong> clusters are expanded. Of <strong>\" + self.edges.length + \"</strong> edges, <strong>\" + draw_me.edges.length + \"</strong>, and of  <strong>\" + self.nodes.length  + \" </strong> nodes,  <strong>\" + draw_me.nodes.length + \" </strong> are displayed. \";\n      if (singletons > 0) {\n          s += \"<strong>\" +singletons + \"</strong> singleton nodes are not shown. \";\n      }*/\n      \n \n      var s =\n        \"<span class = 'badge'>\" +\n        self.clusters.length +\n        \"</span> clusters <span class = 'label label-primary'>\" +\n        clusters_shown +\n        \" expanded / \" + clusters_selected + \" match </span> <span class = 'badge'> \" +\n        self.nodes.length +\n        \"</span> nodes <span class = 'label label-primary'>\" +\n        node_count +\n        \" shown / \" + nodes_selected + \" match </span> <span class = 'badge'> \" +\n        self.edges.length +\n        \"</span> \" +\n        (self._is_CDC_ ? \"links\" : \"edges\") +\n        \" <span class = 'label label-primary'>\" +\n        edge_count +\n        \" shown</span>\";\n        \n      d3.select(network_status_string).html(s);\n    }\n  }\n\n  function draw_a_node(container, node) {\n  \n    if (node) {\n        container = d3.select(container);\n\n        var symbol_type =\n          node.hxb2_linked && !node.is_lanl\n            ? \"cross\"\n            : node.is_lanl ? \"triangle-down\" : self.node_shaper[\"shaper\"](node);\n\n        node.rendered_size = Math.sqrt(node_size(node)) / 2 + 2;\n\n        container\n          .attr(\"d\", misc.symbol(symbol_type).size(node_size(node)))\n          .attr(\"class\", \"node\")\n          .classed(\"selected_object\", function(d) {\n            return d.match_filter;\n          })\n          .classed(\"injected_object\", function(d) {\n            return d.node_class == \"injected\";\n          })\n          .attr(\"transform\", function(d) {\n            return \"translate(\" + d.x + \",\" + d.y + \")\";\n          })\n          .style(\"fill\", function(d) {\n            return node_color(d);\n          })\n          .style(\"opacity\", function(d) {\n            return node_opacity(d);\n          })\n          .style(\"display\", function(d) {\n            if (d.is_hidden) return \"none\";\n            return null;\n          })\n          .on(\"click\", handle_node_click)\n          .on(\"mouseover\", node_pop_on)\n          .on(\"mouseout\", node_pop_off)\n          .call(network_layout.drag().on(\"dragstart\", node_pop_off))\n          ;   \n        }\n  }\n\n  function draw_a_cluster(container, the_cluster) {\n    var container_group = d3.select(container);\n\n    var draw_from = the_cluster[\"binned_attributes\"]\n      ? the_cluster[\"binned_attributes\"].map(function(d) {\n          return d.concat([0]);\n        })\n      : [[null, 1, 0]];\n\n    if (the_cluster.match_filter) {\n      draw_from = draw_from.concat([\n        [\"selected\", the_cluster.match_filter, 1],\n        [\n          \"not selected\",\n          the_cluster.children.length - the_cluster.match_filter,\n          1\n        ]\n      ]);\n    }\n\n    var sums = [\n      d3.sum(\n        draw_from.filter(function(d) {\n          return d[2] == 0;\n        }),\n        function(d) {\n          return d[1];\n        }\n      ),\n      d3.sum(\n        draw_from.filter(function(d) {\n          return d[2] != 0;\n        }),\n        function(d) {\n          return d[1];\n        }\n      )\n    ];\n\n    var running_totals = [0, 0];\n\n    draw_from = draw_from.map(function(d) {\n      var index = d[2];\n      var v = {\n        container: container,\n        cluster: the_cluster,\n        startAngle: running_totals[index] / sums[index] * 2 * Math.PI,\n        endAngle: (running_totals[index] + d[1]) / sums[index] * 2 * Math.PI,\n        name: d[0],\n        rim: index > 0\n      };\n      running_totals[index] += d[1];\n      return v;\n    });\n\n    var arc_radius = cluster_box_size(the_cluster) * 0.5;\n    the_cluster.rendered_size = arc_radius + 2;\n    var paths = container_group.selectAll(\"path\").data(draw_from);\n    paths.enter().append(\"path\");\n    paths.exit().remove();\n\n    paths\n      .classed(\"cluster\", true)\n      .classed(\"hiv-trace-problematic\", function(d) {\n        return the_cluster.hxb2_linked && !d.rim;\n      })\n      .classed(\"hiv-trace-selected\", function(d) {\n        return d.rim;\n      })\n      .attr(\"d\", function(d) {\n        return (d.rim\n          ? d3.svg.arc().innerRadius(arc_radius + 2).outerRadius(arc_radius + 5)\n          : d3.svg.arc().innerRadius(0).outerRadius(arc_radius))(d);\n      })\n      .style(\"fill\", function(d, i) {\n        return d.rim\n          ? self.colorizer[\"selected\"](d.name)\n          : the_cluster[\"gradient\"]\n            ? \"url(#\" + the_cluster[\"gradient\"] + \")\"\n            : cluster_color(the_cluster, d.name);\n      })\n      .style(\"stroke-linejoin\", function(d, i) {\n        return draw_from.length > 1 ? \"round\" : \"\";\n      })\n      .style(\"display\", function(d) {\n        if (the_cluster.is_hidden) return \"none\";\n        return null;\n      });\n  }\n\n  function check_for_predefined_shapes(cat_id) {\n    //console.log (cat_id);\n\n    if (cat_id in _networkPresetShapeSchemes) {\n      var domain = _.range(\n        0,\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_range\"].length\n      );\n\n      return {\n        domain: domain,\n        range: _.map(domain, function(v) {\n          return _networkPresetShapeSchemes[\n            cat_id\n          ][graph_data[_networkGraphAttrbuteID][cat_id][\"value_range\"][v]];\n        })\n      };\n    } else {\n      return {\n        domain: _.range(\n          0,\n          graph_data[_networkGraphAttrbuteID][cat_id].dimension\n        ),\n        range: _networkShapeOrdering\n      };\n    }\n  }\n\n  self.handle_shape_categorical = function (cat_id) {\n    var set_attr = \"None\";\n\n    [\"shapes\"].forEach(function(lbl) {\n      d3.select(self.get_ui_element_selector_by_role (lbl)).selectAll(\"li\").selectAll(\"a\").attr(\"style\", function(d, i) {\n        if (d[1] == cat_id) {\n          set_attr = d[0];\n          return \" font-weight: bold;\";\n        }\n        return null;\n      });\n      d3\n        .select(self.get_ui_element_selector_by_role (lbl + \"_label\"))\n        .html(\"Shape: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    if (cat_id) {\n      var domain_range = check_for_predefined_shapes(cat_id);\n\n      var shape_mapper = d3.scale\n        .ordinal()\n        .domain(domain_range[\"domain\"])\n        .range(domain_range[\"range\"]);\n      self.node_shaper[\"id\"] = cat_id;\n      self.node_shaper[\"shaper\"] = function(d) {\n        return shape_mapper(\n          graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"](\n            self.attribute_node_value_by_id(d, cat_id)\n          )\n        );\n      };\n      self.node_shaper[\"category_map\"] =\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"];\n    } else {\n      self.node_shaper.id = null;\n      self.node_shaper.shaper = function() {\n        return \"circle\";\n      };\n      self.node_shaper[\"category_map\"] = null;\n    }\n    //console.log (graph_data [_networkGraphAttrbuteID][cat_id]['value_map'], self.node_shaper.domain(), self.node_shaper.range());\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n  self.draw_attribute_labels = function () {\n  \n    self.legend_svg.selectAll(\"g.hiv-trace-legend\").remove();\n    \n    var offset = 10;\n    \n    if (self.legend_caption) {\n        self.legend_svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .classed(\"hiv-trace-legend\", true)\n            .append(\"text\")\n            .text(self.legend_caption)\n            .style(\"font-weight\", \"bold\");\n        offset += 18;\n    }\n    \n    if (self.edge_legend) {\n        self.legend_svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .classed(\"hiv-trace-legend\", true)\n            .append(\"text\")\n            .text(self.edge_legend[\"caption\"])\n            .style(\"font-weight\", \"bold\");\n        offset += 18;\n\n        _.each(self.edge_legend[\"types\"], function(\n          value,\n          key\n        ) {\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(key);\n            \n          value.call (self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"line\")\n            .attr(\"x1\", \"0\")\n            .attr(\"y1\", \"-4\")\n            .attr(\"x2\", \"12\")\n            .attr(\"y2\", \"-4\")\n            .classed(\"legend\", true));\n\n          offset += 18;\n        });    \n    }\n    \n\n    if (self.colorizer[\"category_id\"]) {\n    \n        //console.log (self.colorizer);\n        //_.each (self.colorizer[\"category_map\"](null, \"map\"), function (v){ console.log (v); });\n\n\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Color: \" + self.colorizer[\"category_id\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      if (self.colorizer[\"continuous\"]) {\n        var anchor_format =\n          graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n            \"type\"\n          ] == \"Date\"\n            ? _defaultDateViewFormatShort\n            : d3.format(\",.4r\");\n        var scale =\n          graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n            \"scale\"\n          ];\n\n        _.each(_.range(_networkContinuousColorStops), function(value) {\n          var x = scale.invert(value);\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(anchor_format(x));\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"circle\")\n            .attr(\"cx\", \"8\")\n            .attr(\"cy\", \"-4\")\n            .attr(\"r\", \"8\")\n            .classed(\"legend\", true)\n            .style(\"fill\", self.colorizer[\"category\"](x));\n\n          offset += 18;\n        });\n\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(\"missing\");\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"circle\")\n          .attr(\"cx\", \"8\")\n          .attr(\"cy\", \"-4\")\n          .attr(\"r\", \"8\")\n          .classed(\"legend\", true)\n          .style(\"fill\", _networkMissingColor);\n\n        offset += 18;\n      } else {\n        _.each(self.colorizer[\"category_map\"](null, \"map\"), function(\n          value,\n          key\n        ) {\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(key);\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"circle\")\n            .attr(\"cx\", \"8\")\n            .attr(\"cy\", \"-4\")\n            .attr(\"r\", \"8\")\n            .classed(\"legend\", true)\n            .style(\"fill\", self.colorizer[\"category\"](key));\n\n          offset += 18;\n        });\n      }\n    }\n\n    if (self.node_shaper[\"id\"]) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Shape: \" + self.node_shaper[\"id\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      var domain_range = check_for_predefined_shapes(self.node_shaper[\"id\"]);\n      var shape_mapper = d3.scale\n        .ordinal()\n        .domain(domain_range[\"domain\"])\n        .range(domain_range[\"range\"]);\n\n      _.each(self.node_shaper[\"category_map\"](null, \"map\"), function(\n        value,\n        key\n      ) {\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(key);\n\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"path\")\n          .attr(\"transform\", \"translate(5,-5)\")\n          .attr(\"d\", misc.symbol(shape_mapper(value)).size(128))\n          .classed(\"legend\", true)\n          .style(\"fill\", \"none\");\n\n        offset += 18;\n      });\n    }\n\n    if (self.colorizer[\"opacity_id\"]) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Opacity: \" + self.colorizer[\"opacity_id\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      var anchor_format =\n        graph_data[_networkGraphAttrbuteID][self.colorizer[\"opacity_id\"]][\n          \"type\"\n        ] == \"Date\"\n          ? _defaultDateViewFormatShort\n          : d3.format(\",.4r\");\n      var scale =\n        graph_data[_networkGraphAttrbuteID][self.colorizer[\"opacity_id\"]][\n          \"scale\"\n        ];\n\n      _.each(_.range(_networkContinuousColorStops), function(value) {\n        var x = scale.invert(value);\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(anchor_format(x));\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"circle\")\n          .attr(\"cx\", \"8\")\n          .attr(\"cy\", \"-4\")\n          .attr(\"r\", \"8\")\n          .classed(\"legend\", true)\n          .style(\"fill\", \"black\")\n          .style(\"opacity\", self.colorizer[\"opacity\"](x));\n\n        offset += 18;\n      });\n\n      self.legend_svg\n        .append(\"g\")\n        .classed(\"hiv-trace-legend\", true)\n        .attr(\"transform\", \"translate(20,\" + offset + \")\")\n        .append(\"text\")\n        .text(\"missing\");\n      self.legend_svg\n        .append(\"g\")\n        .classed(\"hiv-trace-legend\", true)\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .append(\"circle\")\n        .attr(\"cx\", \"8\")\n        .attr(\"cy\", \"-4\")\n        .attr(\"r\", \"8\")\n        .classed(\"legend\", true)\n        .style(\"fill\", \"black\")\n        .style(\"opacity\", _networkMissingOpacity);\n\n      offset += 18;\n    }\n  }\n\n  function compute_cluster_gradient(cluster, cat_id) {\n    if (cat_id) {\n      var id = self.dom_prefix + \"-cluster-gradient-\" + self.gradient_id++;\n      var gradient = self.network_svg\n        .selectAll(\"defs\")\n        .append(\"radialGradient\")\n        .attr(\"id\", id);\n      var values = _.map(cluster.children, function(node) {\n        var value = self.attribute_node_value_by_id(node, cat_id);\n        return value == _networkMissing ? Infinity : value;\n      }).sort(function(a, b) {\n        return 0 + a - (0 + b);\n      });\n      var finite = _.filter(values, function(d) {\n        return d < Infinity;\n      });\n      var infinite = values.length - finite.length;\n\n      if (infinite) {\n        gradient\n          .append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", _networkMissingColor);\n        gradient\n          .append(\"stop\")\n          .attr(\"offset\", \"\" + infinite / values.length * 100 + \"%\")\n          .attr(\"stop-color\", _networkMissingColor);\n      }\n\n      _.each(finite, function(value, index) {\n        gradient\n          .append(\"stop\")\n          .attr(\n            \"offset\",\n            \"\" + (1 + index + infinite) * 100 / values.length + \"%\"\n          )\n          .attr(\"stop-color\", self.colorizer[\"category\"](value));\n      });\n      //gradient.append (\"stop\").attr (\"offset\", \"100%\").attr (\"stop-color\", self.colorizer['category'] (dom[1]));\n\n      return id;\n    }\n    return null;\n  }\n\n  self.handle_attribute_opacity= function (cat_id) {\n    var set_attr = \"None\";\n\n    [\"opacity\"].forEach(function(lbl) {\n      d3.select(self.get_ui_element_selector_by_role (lbl)).selectAll(\"li\").selectAll(\"a\").attr(\"style\", function(d, i) {\n        if (d[1] == cat_id) {\n          set_attr = d[0];\n          return \" font-weight: bold;\";\n        }\n        return null;\n      });\n      d3\n        .select(self.get_ui_element_selector_by_role (lbl+\"_label\"))\n        .html(\"Opacity: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3\n      .select(self.get_ui_element_selector_by_role (\"opacity_invert\"))\n      .style(\"display\", set_attr == \"None\" ? \"none\" : \"inline\")\n      .classed(\"btn-active\", false)\n      .classed(\"btn-default\", true);\n\n    self.colorizer[\"opacity_id\"] = cat_id;\n    if (cat_id) {\n      var scale = graph_data[_networkGraphAttrbuteID][cat_id][\"scale\"];\n      self.colorizer[\"opacity_scale\"] = d3.scale\n        .linear()\n        .domain([0, _networkContinuousColorStops - 1])\n        .range([0.25, 1]);\n      self.colorizer[\"opacity\"] = function(v) {\n        if (v == _networkMissing) {\n          return _networkMissingOpacity;\n        }\n        return self.colorizer[\"opacity_scale\"](scale(v));\n      };\n    } else {\n      self.colorizer[\"opacity\"] = null;\n      self.colorizer[\"opacity_scale\"] = null;\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n  self.handle_attribute_continuous = function (cat_id) {\n  \n     var set_attr = \"None\";\n\n    render_chord_diagram(\"aux_svg_holder\", null, null);\n    render_binned_table (\"attribute_table\", null, null);\n\n    self.network_svg.selectAll(\"radialGradient\").remove();\n\n    self.clusters.forEach(function(the_cluster) {\n      delete the_cluster[\"binned_attributes\"];\n      delete the_cluster[\"gradient\"];\n    });\n\n    [\n      [\"attributes\",false],\n      [\"attributes_cat\",true]\n    ].forEach(function(lbl) {\n      d3.select(self.get_ui_element_selector_by_role (lbl[0], lbl[1])).selectAll(\"li\").selectAll(\"a\").attr(\"style\", function(d, i) {\n        if (d[1] == cat_id) {\n          set_attr = d[0];\n          return \" font-weight: bold;\";\n        }\n        return null;\n      });\n      d3.select(self.get_ui_element_selector_by_role (lbl[0] + \"_label\", lbl[1]))\n        .html(\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3\n      .select(self.get_ui_element_selector_by_role (\"attributes_invert\"))\n      .style(\"display\", set_attr == \"None\" ? \"none\" : \"inline\")\n      .classed(\"btn-active\", false)\n      .classed(\"btn-default\", true);\n\n    if (cat_id) {\n      //console.log (graph_data [_networkGraphAttrbuteID][cat_id]);\n\n      self.colorizer[\"category\"] = _.wrap(\n        d3.scale\n          .linear()\n          .range([\n            \"#fff7ec\",\n            \"#fee8c8\",\n            \"#fdd49e\",\n            \"#fdbb84\",\n            \"#fc8d59\",\n            \"#ef6548\",\n            \"#d7301f\",\n            \"#b30000\",\n            \"#7f0000\"\n          ])\n          .domain(_.range(_networkContinuousColorStops)),\n        function(func, arg) {\n          return func(\n            graph_data[_networkGraphAttrbuteID][cat_id][\"scale\"](arg)\n          );\n        }\n      ); //console.log (self.colorizer['category'].exponent ());\n\n      //console.log (self.colorizer['category'] (graph_data [_networkGraphAttrbuteID][cat_id]['value_range'][0]), self.colorizer['category'] (d['value_range'][1]));\n\n      self.colorizer[\"category_id\"] = cat_id;\n      self.colorizer[\"continuous\"] = true;\n      self.clusters.forEach(function(the_cluster) {\n        the_cluster[\"gradient\"] = compute_cluster_gradient(the_cluster, cat_id);\n      });\n\n      var points = [];\n\n      _.each(self.edges, function(e) {\n        var src = self.attribute_node_value_by_id(self.nodes[e.source], cat_id, true),\n          tgt = self.attribute_node_value_by_id(self.nodes[e.target], cat_id, true);\n\n        if (src != _networkMissing && tgt != _networkMissing) {\n          points.push({\n            x: src,\n            y: tgt,\n            title:\n              self.nodes[e.source].id +\n              \" (\" +\n              src +\n              \") -- \" +\n              self.nodes[e.target].id +\n              \" (\" +\n              tgt +\n              \")\"\n          });\n        }\n      });\n      d3\n        .select(self.get_ui_element_selector_by_role (\"aux_svg_holder_enclosed\", true))\n        .style(\"display\", null);\n\n\n      scatterPlot.scatterPlot(\n        points,\n        400,\n        400,\n        self.get_ui_element_selector_by_role (\"aux_svg_holder\", true),\n        {\n          x: \"Source\",\n          y: \"Target\"\n        },\n        graph_data[_networkGraphAttrbuteID][cat_id][\"type\"] == \"Date\"\n      );\n    } else {\n      self.colorizer[\"category\"] = null;\n      self.colorizer[\"category_id\"] = null;\n      self.colorizer[\"continuous\"] = false;\n      self.colorizer[\"category_pairwise\"] = null;\n      self.colorizer[\"category_map\"] = null;\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n\n  self.handle_attribute_categorical = function (cat_id) {\n                \n    var set_attr = \"None\";\n    d3\n      .select(self.get_ui_element_selector_by_role (\"attributes_invert\"))\n      .style(\"display\", \"none\");\n\n    self.network_svg.selectAll(\"radialGradient\").remove();\n\n    [\n      [\"attributes\",false],\n      [\"attributes_cat\",true]\n    ].forEach(function(lbl) {\n      \n      d3.select(self.get_ui_element_selector_by_role (lbl[0], lbl[1])).selectAll(\"li\").selectAll(\"a\").attr(\"style\", function(d, i) {\n        if (d[1] == cat_id) {\n          set_attr = d[0];\n          return \" font-weight: bold;\";\n        }\n        return null;\n      });\n      d3\n        .select(self.get_ui_element_selector_by_role (lbl[0] + \"_label\", lbl[1]))\n        .html(\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    self.clusters.forEach(function(the_cluster) {\n      delete the_cluster[\"gradient\"];\n      the_cluster[\"binned_attributes\"] = stratify(\n        attribute_cluster_distribution(the_cluster, cat_id)\n      );\n    });\n    \n    self.colorizer[\"continuous\"] = false;\n\n    if (cat_id) {\n    \n      if (cat_id in _networkPresetColorSchemes) {\n        var domain = [],\n          range = [];\n        _.each(_networkPresetColorSchemes[cat_id], function(value, key) {\n          domain.push(key);\n          range.push(value);\n        });\n        self.colorizer[\"category\"] = d3.scale\n          .ordinal()\n          .domain(domain)\n          .range(range);\n      } else {\n        if (graph_data[_networkGraphAttrbuteID][cat_id][\"color_scale\"]) {\n          self.colorizer[\"category\"] = graph_data[_networkGraphAttrbuteID][\n            cat_id\n          ][\"color_scale\"](graph_data[_networkGraphAttrbuteID][cat_id], self);\n        } else {\n          self.colorizer[\"category\"] = d3.scale\n            .ordinal()\n            .range(_networkCategorical);\n          var extended_range = _.clone(self.colorizer[\"category\"].range());\n          extended_range.push(_networkMissingColor);\n\n          self.colorizer[\"category\"].domain(\n            _.range(_maximumValuesInCategories + 1)\n          );\n          self.colorizer[\"category\"].range(extended_range);\n\n          if (graph_data[_networkGraphAttrbuteID][cat_id][\"stable-ish order\"]) {\n            self.colorizer[\"category\"] = _.wrap(\n              self.colorizer[\"category\"],\n              function(func, arg) {\n                if (arg == _networkMissing) {\n                  return func(_maximumValuesInCategories);\n                }\n                return func(\n                  graph_data[_networkGraphAttrbuteID][cat_id][\n                    \"stable-ish order\"\n                  ][arg]\n                );\n              }\n            );\n            //console.log (graph_data[_networkGraphAttrbuteID][cat_id]['stable-ish order']);\n          }\n        }\n      }\n      self.colorizer[\"category_id\"] = cat_id;\n      self.colorizer[\"category_map\"] =\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"];\n        \n      //console.log (cat_id, self.json[_networkGraphAttrbuteID][cat_id], graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"] (null, \"lookup\"));\n      //self.colorizer['category_map'][null] =  graph_data [_networkGraphAttrbuteID][cat_id]['range'];\n      \n      //try {\n          self.colorizer[\"category_pairwise\"] = attribute_pairwise_distribution(\n            cat_id,\n            graph_data[_networkGraphAttrbuteID][cat_id].dimension,\n            self.colorizer[\"category_map\"]\n          );\n      //} catch (err) {\n        // TODO: there are still lingering issues with this \"category_map\"\n      //}\n\n      render_chord_diagram(\n        \"aux_svg_holder\",\n        self.colorizer[\"category_map\"],\n        self.colorizer[\"category_pairwise\"]\n      );\n      render_binned_table(\n        \"attribute_table\",\n        self.colorizer[\"category_map\"],\n        self.colorizer[\"category_pairwise\"]\n      );\n    } else {\n      self.colorizer[\"category\"] = null;\n      self.colorizer[\"category_id\"] = null;\n      self.colorizer[\"category_pairwise\"] = null;\n      self.colorizer[\"category_map\"] = null;\n      render_chord_diagram(\"aux_svg_holder\", null, null);\n      render_binned_table(\"attribute_table\", null, null);\n    }\n    if (self.handle_inline_charts) {\n        self.handle_inline_charts();\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  }\n\n  self.filter_visibility = function() {\n    self.clusters.forEach(function(c) {\n      c.is_hidden = self.hide_unselected && !c.match_filter;\n    });\n    self.nodes.forEach(function(n) {\n      n.is_hidden = self.hide_unselected && !n.match_filter;\n    });\n  };\n\n  self.filter = function(conditions, skip_update) {\n    var anything_changed = false;\n\n    conditions = _.map([\"re\", \"distance\"], function(cnd) {\n      return _.map(\n        _.filter(conditions, function(v) {\n          return v.type == cnd;\n        }),\n        function(v) {\n          return v.value;\n        }\n      );\n    });\n\n    if (conditions[1].length) {\n      self.nodes.forEach(function(n) {\n        n.length_filter = false;\n      });\n\n      _.each(self.edges, function(e) {\n        var did_match = _.some(conditions[1], function(d) {\n          return e.length <= d;\n        });\n\n        if (did_match) {\n          self.nodes[e.source].length_filter = true;\n          self.nodes[e.target].length_filter = true;\n        }\n      });\n    } else {\n      self.nodes.forEach(function(n) {\n        n.length_filter = false;\n      });\n    }\n\n    self.clusters.forEach(function(c) {\n       c.match_filter = 0;\n    });\n\n    self.nodes.forEach(function(n) {\n      var did_match = _.some(conditions[0], function(regexp) {\n        return (\n          regexp.test(n.id) ||\n          _.some(n[_networkNodeAttributeID], function(attr) {\n            return regexp.test(attr);\n          })\n        );\n      });\n\n      did_match = did_match || n.length_filter;\n      \n      if (did_match != n.match_filter) {\n        n.match_filter = did_match;\n        anything_changed = true;\n      }\n\n      if (n.match_filter) {\n        n.parent.match_filter += 1;\n      }\n    });\n\n    if (anything_changed && !skip_update) {\n      if (self.hide_unselected) {\n        self.filter_visibility();\n      }\n\n      self.update(true);\n    }\n  };\n\n  self.is_empty = function() {\n    return self.cluster_sizes.length == 0;\n  };\n  \n  self.display_warning = function (warning_string, is_html) {\n    if (network_warning_tag) {\n      if (warning_string.length) {\n        var warning_box = d3.select(network_warning_tag);\n          warning_box.selectAll (\"div\").remove();\n          if (is_html) {\n            warning_box.append (\"div\").html(warning_string);\n          } else {          \n            warning_box.append (\"div\").text(warning_string);\n          }\n          warning_box.style(\"display\", \"block\");\n        warning_string = \"\";\n      } else {\n        d3.select(network_warning_tag).style(\"display\", \"none\");\n      }\n    }\n  };\n  \n  self.link_generator_function = function (d) {\n    \n        var pull      = d.pull || 0.0;\n        var path;\n        \n        if (pull != 0.0) {\n            var dist_x = d.target.x - d.source.x;\n            var dist_y = d.target.y - d.source.y;\n            var pull   = pull * (Math.sqrt (dist_x * dist_x + dist_y * dist_y));\n        \n        \n            var theta = Math.PI / 6; // 18deg additive angle\n        \n            var alpha = dist_x ? Math.atan (-dist_y / dist_x) : Math.PI/2; // angle with the X axis\n        \n            if (pull < 0) {\n                theta = -theta;\n                pull = -pull;\n            }\n\n      \n            var dx  = Math.cos (theta+alpha) * pull,\n                dx2 = Math.cos (theta-alpha) * pull;\n            \n            var dy  = Math.sin (theta+alpha) * pull,\n                dy2 = Math.sin (theta-alpha) * pull;\n                \n            var s1, s2;\n            if (d.target.x >= d.source.x) {\n                s1 = [dx, -dy];\n                s2 = [-dx2, -dy2];        \n            } else {\n                s1 = [-dx2, -dy2];\n                s2 = [dx, -dy];        \n            }\n\n       \n            path =  \"M\" + d.source.x + \" \" + d.source.y +\n                \" C \" + (d.source.x+s1[0]) + \" \" + (d.source.y+s1[1]) + \n                \", \"  + (d.target.x+s2[0]) + \" \" + (d.target.y+s2[1]) +\n                \", \" + d.target.x + \" \" + d.target.y;\n              \n        } else {\n            path  = \"M\" + d.source.x + \" \" + d.source.y +\n                \" L \" + d.target.x + \" \" + d.target.y;\n        }\n        \n         d3.select (this).attr (\"d\",     \n            path\n         );\n   }\n\n  self.update = function(soft, friction) {\n    self.needs_an_update = false;\n\n    if (friction) {\n      network_layout.friction(friction);\n    }\n    self.display_warning (warning_string);\n    \n\n    var rendered_nodes, rendered_clusters, link;\n\n    if (!soft) {\n      var draw_me = prepare_data_to_graph();\n\n      network_layout.nodes(draw_me.all).links(draw_me.edges);\n      update_network_string(draw_me.nodes.length, draw_me.edges.length);\n      \n      var edge_set = {\n      \n      };\n      \n      _.each (draw_me.edges, function (d) {\n        d.pull = 0.0;\n        var tag = \"\";\n        \n        if (d.source < d.target) {\n            tag =    \"\"+d.source + \"|\" + d.target;\n        } else {\n            tag =    \"\"+d.target + \"|\" + d.source;\n        }\n        if (tag in edge_set) {\n            edge_set[tag].push (d);\n        } else {\n            edge_set[tag] = [d];\n        }\n      });\n      \n      _.each (edge_set, function (v) {\n        if (v.length > 1) {\n            var step = 1/(v.length - 1);\n            _.each (v, function (edge, index) {\n                edge.pull = -0.5 + index * step;\n            });\n        }\n      });\n\n      link = self.network_svg.selectAll(\".link\").data(draw_me.edges, function(d) {\n        return d.id;\n      });\n      \n\n      //link.enter().append(\"line\").classed(\"link\", true);\n      link.enter().append(\"path\").classed(\"link\", true);\n      link.exit().remove();\n\n\n      link\n        .classed(\"removed\", function(d) {\n          return d.removed;\n        })\n        .classed(\"unsupported\", function(d) {\n          return \"support\" in d && d[\"support\"] > 0.05;\n        })\n        .classed(\"core-link\", function(d) {\n          //console.log (d[\"length\"] <= self.core_link_length);\n          return d[\"length\"] <= self.core_link_length ;\n          //return false;\n        });\n        \n        \n      link.on(\"mouseover\", edge_pop_on)\n        .on(\"mouseout\", edge_pop_off)\n        .filter(function(d) {\n          return d.directed;\n        })\n        .attr(\"marker-end\", \"url(#\" + self.dom_prefix + \"_arrowhead)\");\n\n      rendered_nodes = self.network_svg\n        .selectAll(\".node\")\n        .data(draw_me.nodes, function(d) {\n          return d.id;\n        });\n        \n      rendered_nodes.exit().remove();\n      rendered_nodes.enter().append(\"path\");\n\n      rendered_clusters = self.network_svg\n        .selectAll(\".cluster-group\")\n        .data(\n          draw_me.clusters.map(function(d) {\n            return d;\n          }),\n          function(d) {\n            return d.cluster_id;\n          }\n        );\n\n      rendered_clusters.exit().remove();\n      rendered_clusters\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"cluster-group\")\n        .attr(\"transform\", function(d) {\n          return \"translate(\" + d.x + \",\" + d.y + \")\";\n        })\n        .on(\"click\", handle_cluster_click)\n        .on(\"mouseover\", cluster_pop_on)\n        .on(\"mouseout\", cluster_pop_off)\n        .call(network_layout.drag().on(\"dragstart\", cluster_pop_off));\n\n      self.draw_cluster_table(self.extra_cluster_table_columns, self.cluster_table, false, self.subcluster_table);\n      \n      if (self._is_CDC_ && ! (options && options[\"no-subclusters\"])) {\n        self.annotate_priority_clusters (_networkCDCDateField, 36, 12);\n      }\n    \n      if (self.subcluster_table) {\n          self.draw_cluster_table(self.extra_subcluster_table_columns, self.subcluster_table, true, false);  \n      }\n      self.draw_node_table(self.extra_node_table_columns);\n    } else {\n      rendered_nodes = self.network_svg.selectAll(\".node\");\n      rendered_clusters = self.network_svg.selectAll(\".cluster-group\");\n      link = self.network_svg.selectAll(\".link\");\n      update_network_string(rendered_nodes.size(), link.size());\n\n    }\n\n    rendered_nodes.each(function(d) {\n      draw_a_node(this, d);\n    });\n    \n    rendered_clusters.each(function(d) {\n      draw_a_cluster(this, d);\n    });\n\n    link.style(\"opacity\", function(d) {\n      return Math.max(node_opacity(d.target), node_opacity(d.source));\n    });\n    \n      if (self.additional_edge_styler) {\n        link.each (function (d) {\n            self.additional_edge_styler (this, d, self);\n        });\n      }  \n\n    link.style(\"display\", function(d) {\n     \n      if (d.target.is_hidden || d.source.is_hidden || d.is_hidden) {   \n        return \"none\";\n      }\n      return null;\n    });\n\n\n\n    if (!soft) {\n      currently_displayed_objects =\n        rendered_clusters[0].length + rendered_nodes[0].length;\n\n      network_layout.on(\"tick\", function() {\n        var sizes = network_layout.size();\n\n        rendered_nodes.attr(\"transform\", function(d) {\n        \n          return (\n            \"translate(\" +\n            (d.x = Math.max(\n              d.rendered_size,\n              Math.min(sizes[0] - d.rendered_size, d.x)\n            )) +\n            \",\" +\n            (d.y = Math.max(\n              d.rendered_size,\n              Math.min(sizes[1] - d.rendered_size, d.y)\n            )) +\n            \")\"\n          );\n        });\n        rendered_clusters.attr(\"transform\", function(d) {\n          return (\n            \"translate(\" +\n            (d.x = Math.max(\n              d.rendered_size,\n              Math.min(sizes[0] - d.rendered_size, d.x)\n            )) +\n            \",\" +\n            (d.y = Math.max(\n              d.rendered_size,\n              Math.min(sizes[1] - d.rendered_size, d.y)\n            )) +\n            \")\"\n          );\n        });\n\n        link.each (self.link_generator_function);\n      });\n      \n                \n      network_layout.start();\n\n    } else {\n        link.each (self.link_generator_function);\n    }\n  };\n\n  function tick() {\n    var sizes = network_layout.size();\n\n    node\n      .attr(\"cx\", function(d) {\n        return (d.x = Math.max(10, Math.min(sizes[0] - 10, d.x)));\n      })\n      .attr(\"cy\", function(d) {\n        return (d.y = Math.max(10, Math.min(sizes[1] - 10, d.y)));\n      });\n\n    link\n      .attr(\"x1\", function(d) {\n        return d.source.x;\n      })\n      .attr(\"y1\", function(d) {\n        return d.source.y;\n      })\n      .attr(\"x2\", function(d) {\n        return d.target.x;\n      })\n      .attr(\"y2\", function(d) {\n        return d.target.y;\n      });\n  }\n\n  /*------------ Node Methods ---------------*/\n  function compute_node_degrees(nodes, edges) {\n    for (var n in nodes) {\n      nodes[n].degree = 0;\n    }\n\n    for (var e in edges) {\n      nodes[edges[e].source].degree++;\n      nodes[edges[e].target].degree++;\n    }\n  }\n\n  self.attribute_node_value_by_id = function (d, id, number) {\n    try {\n        if (_networkNodeAttributeID in d && id) {\n    \n          if (id in d[_networkNodeAttributeID]) {\n      \n            var v; \n        \n            if (self.json[_networkGraphAttrbuteID][id].volatile) {\n                v = self.json[_networkGraphAttrbuteID][id].map (d, self);\n            } else {\n                v = d[_networkNodeAttributeID][id];\n            }\n        \n            if (_.isString(v) ) {\n              if (v.length == 0) {\n                return _networkMissing;\n              } else {\n                if (number) {\n                    v = +v;\n                    return _.isNaN (v) ? _networkMissing : v;\n                }\n              }\n            }\n            return v;\n          }\n        }\n    }\n    catch (e) {\n        console.log (\"self.attribute_node_value_by_id\", e, d, id, number);\n    }\n    return _networkMissing;\n  }\n\n  function inject_attribute_node_value_by_id(d, id, value) {\n    //console.log (\"Injecting \" + id + \" with value \" + value);\n    if (_networkNodeAttributeID in d && id) {\n      d[_networkNodeAttributeID][id] = value;\n    }\n  }\n\n\n  self.inject_attribute_description = function (key,d) {\n    if (_networkGraphAttrbuteID in self.json) {\n        var new_attr = {};\n        new_attr[key] = d;    \n        _.extend (self.json[_networkGraphAttrbuteID], new_attr);\n        //self.json[_networkGraphAttrbuteID][key] = _.clone (d);\n    }\n  }\n    function node_size(d) {\n        var r = 5 + Math.sqrt(d.degree); //return (d.match_filter ? 10 : 4)*r*r;\n        return 4 * r * r;\n  }\n\n  function node_color(d) {\n    /*if (d.match_filter) {\n        return \"white\";\n    }*/\n\n    if (self.colorizer[\"category_id\"]) {\n      var v = self.attribute_node_value_by_id(d, self.colorizer[\"category_id\"]);\n      if (self.colorizer[\"continuous\"]) {\n        if (v == _networkMissing) {\n          return _networkMissingColor;\n        }\n        //console.log (v, self.colorizer['category'](v));\n      }\n      return self.colorizer[\"category\"](v);\n    }\n    return d.hxb2_linked ? \"black\" : d.is_lanl ? \"red\" : \"gray\";\n  }\n\n  function node_opacity(d) {\n    if (self.colorizer[\"opacity\"]) {\n      return self.colorizer[\"opacity\"](\n        self.attribute_node_value_by_id(d, self.colorizer[\"opacity_id\"], true)\n      );\n    }\n    return 1;\n  }\n\n  function cluster_color(d, type) {\n    if (d[\"binned_attributes\"]) {\n      return self.colorizer[\"category\"](type);\n    }\n    return \"#bdbdbd\";\n  }\n\n  function hxb2_node_color(d) {\n    return \"black\";\n  }\n\n  function node_info_string(n) {\n    var str;\n\n    if (!self._is_CDC_) {\n      str =\n        \"Degree <em>\" +\n        n.degree +\n        \"</em><br>Clustering coefficient <em> \" +\n        misc.format_value(n.lcc, _defaultFloatFormat) +\n        \"</em>\";\n    } else {\n      str = \"# links <em>\" + n.degree + \"</em>\";\n    }\n\n    _.each(\n      _.union(self._additional_node_pop_fields, [\n        self.colorizer[\"category_id\"],\n        self.node_shaper[\"id\"],\n        self.colorizer[\"opacity_id\"]\n      ]),\n      function(key) {\n        if (key) {\n          if (key in graph_data[_networkGraphAttrbuteID]) {\n            var attribute = self.attribute_node_value_by_id(n, key);\n\n            if (graph_data[_networkGraphAttrbuteID][key][\"type\"] == \"Date\") {\n              try {\n                attribute = _defaultDateViewFormat(attribute);\n              } catch (err) {}\n            }\n            if (attribute) {\n              str += \"<br>\" + key + \" <em>\" + attribute + \"</em>\";\n            }\n          }\n        }\n      }\n    );\n\n    return str;\n  }\n\n  function edge_info_string(n) {\n    var str = \"Length <em>\" + _defaultFloatFormat(n.length) + \"</em>\";\n    if (\"support\" in n) {\n      str +=\n        \"<br>Worst triangle-based support (p): <em>\" +\n        _defaultFloatFormat(n.support) +\n        \"</em>\";\n    }\n\n    var attribute = self.attribute_node_value_by_id(\n      n,\n      self.colorizer[\"category_id\"]\n    );\n\n    return str;\n  }\n\n  function node_pop_on(d) {\n    toggle_tooltip(\n      this,\n      true,\n      (self._is_CDC_ ? \"Individual \" : \"Node \") + d.id,\n      node_info_string(d),\n      self.container\n    );\n  }\n\n  function node_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  function edge_pop_on(e) {\n    toggle_tooltip(\n      this,\n      true,\n      e.source.id + \" - \" + e.target.id,\n      edge_info_string(e),\n      self.container\n    );\n  }\n\n  function edge_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  /*------------ Cluster Methods ---------------*/\n\n  /* Creates a new object that groups nodes by cluster\n   * @param nodes\n   * @returns clusters\n   */\n  function get_all_clusters(nodes) {\n    var by_cluster = _.groupBy(nodes, \"cluster\");\n    return by_cluster;\n  }\n\n  function compute_cluster_centroids(clusters) {\n    for (var c in clusters) {\n      var cls = clusters[c];\n      cls.x = 0;\n      cls.y = 0;\n      if (_.has(cls, \"children\")) {\n        cls.children.forEach(function(x) {\n          cls.x += x.x;\n          cls.y += x.y;\n        });\n        cls.x /= cls.children.length;\n        cls.y /= cls.children.length;\n      }\n    }\n  }\n\n  function collapse_cluster(x, keep_in_q) {\n    self.needs_an_update = true;\n    x.collapsed = true;\n    currently_displayed_objects -= self.cluster_sizes[x.cluster_id - 1] - 1;\n    if (!keep_in_q) {\n      var idx = open_cluster_queue.indexOf(x.cluster_id);\n      if (idx >= 0) {\n        open_cluster_queue.splice(idx, 1);\n      }\n    }\n    compute_cluster_centroids([x]);\n    return x.children.length;\n  }\n\n  function expand_cluster(x, copy_coord) {\n  \n    self.needs_an_update = true;\n    x.collapsed = false;\n    currently_displayed_objects += self.cluster_sizes[x.cluster_id - 1] - 1;\n    open_cluster_queue.push(x.cluster_id);\n        \n    if (copy_coord) {\n      x.children.forEach(function(n) {\n        n.x = x.x + (Math.random() - 0.5) * x.children.length;\n        n.y = x.y + (Math.random() - 0.5) * x.children.length;\n      });\n    } else {\n      x.children.forEach(function(n) {\n        n.x = self.width * 0.25 + (Math.random() - 0.5) * x.children.length;\n        n.y = 0.25 * self.height + (Math.random() - 0.5) * x.children.length;\n      });\n    }\n  }\n\n  function render_binned_table(id, the_map, matrix) {\n    var the_table = d3.select(self.get_ui_element_selector_by_role(id, true));\n    if (the_table.empty()) {\n        return;\n    }\n\n    the_table.selectAll(\"thead\").remove();\n    the_table.selectAll(\"tbody\").remove();\n\n    d3.select(self.get_ui_element_selector_by_role  (id + \"_enclosed\", true)).style(\"display\", matrix ? null : \"none\");\n\n    if (matrix) {\n      var fill = self.colorizer[\"category\"];\n      var lookup = the_map(null, \"lookup\");\n\n      var headers = the_table.append(\"thead\").append(\"tr\").selectAll(\"th\").data(\n        [\"\"].concat(\n          matrix[0].map(function(d, i) {\n            return lookup[i];\n          })\n        )\n      );\n\n      headers.enter().append(\"th\");\n      headers\n        .html(function(d) {\n          return \"<span>&nbsp;\" + d + \"</span>\";\n        })\n        .each(function(d, i) {\n          if (i) {\n            d3\n              .select(this)\n              .insert(\"i\", \":first-child\")\n              .classed(\"fa fa-circle\", true)\n              .style(\"color\", function() {\n                return fill(d);\n              });\n          }\n        });\n\n      if (self.show_percent_in_pairwise_table) {\n        var sum = _.map(matrix, function(row) {\n          return _.reduce(\n            row,\n            function(p, c) {\n              return p + c;\n            },\n            0\n          );\n        });\n\n        matrix = _.map(matrix, function(row, row_index) {\n          return _.map(row, function(c) {\n            return c / sum[row_index];\n          });\n        });\n      }\n\n      var rows = the_table.append(\"tbody\").selectAll(\"tr\").data(\n        matrix.map(function(d, i) {\n          return [lookup[i]].concat(d);\n        })\n      );\n\n      rows.enter().append(\"tr\");\n      rows\n        .selectAll(\"td\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"td\")\n        .html(function(d, i) {\n          return i == 0\n            ? \"<span>&nbsp;\" + d + \"</span>\"\n            : self.show_percent_in_pairwise_table\n              ? _defaultPercentFormat(d)\n              : d;\n        })\n        .each(function(d, i) {\n          if (i == 0) {\n            d3\n              .select(this)\n              .insert(\"i\", \":first-child\")\n              .classed(\"fa fa-circle\", true)\n              .style(\"color\", function() {\n                return fill(d);\n              });\n          }\n        });\n    }\n  }\n\n  function render_chord_diagram(id, the_map, matrix) {\n  \n    var container = d3.select(self.get_ui_element_selector_by_role (id, true));\n        \n    if (container.empty()) {\n        return;\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    d3.select(self.get_ui_element_selector_by_role  (id + \"_enclosed\", true)).style(\"display\", matrix ? null : \"none\");\n\n    if (matrix) {\n      var lookup = the_map(null, \"lookup\");\n\n      var svg = container.append(\"svg\");\n\n      var chord = d3.layout\n        .chord()\n        .padding(0.05)\n        .sortSubgroups(d3.descending)\n        .matrix(matrix);\n\n      var text_offset = 20,\n        width = 450,\n        height = 450,\n        innerRadius = Math.min(width, height - text_offset) * 0.41,\n        outerRadius = innerRadius * 1.1;\n\n      var fill = self.colorizer[\"category\"],\n        font_size = 12;\n\n      var text_label = svg\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + width / 2 + \",\" + (height - text_offset) + \")\"\n        )\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", font_size)\n        .text(\"\");\n\n      svg = svg\n        .attr(\"width\", width)\n        .attr(\"height\", height - text_offset)\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + width / 2 + \",\" + (height - text_offset) / 2 + \")\"\n        );\n\n      svg\n        .append(\"g\")\n        .selectAll(\"path\")\n        .data(chord.groups)\n        .enter()\n        .append(\"path\")\n        .style(\"fill\", function(d) {\n          return fill(lookup[d.index]);\n        })\n        .style(\"stroke\", function(d) {\n          return fill(lookup[d.index]);\n        })\n        .attr(\n          \"d\",\n          d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius)\n        )\n        .on(\"mouseover\", fade(0.1, true))\n        .on(\"mouseout\", fade(1, false));\n\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"chord\")\n        .selectAll(\"path\")\n        .data(chord.chords)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", d3.svg.chord().radius(innerRadius))\n        .style(\"fill\", function(d) {\n          return fill(d.target.index);\n        })\n        .style(\"opacity\", 1);\n\n      // Returns an event handler for fading a given chord group.\n      function fade(opacity, t) {\n        return function(g, i) {\n          text_label.text(t ? lookup[i] : \"\");\n          svg\n            .selectAll(\".chord path\")\n            .filter(function(d) {\n              return d.source.index != i && d.target.index != i;\n            })\n            .transition()\n            .style(\"opacity\", opacity);\n        };\n      }\n    }\n  }\n\n  function attribute_pairwise_distribution(id, dim, the_map, only_expanded) {\n  \n    var scan_from = only_expanded ? draw_me.edges : self.edges;\n    var the_matrix = [];\n    for (var i = 0; i < dim; i += 1) {\n      the_matrix.push([]);\n      for (var j = 0; j < dim; j += 1) {\n        the_matrix[i].push(0);\n      }\n    }\n\n\n    _.each(scan_from, function(edge) {\n      //console.log (self.attribute_node_value_by_id(self.nodes[edge.source], id), self.attribute_node_value_by_id(self.nodes[edge.target], id));\n      the_matrix[\n        the_map(self.attribute_node_value_by_id(self.nodes[edge.source], id))\n      ][the_map(self.attribute_node_value_by_id(self.nodes[edge.target], id))] += 1;\n    });\n    // check if there are null values\n\n\n    var haz_null = the_matrix.some(function(d, i) {\n      if (i == dim - 1) {\n        return d.some(function(d2) {\n          return d2 > 0;\n        });\n      }\n      return d[dim - 1] > 0;\n    });\n    if (!haz_null) {\n      the_matrix.pop();\n      for (i = 0; i < dim - 1; i += 1) {\n        the_matrix[i].pop();\n      }\n    }\n\n    // symmetrize the matrix\n\n    dim = the_matrix.length;\n\n    for (i = 0; i < dim; i += 1) {\n      for (j = i; j < dim; j += 1) {\n        the_matrix[i][j] += the_matrix[j][i];\n        the_matrix[j][i] = the_matrix[i][j];\n      }\n    }\n\n    return the_matrix;\n  }\n  \n  self._aux_populate_category_fields = function (d, k) {\n        d[\"raw_attribute_key\"] = k;\n        d.discrete = false;\n        if (d[\"type\"] == \"String\") {\n          d.discrete = true;\n          d[\"value_range\"] = _.keys(\n            _.countBy(graph_data.Nodes, function(nd) {\n              return self.attribute_node_value_by_id(nd, k);\n            })\n          );\n          d[\"dimension\"] = d[\"value_range\"].length;\n        } else {\n          if (\"enum\" in d) {\n            d.discrete = true;\n            d[\"value_range\"] = _.clone(d[\"enum\"]);\n            if (!(_networkMissing in d[\"value_range\"])) {\n                d[\"value_range\"].push(_networkMissing);\n            }\n            d[\"dimension\"] = d[\"value_range\"].length;\n            d[\"no-sort\"] = true;\n          }\n        }\n        return d;\n    }\n    \n    self._aux_process_category_values = function (d) {\n        var values;\n        if (d[\"no-sort\"]) {\n          values = d[\"value_range\"];\n        } else {\n          if (d[\"type\"] == \"String\") {\n            values = d[\"value_range\"].sort();\n\n            if (d.dimension <= _maximumValuesInCategories) {\n              var string_hash = function(str) {\n                var hash = 5801;\n                for (var ci = 0; ci < str.length; ci++) {\n                  var charCode = str.charCodeAt(ci);\n                  hash = (hash << (5 + hash)) + charCode;\n                }\n                return hash;\n              };\n\n              var hashed = _.map(values, string_hash);\n              var available_keys = {};\n              var reindexed = {};\n\n              for (var i = 0; i < _maximumValuesInCategories; i++) {\n                available_keys[i] = true;\n              }\n\n              _.each(hashed, function(value, index) {\n                if (value < 0) {\n                  value = -value;\n                }\n\n                var first_try = value % _maximumValuesInCategories;\n                if (first_try in available_keys) {\n                  reindexed[values[index]] = first_try;\n                  delete available_keys[first_try];\n                  return;\n                }\n\n                var second_try =\n                  Math.floor(value / _maximumValuesInCategories) %\n                  _maximumValuesInCategories;\n                if (second_try in available_keys) {\n                  reindexed[values[index]] = second_try;\n                  delete available_keys[second_try];\n                  return;\n                }\n\n                var last_resort = parseInt(\n                  _.keys(available_keys).sort()[0]\n                );\n                reindexed[values[index]] = last_resort;\n                delete available_keys[last_resort];\n              });\n\n              d[\"stable-ish order\"] = reindexed;\n            }\n            //values = _.unzip(_.zip (d['value_range'], ordering_map).sort (function (a,b) { if (a[1] < b[1]) return -1; if (a[1] > b[1]) return 1; return 0}))[0]; //d['value_range'].sort ();\n          } else {\n            values = d[\"value_range\"].sort();\n          }\n        }\n\n        var map = new Object();\n\n        _.each(values, function(d2, i) {\n          map[d2] = i;\n        });\n        \n        d[\"value_map\"] = function(v, key) {\n          return key ? (key == \"lookup\" ? _.invert(map) : map) : map[v];\n        };\n        return d;\n      }\n   \n\n  function attribute_cluster_distribution(the_cluster, attribute_id) {\n    if (attribute_id && the_cluster) {\n      return the_cluster.children.map(function(d) {\n        return self.attribute_node_value_by_id(d, attribute_id);\n      });\n    }\n    return null;\n  }\n\n  function cluster_info_string(id) {\n    var the_cluster = self.clusters[self.cluster_mapping[id]],\n      attr_info = the_cluster[\"binned_attributes\"];\n\n    var str;\n\n    if (self._is_CDC_) {\n      str =\n        \"<strong>\" +\n        self.cluster_sizes[id - 1] +\n        \"</strong> individuals.\" +\n        \"<br>Mean links/individual <em> = \" +\n        _defaultFloatFormat(the_cluster.degrees[\"mean\"]) +\n        \"</em>\" +\n        \"<br>Max links/individual <em> = \" +\n        the_cluster.degrees[\"max\"] +\n        \"</em>\";\n    } else {\n      str =\n        \"<strong>\" +\n        self.cluster_sizes[id - 1] +\n        \"</strong> nodes.\" +\n        \"<br>Mean degree <em>\" +\n        _defaultFloatFormat(the_cluster.degrees[\"mean\"]) +\n        \"</em>\" +\n        \"<br>Max degree <em>\" +\n        the_cluster.degrees[\"max\"] +\n        \"</em>\" +\n        \"<br>Clustering coefficient <em> \" +\n        misc.format_value(the_cluster.cc, _defaultFloatFormat) +\n        \"</em>\";\n    }\n\n    if (attr_info) {\n      attr_info.forEach(function(d) {\n        str += \"<br>\" + d[0] + \" <em>\" + d[1] + \"</em>\";\n      });\n    }\n\n    return str;\n  }\n\n  function cluster_pop_on(d) {\n    toggle_tooltip(\n      this,\n      true,\n      \"Cluster \" + d.cluster_id,\n      cluster_info_string(d.cluster_id),\n      self.container\n    );\n  }\n\n  function cluster_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  self.expand_cluster_handler = function (d, do_update, move_out) {\n    if (d.collapsed) {\n      var new_nodes = self.cluster_sizes[d.cluster_id - 1] - 1;\n\n      if (new_nodes > max_points_to_render) {\n        warning_string = \"This cluster is too large to be displayed\";\n      } else {\n        var leftover =\n          new_nodes + currently_displayed_objects - max_points_to_render;\n        if (leftover > 0) {\n          var k = 0;\n          for (; k < open_cluster_queue.length && leftover > 0; k++) {\n            var cluster =\n              self.clusters[self.cluster_mapping[open_cluster_queue[k]]];\n            leftover -= cluster.children.length - 1;\n            collapse_cluster(cluster, true);\n          }\n          if (k || open_cluster_queue.length) {\n            open_cluster_queue.splice(0, k);\n          }\n        }\n\n        if (leftover <= 0) {\n          expand_cluster(d, !move_out);\n        }\n      }\n\n      if (do_update) {\n        self.update(false, 0.6);\n      }\n    }\n    return \"\";\n  }\n\n  function show_sequences_in_cluster(d) {\n    var sequences = new Object();\n    _.each (_extract_single_cluster(self.clusters[self.cluster_mapping[d.cluster]].children, null, true).Edges, function (e) {\n        _.each (e.sequences, function (s) {\n            if (!(s in sequences)){\n                sequences[s] = 1;\n            }\n        });\n    });\n    //console.log (_.keys(sequences));\n    \n  }\n\n\n  function _compute_cluster_degrees (d) {\n       var degrees = d.children.map(function(c) {\n        return c.degree;\n      });\n      degrees.sort(d3.ascending);\n      d.degrees = helpers.describe_vector(degrees);\n\n  }\n  \n  function collapse_cluster_handler(d, do_update) {\n    collapse_cluster(self.clusters[self.cluster_mapping[d.cluster]]);\n    if (do_update) {\n      self.update(false, 0.4);\n    }\n  }\n\n  function center_cluster_handler(d) {\n    d.x = self.width / 2;\n    d.y = self.height / 2;\n    self.update(false, 0.4);\n  }\n\n  function cluster_box_size(c) {\n    return 8 * Math.sqrt(c.children.length);\n  }\n  \n  self.extract_network_time_series = function (time_attr, other_attributes, node_filter) {\n    var use_these_nodes = node_filter ? _.filter (self.nodes, node_filter) : self.nodes;\n\n    var result = _.map (use_these_nodes, function (node) {\n        var series = {\n            \"time\" : self.attribute_node_value_by_id (node, time_attr),\n        };\n        if (other_attributes) {\n            _.each (other_attributes, function (attr, key) {\n                series[attr] = self.attribute_node_value_by_id (node, key);\n            });\n        }\n        return series;\n    });\n    \n    result.sort (function (a,b) {\n        if (a.time < b.time) return -1;\n        if (a.time == b.time) return 0;\n        return 1;\n    });\n        \n        \n    return result;\n    \n  };\n\n  self.expand_some_clusters = function(subset) {\n    subset = subset || self.clusters;\n    subset.forEach(function(x) {\n      if (!x.is_hidden) {\n        self.expand_cluster_handler(x, false);\n      }\n    });\n    self.update();\n  };\n\n  self.select_some_clusters = function(condition) {\n    return self.clusters.filter(function(c, i) {\n      return _.some(c.children, function(n) {\n        return condition(n);\n      });\n    });\n  };\n\n  self.collapse_some_clusters = function(subset) {\n    subset = subset || self.clusters;\n    subset.forEach(function(x) {\n      if (!x.collapsed) collapse_cluster(x);\n    });\n    self.update();\n  };\n\n  self.toggle_hxb2 = function() {\n    self.hide_hxb2 = !self.hide_hxb2;\n    self.update();\n  };\n\n  function stratify(array) {\n    if (array) {\n      var dict = {},\n        stratified = [];\n\n      array.forEach(function(d) {\n        if (d in dict) {\n          dict[d] += 1;\n        } else {\n          dict[d] = 1;\n        }\n      });\n      for (var uv in dict) {\n        stratified.push([uv, dict[uv]]);\n      }\n      return stratified.sort(function(a, b) {\n        return a[0] - b[0];\n      });\n    }\n    return array;\n  }\n  \n  /*------------ Node injection (social network) ---------------*/\n  \n  self.load_nodes_edges = function (nodes_and_attributes, index_id, edges_and_attributes, annotation ) {\n     annotation = annotation || \"Social\";\n     /** \n        1. Scan the list of nodes for \n            a. Nodes not present in the existing network\n            b. Attribute names\n            c. Attribute values\n        \n        2. Scan the list of edges for \n            a. Edges not present in the existing network \n            b. Attribute names\n            c. Attribute values\n     */\n     \n     var new_nodes = [];\n     var edge_types_dict = {};\n     var existing_nodes = 0;\n     try {\n         if (nodes_and_attributes && nodes_and_attributes.length) {\n     \n             var injected_nodes  = {};\n             var node_attributes = {};\n             \n         \n             if (!(index_id in nodes_and_attributes[0])) {\n                throw (index_id + \" is not one of the attributes in the imported node records\");\n             } \n     \n             _.each (nodes_and_attributes[0], function (r, i) {\n                if (i != index_id) {\n                    var attribute_definition = {\n                        label: i,\n                        type : \"String\",\n                        annotation : annotation\n                    };\n                    self.inject_attribute_description (i, attribute_definition);\n                }\n            });\n     \n            var existing_network_nodes = {},\n                node_name_2_id = {};\n            \n            _.each (self.json.Nodes, function (n, i) {\n                existing_network_nodes[n.id] = n;\n                node_name_2_id [n.id] = i;\n            });\n            \n            _.each (nodes_and_attributes, function (n) {\n                function handle_node_attributes (target) {\n                    _.each (n, function (attribute_value, attribute_key) {\n                        if (attribute_key != index_id) {\n                            inject_attribute_node_value_by_id (target, attribute_key, attribute_value);\n                        }\n                    });\n                }\n                    \n                if (n[index_id] in existing_network_nodes) {\n                    handle_node_attributes (existing_network_nodes[n[index_id]]);\n                    existing_nodes ++;\n                } else {\n                    var new_node = {_networkNodeAttributeID : {}, node_class : \"injected\", node_annotation : annotation, attributes : [], degree: 0};\n                    new_node.id = n[index_id];\n                    handle_node_attributes (new_node);\n                    node_name_2_id [new_node.id] = self.json.Nodes.length;\n                    self.json.Nodes.push (new_node);\n                    new_nodes.push (new_node);\n                }\n            });\n\n\n            _.each (edges_and_attributes, function (e) {\n                try {\n                    if ((\"Index\" in e ) && (\"Partner\" in e) && (\"Contact\" in e)) {\n                        if ((! e[\"Index\"] in node_name_2_id)) {\n                            throw (\"Invalid index node\");\n                        }\n                        if ((! e[\"Partner\"] in node_name_2_id)) {\n                            throw (\"Invalid partner node\");\n                        }\n                        \n                        edge_types_dict [e[\"Contact\"]] = (edge_types_dict [e[\"Contact\"]] ? edge_types_dict [e[\"Contact\"]] : 0) + 1;\n                        \n                        var new_edge = {'source' :  node_name_2_id[e[\"Index\"]],\n                                        'target' :  node_name_2_id[e[\"Partner\"]],\n                                        'edge_type' : e[\"Contact\"],\n                                        'length' : 0.005,\n                                        'directed' : true};\n                        \n                        self.json.Edges.push (new_edge);                                    \n                    } else {\n                        throw (\"Missing required attribute\");\n                    }\n                } catch (err) {\n                    throw (\"Invalid edge specification ( \" + err + \") \" + JSON.stringify(e));\n                }\n            });\n            \n            self._aux_populate_category_menus(); \n            self.update_clusters_with_injected_nodes (null, null, annotation);\n            self.draw_node_table (self.extra_node_table_columns, self.json.Nodes);    \n            if (!self.extra_cluster_table_columns) {\n                self.extra_cluster_table_columns = [];\n            }\n            if (!self.extra_subcluster_table_columns) {\n                self.extra_subcluster_table_columns = [];\n            }\n            \n \n            var edge_types_by_cluster = {};\n            _.each (self.json.Edges, function (e) {\n                var edge_clusters = _.union (_.keys(self.json.Nodes[e.source].extended_cluster), _.keys(self.json.Nodes[e.target].extended_cluster));\n                _.each (edge_clusters, function (c){\n                    if (!(c in edge_types_by_cluster)) {\n                         edge_types_by_cluster [c] = {};\n                    }\n                    if (e.edge_type) {\n                        edge_types_by_cluster[c][e.edge_type] = 1;\n                    }\n                })\n            });\n            \n            \n            var edge_types_by_cluster_sorted = {};\n            _.each (edge_types_by_cluster, function (v,c) {\n                var my_keys = _.keys (v);\n                my_keys.sort();\n                edge_types_by_cluster_sorted[c] = my_keys;\n            });\n           \n            var edge_types = _.keys (edge_types_dict);\n            edge_types.sort ();\n            var _edge_colorizer = d3.scale.ordinal ().range (_networkCategoricalBase).domain (edge_types);\n            \n            var injected_column =                 [\n                {'description' : {\n                     value: annotation + \" network\",\n                     sort: function (c) {return c.value[0];},\n                     help: \"Nodes added and clusters merged through \" + annotation\n                    },\n                  'generator' : function (cluster) {\n                    \n                    return {\n                        value : [cluster.injected [annotation],\n                                 cluster.linked_clusters,\n                                 cluster.cluster_id],\n                        \n                        callback : function (element, payload) {\n                        \n                            var this_cell = d3.select(element);\n                            this_cell.text (+payload[0] + \" \" + annotation + \" nodes. \");\n                            var other_clusters = [];\n                            if (payload [1]) {\n                                other_clusters = _.without (_.keys(payload [1]), payload[2]);\n                                if (other_clusters.length) {\n                                    other_clusters.sort();\n                                    this_cell.append (\"span\").classed (\"label label-info\", true).text (\n                                    \"Bridges to \" + other_clusters.length + \" clusters\"\n                                    ).attr (\"title\", other_clusters.join (\", \"));\n                                }\n                            }\n\n                            var labeled_links = _.clone(edge_types_by_cluster_sorted[payload[2]]);\n                        \n                            if (payload[0] > 0 || other_clusters.length || \n                                (edge_types_by_cluster_sorted[payload[2]] && labeled_links.length)) {\n                                \n                                labeled_links.push (\"\");\n                                                                \n                                var shown_types = {};\n                                _.each (labeled_links, function (t) {\n                                    shown_types [t] = 1;\n                                });\n                                \n                                this_cell\n                                  .append(\"button\")\n                                  .classed(\"btn btn-primary btn-xs pull-right\", true)\n                                  .text(\"View \" + annotation)\n                                  .on (\"click\", function (e) {\n                                    self.open_exclusive_tab_view (payload[2],\n                                          function (n) {return (n.extended_cluster && payload[2] in n.extended_cluster);},\n                                          function (id) { return \"Cluster \" + id + \" with \" + annotation;},\n                                          {\n                                                \"edge-styler\" : function (element, d, network) {\n                                                    if (_.has (d, \"edge_type\")) {   \n                                                        d3.select (element).style (\"stroke\", network._edge_colorizer (d[\"edge_type\"])); \n                                                        d.is_hidden = !network.shown_types[d[\"edge_type\"]];                                                       \n                                                    } else {\n                                                        d.is_hidden = !network.shown_types[\"\"];                                                       \n                                                    }\n                                                },\n                                                \n                                                \"init_code\" : function (network) {\n                                                    function style_edge (type) {\n                                                        \n                                                        this.style(\"stroke-width\", \"5px\");\n                                                        if (type.length) {\n                                                            this.style (\"stroke\", network._edge_colorizer(type));\n                                                        } else {\n                                                            this.classed (\"link\", true);\n                                                            var def_color = this.style (\"stroke\");\n                                                            this.classed (\"link\", null);\n                                                            this.style (\"stroke\", def_color);\n                                                        }\n                                                    };\n                                                    network._edge_colorizer = _edge_colorizer;\n                                                    network.shown_types = _.clone(shown_types);\n                                                    network.edge_legend = {\"caption\" : \"Network links\",\n                                                                           \"types\" : {}};\n                                                                           \n                                                    _.each (network.shown_types, function (ignore, t) {\n                                                        if (t.length) {\n                                                            network.edge_legend.types[t] = _.partial (style_edge, t);\n                                                        } else {\n                                                            network.edge_legend.types[\"Molecular links\"] = _.partial (style_edge, t);\n                                                        }\n                                                    \n                                                    });\n                                                                                \n                                               },\n                                                \n                                                \"extra_menu\" : {\n                                                    \"title\" : \"Additional options\",\n                                                    \"items\" :   _.map (labeled_links, function (edge_class) {\n                                                                return [function (network, element) {\n                                                        function toggle_element  () {\n                                                            network.shown_types [edge_class] = !network.shown_types[edge_class];\n                                                            checkbox.attr (\"checked\", network.shown_types [edge_class] ? \"\" : null);\n                                                            network.update (true);\n                                                        }\n                                                        \n                                                        var link;\n                                                        \n                                                        if (edge_class.length) {                                                                        \n                                                            link = element.append (\"a\").text  (edge_class + \" links\")\n                                                                                .style (\"color\", network._edge_colorizer(edge_class)).on (\"click\", toggle_element);\n                                                                            \n                                                        } else {\n                                                            link = element.append (\"a\").text  (\"Molecular links\")\n                                                                                    .on (\"click\", toggle_element);\n                                                        \n                                                        }\n                                                        var checkbox = link.append (\"input\").attr (\"type\", \"checkbox\").attr (\"checked\", \"\");\n                                                                            \n                                                                            \n                                                    }]})\n                                                }\n                                          }\n                                    );\n                                  });\n                            }\n                        }\n                    }\n                  }\n                }\n              ];\n            \n            self.extra_cluster_table_columns = self.extra_cluster_table_columns.concat (injected_column);\n            self.draw_cluster_table (self.extra_cluster_table_columns, self.cluster_table, false, self.subcluster_table);    \n       }\n    } catch (e) {\n        throw (e);\n    }\n     \n    return {'nodes' : new_nodes, 'existing_nodes' : existing_nodes, 'edges' : edge_types_dict};\n  }\n  \n  self.update_clusters_with_injected_nodes = function (node_filter, edge_filter, annotation) {\n  \n    var cluster_report = {};\n    \n    try {\n\n\n        node_filter = node_filter || function () {return true};\n        edge_filter = edge_filter || function () {return true};\n        \n        var split_clusters = {};\n        var node_id_to_local_cluster = {};\n        \n        \n        var recomputed_clusters = hivtrace_cluster_depthwise_traversal (_.filter (self.json.Nodes, node_filter), \n                                             self.json.Edges,\n                                             null,\n                                             false\n        );\n        \n        _.each (recomputed_clusters, function (c) {\n            var cluster_ids = {};    \n            var injected_count = 0;\n    \n            _.each (c, function (n) {\n                cluster_ids [n.cluster] = 1;\n                injected_count += n.cluster ? 0 : 1;\n            });\n            \n            //var cluster_ids = _.keys (cluster_ids);\n            \n            //console.log (cluster_ids.length);\n            \n            // count how many \"injected\" nodes are there in the new cluster\n            \n\n            if (injected_count) {\n                delete cluster_ids[undefined];\n            }\n            \n            var cluster_count  = _.keys (cluster_ids).length;\n\n            _.each (c, function (n) {\n                if ('extended_cluster' in n) {\n                    _.extend (n ['extended_cluster'] , cluster_ids);\n                } else {\n                    n ['extended_cluster'] = cluster_ids;\n                }            \n             });\n\n            _.each (cluster_ids, function (c,k) {\n                //console.log (k);\n                var existing_cluster = self.clusters[k-1];\n                if (!(existing_cluster.injected)) {\n                    existing_cluster.injected = {};\n                }\n                existing_cluster.injected [annotation] = injected_count;\n                if ('linked_clusters' in existing_cluster) {\n                    _.extend (existing_cluster ['linked_clusters'] , cluster_ids);\n                } else {\n                    existing_cluster ['linked_clusters'] = cluster_ids;\n                }\n            });         \n\n        });\n        \n        \n    } catch (err) {\n        console.log (err);\n        throw (err);\n    }\n\n    return recomputed_clusters;\n  }\n  /*------------ Event Functions ---------------*/\n  function toggle_tooltip(element, turn_on, title, tag, container) {\n    //if (d3.event.defaultPrevented) return;\n\n    if (turn_on && !element.tooltip) {\n      // check to see if there are any other tooltips shown\n      $(\"[role='tooltip']\").each(function(d) {\n        $(this).remove();\n      });\n\n      var this_box = $(element);\n      var this_data = d3.select(element).datum();\n      element.tooltip = this_box.tooltip({\n        title: title + \"<br>\" + tag,\n        html: true,\n        container: container ? container : \"body\"\n      });\n\n      //this_data.fixed = true;\n\n      _.delay(_.bind(element.tooltip.tooltip, element.tooltip), 500, \"show\");\n    } else {\n      if (turn_on == false && element.tooltip) {\n        element.tooltip.tooltip(\"destroy\");\n        element.tooltip = undefined;\n      }\n    }\n  }\n\n  /*------------ Init code ---------------*/\n\n  var l_scale = 5000, // link scale\n    graph_data = self.json, // the raw JSON network object\n    max_points_to_render = 2048,\n    warning_string = \"\",\n    singletons = 0,\n    open_cluster_queue = [],\n    currently_displayed_objects,\n    gravity_scale = d3.scale\n      .pow()\n      .exponent(0.5)\n      .domain([1, 100000])\n      .range([0.1, 0.15]);\n\n  /*------------ D3 globals and SVG elements ---------------*/\n\n  var network_layout = d3.layout\n    .force()\n    .on(\"tick\", tick)\n    .charge(function(d) {\n      if (d.cluster_id)\n        return (\n          self.charge_correction * (-20 - 5 * Math.pow(d.children.length, 0.7))\n        );\n      return self.charge_correction * (-5 - 20 * Math.sqrt(d.degree));\n    })\n    .linkDistance(function(d) {\n      return Math.max(d.length, 0.005) * l_scale;\n    })\n    .linkStrength(function(d) {\n      if (d.support !== undefined) {\n        return 2 * (0.5 - d.support);\n      }\n      return 1;\n    })\n    .chargeDistance(l_scale * 0.25)\n    .gravity(gravity_scale(json.Nodes.length))\n    .friction(0.25);\n\n  d3.select(self.container).selectAll(\".my_progress\").style(\"display\", \"none\");\n  d3.select(self.container).selectAll(\"svg\").remove();\n  self.node_table.selectAll(\"*\").remove();\n  self.cluster_table.selectAll(\"*\").remove();\n\n  self.network_svg = d3\n    .select(self.container)\n    .append(\"svg:svg\")\n    //.style (\"border\", \"solid black 1px\")\n    .attr(\"id\", self.dom_prefix + \"-network-svg\")\n    .attr(\"width\", self.width + self.margin.left + self.margin.right)\n    .attr(\"height\", self.height + self.margin.top + self.margin.bottom);\n\n  self.network_cluster_dynamics = null;\n \n    \n  //.append(\"g\")\n  // .attr(\"transform\", \"translate(\" + self.margin.left + \",\" + self.margin.top + \")\");\n\n  self.legend_svg = self.network_svg.append(\"g\").attr(\"transform\", \"translate(5,5)\");\n\n  self.network_svg\n    .append(\"defs\")\n    .append(\"marker\")\n    .attr(\"id\", self.dom_prefix + \"_arrowhead\")\n    .attr(\"refX\", 9) /* there must be a smarter way to calculate shift*/\n    .attr(\"refY\", 2)\n    .attr(\"markerWidth\", 6)\n    .attr(\"markerHeight\", 4)\n    .attr(\"orient\", \"auto\")\n    .attr(\"stroke\", \"#666666\")\n    .attr(\"fill\", \"#AAAAAA\")\n    .append(\"path\")\n    .attr(\"d\", \"M 0,0 V 4 L6,2 Z\"); //this is actual shape for arrowhead\n\n  change_window_size();\n\n  initial_json_load();\n\n  d3.select(self.container).selectAll(\".my_progress\").style(\"display\", \"none\");\n\n  if (options) {\n    if (_.isNumber(options[\"charge\"])) {\n      self.charge_correction = options[\"charge\"];\n    }\n\n    if (\"colorizer\" in options) {\n      self.colorizer = options[\"colorizer\"];\n    }\n\n    if (\"node_shaper\" in options) {\n      self.node_shaper = options[\"node_shaper\"];\n    }\n    \n    if (\"callbacks\" in options) {\n       options[\"callbacks\"] (self);\n    }\n    \n\n    self.draw_attribute_labels();\n    network_layout.start();\n\n    if (_.isArray(options[\"expand\"])) {\n      self.expand_some_clusters(\n        _.filter(self.clusters, function(c) {\n          return options[\"expand\"].indexOf(c.cluster_id) >= 0;\n        })\n      );\n    }\n  }\n  return self;\n};\n\nvar hivtrace_cluster_graph_summary = function(graph, tag) {\n  var summary_table = d3.select(tag);\n\n  summary_table = d3.select(tag).select(\"tbody\");\n  if (summary_table.empty()) {\n    summary_table = d3.select(tag).append(\"tbody\");\n  }\n\n  var table_data = [];\n\n  if (!summary_table.empty()) {\n    _.each(graph[\"Network Summary\"], function(value, key) {\n      if (self._is_CDC_ && key == \"Edges\") {\n        key = \"Links\";\n      }\n      if (_.isNumber(value)) {\n        table_data.push([key, value]);\n      }\n    });\n  }\n\n  var degrees = [];\n  _.each(graph[\"Degrees\"][\"Distribution\"], function(value, index) {\n    for (var k = 0; k < value; k++) {\n      degrees.push(index + 1);\n    }\n  });\n  degrees = helpers.describe_vector(degrees);\n  table_data.push([\"Links/node\", \"\"]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Mean</i>\",\n    _defaultFloatFormat(degrees[\"mean\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Median</i>\",\n    _defaultFloatFormat(degrees[\"median\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Range</i>\",\n    degrees[\"min\"] + \" - \" + degrees[\"max\"]\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n    degrees[\"Q1\"] + \" - \" + degrees[\"Q3\"]\n  ]);\n\n  degrees = helpers.describe_vector(graph[\"Cluster sizes\"]);\n  table_data.push([\"Cluster sizes\", \"\"]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Mean</i>\",\n    _defaultFloatFormat(degrees[\"mean\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Median</i>\",\n    _defaultFloatFormat(degrees[\"median\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Range</i>\",\n    degrees[\"min\"] + \" - \" + degrees[\"max\"]\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n    degrees[\"Q1\"] + \" - \" + degrees[\"Q3\"]\n  ]);\n\n  if (self._is_CDC_) {\n    degrees = helpers.describe_vector(\n      _.map(graph[\"Edges\"], function(e) {\n        return e.length;\n      })\n    );\n    table_data.push([\"Genetic distances (links only)\", \"\"]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Mean</i>\",\n      _defaultPercentFormat(degrees[\"mean\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Median</i>\",\n      _defaultPercentFormat(degrees[\"median\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Range</i>\",\n      _defaultPercentFormat(degrees[\"min\"]) +\n        \" - \" +\n        _defaultPercentFormat(degrees[\"max\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n      _defaultPercentFormat(degrees[\"Q1\"]) +\n        \" - \" +\n        _defaultPercentFormat(degrees[\"Q3\"])\n    ]);\n  }\n\n  var rows = summary_table.selectAll(\"tr\").data(table_data);\n  rows.enter().append(\"tr\");\n  rows.exit().remove();\n  var columns = rows.selectAll(\"td\").data(function(d) {\n    return d;\n  });\n  columns.enter().append(\"td\");\n  columns.exit();\n  columns.html(function(d) {\n    return d;\n  });\n};\n\nmodule.exports.computeCluster = hivtrace_cluster_depthwise_traversal;\nmodule.exports.clusterNetwork = hivtrace_cluster_network_graph;\nmodule.exports.graphSummary = hivtrace_cluster_graph_summary;\n\n\n\n// WEBPACK FOOTER //\n// ./src/clusternetwork.js","var d3 = require('d3'),\n  _ = require('underscore'),\n  helpers = require('./helpers.js');\n\nfunction hivtrace_cluster_adjacency_list(obj) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  var adjacency_list = {};\n\n  edges.forEach(function(e, i) {\n\n    function in_nodes(n, id) {\n      return n.id == id;\n    }\n\n    var seq_ids = e[\"sequences\"];\n\n    var n1 = nodes.filter(function(n) {\n        return in_nodes(n, seq_ids[0]);\n      })[0],\n      n2 = nodes.filter(function(n) {\n        return in_nodes(n, seq_ids[1]);\n      })[0];\n\n    adjacency_list[n1.id] ? adjacency_list[n1.id].push(n2) : adjacency_list[n1.id] = [n2];\n    adjacency_list[n2.id] ? adjacency_list[n2.id].push(n1) : adjacency_list[n2.id] = [n1];\n\n  });\n\n  return adjacency_list;\n\n}\n\nvar hivtrace_generate_svg_polygon_lookup = {};\n\n_.each(_.range(3, 20), function(d) {\n  var angle_step = Math.PI * 2 / d;\n  hivtrace_generate_svg_polygon_lookup[d] = _.map(_.range(1, d), function(i) {\n    return [Math.cos(angle_step * i), Math.sin(angle_step * i)];\n  });\n});\n\nfunction hivtrace_generate_svg_symbol(type) {\n\n\n  switch (type) {\n    case 'circle':\n    case 'cross':\n    case 'diamond':\n    case 'square':\n    case 'triangle-down':\n    case 'triangle-up':\n      return d3.svg.symbol().type(type);\n    case 'triangle':\n      return new hivtrace_generate_svg_polygon().sides(3);\n    case 'pentagon':\n      return new hivtrace_generate_svg_polygon().sides(5);\n    case 'hexagon':\n      return new hivtrace_generate_svg_polygon().sides(6);\n    case 'septagon':\n      return new hivtrace_generate_svg_polygon().sides(7);\n    case 'octagon':\n      return new hivtrace_generate_svg_polygon().sides(8);\n    case 'ellipse' :\n      return new hivtrace_generate_svg_ellipse();\n  }\n  //console.log (type);\n  return d3.svg.symbol().type('circle');\n}\n\nvar hivtrace_generate_svg_ellipse = function () {\n\n  var self = this;\n\n  self.ellipse = function() {\n\n    var path = \"M \" + self.radius  + \" 0 A \" + self.radius * 1  + \" \" + self.radius * 0.75 + \" 0 1 0 \" +  self.radius  + \" 0.00001\"\n    return path;\n\n  };\n\n  self.ellipse.type = function() {\n    return self.ellipse;\n  };\n\n  self.ellipse.size = function(attr) {\n\n    if (_.isNumber(attr)) {\n      self.size = attr;\n      self.radius = Math.sqrt(1.25 * attr / Math.PI);\n      return self.ellipse;\n    }\n\n    return self.size;\n\n  };\n\n  self.ellipse.size(64);\n\n  return self.ellipse;\n}\n\nvar hivtrace_generate_svg_polygon = function() {\n\n  var self = this;\n\n  self.polygon = function() {\n\n    var path = \" M\" + self.radius + \" 0\";\n\n    if (self.sides in hivtrace_generate_svg_polygon_lookup) {\n      path += hivtrace_generate_svg_polygon_lookup[self.sides].map(function(value) {\n        return \" L\" + self.radius * value[0] + \" \" + self.radius * value[1];\n      }).join(\" \");\n    } else {\n      var angle_step = Math.PI * 2 / self.sides,\n        current_angle = 0;\n      for (i = 0; i < self.sides - 1; i++) {\n        current_angle += angle_step;\n        path += \" L\" + self.radius * Math.cos(current_angle) + \" \" + self.radius * Math.sin(current_angle);\n      }\n    }\n\n    path += \" Z\";\n    return path;\n  };\n\n  self.polygon.sides = function(attr) {\n\n    if (_.isNumber(attr) && attr > 2) {\n      self.sides = attr;\n      return self.polygon;\n    }\n\n    return self.sides;\n\n  };\n\n  self.polygon.type = function() {\n    return self.polygon;\n  };\n\n  self.polygon.size = function(attr) {\n\n    if (_.isNumber(attr)) {\n      self.size = attr;\n      self.radius = Math.sqrt(attr / Math.PI);\n      return self.polygon;\n    }\n\n    return self.size;\n\n  };\n\n  self.polygon.size(64);\n  self.sides = 6;\n\n  return self.polygon;\n\n};\n\nfunction hivtrace_new_cluster_adjacency_list(obj) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n\n  nodes.forEach(function(n) {\n    n.neighbors = d3.set();\n  });\n\n  edges.forEach(function(e) {\n    nodes[e.source].neighbors.add(e.target);\n    nodes[e.target].neighbors.add(e.source);\n  });\n\n}\n\n// Reconstructs path from floyd-warshall algorithm\nfunction hivtrace_get_path(next, i, j) {\n\n  var all_paths = [];\n  i = parseInt(i);\n  j = parseInt(j);\n\n  for (var c = 0; c < next[i][j].length; c++) {\n\n    var k = next[i][j][c];\n    var intermediate = k;\n\n    if (intermediate === null || intermediate == i) {\n      return [\n        [parseInt(i), parseInt(j)]\n      ];\n    } else {\n\n      var paths_i_k = hivtrace_get_path(next, i, intermediate);\n      var paths_k_j = hivtrace_get_path(next, intermediate, j);\n\n      for (var i_k_index = 0; i_k_index < paths_i_k.length; i_k_index++) {\n        var i_k = paths_i_k[i_k_index];\n        for (var k_j_index = 0; k_j_index < paths_k_j.length; k_j_index++) {\n          var k_j = paths_k_j[k_j_index];\n          if (i_k.length) {\n            if ((i_k[0] == i) && (i_k[i_k.length - 1] == k) && (k_j[0] == k) && (k_j[k_j.length - 1] == j)) {\n              i_k.pop();\n              all_paths.push(i_k.concat(k_j));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return all_paths;\n\n}\n\nfunction hivtrace_paths_with_node(node, next, i, j) {\n\n  var paths = hivtrace_get_path(next, i, j);\n\n  // Retrieve intermediary paths\n  paths = paths.map(function(sublist) {\n    return sublist.slice(1, -1);\n  });\n\n  if (!paths) {\n    return 0;\n  }\n\n  var num_nodes = [];\n\n  for (var k = 0; i < paths.length; k++) {\n    sublist = paths[k];\n    num_nodes.push(d3.sum(sublist.map(function(n) {\n      return n == node;\n    })));\n  }\n\n  var mean = d3.mean(num_nodes);\n\n  if (mean === undefined) {\n    mean = 0;\n  }\n\n  return mean;\n\n}\n\n\n// Same as compute shortest paths, but with an additional next parameter for reconstruction\nfunction hivtrace_compute_shortest_paths_with_reconstruction(obj, subset, use_actual_distances) {\n\n  // Floyd-Warshall implementation\n  var distances = [];\n  var next = [];\n  var nodes = obj.Nodes;\n  var edges = obj.Edges;\n  var node_ids = [];\n\n  var adjacency_list = hivtrace_cluster_adjacency_list(obj);\n\n  if (!subset) {\n    subset = Object.keys(adjacency_list);\n  }\n\n  var node_count = subset.length;\n\n  for (var i = 0; i < subset.length; i++) {\n    var a_node = subset[i];\n    var empty_arr = _.range(node_count).map(function(d) {\n      return null;\n    });\n    var zeroes = _.range(node_count).map(function(d) {\n      return null;\n    });\n    distances.push(zeroes);\n    next.push(empty_arr);\n  }\n\n  for (var index = 0; index < subset.length; index++) {\n    var a_node = subset[index];\n    for (var index2 = 0; index2 < subset.length; index2++) {\n      var second_node = subset[index2];\n      if (second_node != a_node) {\n        if (adjacency_list[a_node].map(function(n) {\n            return n.id;\n          }).indexOf(second_node) != -1) {\n          distances[index][index2] = 1;\n          distances[index2][index] = 1;\n        }\n      }\n    }\n  }\n\n  for (var index_i = 0; index_i < subset.length; index_i++) {\n    var n_i = subset[index_i];\n    for (var index_j = 0; index_j < subset.length; index_j++) {\n      var n_j = subset[index_j];\n      if (index_i == index_j) {\n        next[index_i][index_j] = [];\n      } else {\n        next[index_i][index_j] = [index_i];\n      }\n    }\n  }\n\n  // clone distances\n  var distances2 = _.map(distances, _.clone);\n  var c = 0;\n\n  for (var index_k = 0; index_k < subset.length; index_k++) {\n    var n_k = subset[index_k];\n    for (var index_i = 0; index_i < subset.length; index_i++) {\n      var n_i = subset[index_i];\n      for (var index_j = 0; index_j < subset.length; index_j++) {\n        var n_j = subset[index_j];\n\n        if (n_i != n_j) {\n\n          d_ik = distances[index_k][index_i];\n          d_jk = distances[index_k][index_j];\n          d_ij = distances[index_i][index_j];\n\n          if (d_ik !== null && d_jk !== null) {\n            d_ik += d_jk;\n            if (d_ij === null || (d_ij > d_ik)) {\n              distances2[index_i][index_j] = d_ik;\n              distances2[index_j][index_i] = d_ik;\n              next[index_i][index_j] = [];\n              next[index_i][index_j] = next[index_i][index_j].concat(next[index_k][index_j]);\n              continue;\n            } else if (d_ij == d_ik) {\n              next[index_i][index_j] = next[index_i][index_j].concat(next[index_k][index_j]);\n            }\n          }\n          c++;\n          distances2[index_j][index_i] = distances[index_j][index_i];\n          distances2[index_i][index_j] = distances[index_i][index_j];\n        }\n      }\n    }\n\n    var t = distances2;\n    distances2 = distances;\n    distances = t;\n\n  }\n\n  return {\n    'ordering': subset,\n    'distances': distances,\n    'next': next\n  };\n\n}\n\nfunction hivtrace_filter_to_node_in_cluster(node, obj) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges,\n    cluster_id = null;\n\n  // Retrieve nodes that are part of the cluster\n  var node_obj = nodes.filter(function(n) {\n    return node == n.id;\n  });\n\n  if (node_obj) {\n    cluster_id = node_obj[0].cluster;\n  } else {\n    console.log('could not find node');\n    return null;\n  }\n\n  // Filter out all edges and nodes that belong to the cluster\n  var nodes_in_cluster = nodes.filter(function(n) {\n    return cluster_id == n.cluster;\n  });\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n  var edges_in_cluster = edges.filter(function(e) {\n    return node_ids.indexOf(e.sequences[0]) != -1;\n  });\n\n  var filtered_obj = {};\n  filtered_obj[\"Nodes\"] = nodes_in_cluster;\n  filtered_obj[\"Edges\"] = edges_in_cluster;\n  return filtered_obj;\n\n}\n\nfunction hivtrace_compute_betweenness_centrality_all_nodes_in_cluster(cluster, obj, cb) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n\n  var nodes_in_cluster = nodes.filter(function(n) {\n    return cluster == n.cluster;\n  });\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n  var edges_in_cluster = edges.filter(function(e) {\n    return node_ids.indexOf(e.sequences[0]) != -1;\n  });\n\n  var filtered_obj = {};\n  filtered_obj[\"Nodes\"] = nodes_in_cluster;\n  filtered_obj[\"Edges\"] = edges_in_cluster;\n\n  // get length of cluster\n  if (nodes_in_cluster.length > 70) {\n    cb('cluster too large', null);\n    return;\n  }\n\n  // get paths\n  var paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n\n  var betweenness = {};\n  nodes_in_cluster.forEach(function(n) {\n    betweenness[n.id] = hivtrace_compute_betweenness_centrality(n.id, filtered_obj, paths);\n  });\n\n  cb(null, betweenness);\n  return;\n\n}\n\n// Returns dictionary of nodes' betweenness centrality\n// Utilizes the Floyd-Warshall Algorithm with reconstruction\nfunction hivtrace_compute_betweenness_centrality(node, obj, paths) {\n\n  if (!paths) {\n    var filtered_obj = hivtrace_filter_to_node_in_cluster(node, obj);\n    paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n  }\n\n  // find index of id\n  var index = paths.ordering.indexOf(node);\n\n  if (index == -1) {\n    return null;\n  }\n\n  var length = paths.distances.length;\n\n  if (length != 2) {\n    scale = 1 / ((length - 1) * (length - 2));\n  } else {\n    scale = 1;\n  }\n\n\n  // If s->t goes through 1, add to sum\n  // Reconstruct each shortest path and check if node is in it\n  var paths_with_node = [];\n  for (var i in _.range(length)) {\n    for (var j in _.range(length)) {\n      paths_with_node.push(hivtrace_paths_with_node(index, paths.next, i, j));\n    }\n  }\n\n  return d3.sum(paths_with_node) * scale;\n\n}\n\n\nfunction hivtrace_compute_node_degrees(obj) {\n\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  for (var n in nodes) {\n    nodes[n].degree = 0;\n  }\n\n  for (var e in edges) {\n    nodes[edges[e].source].degree++;\n    nodes[edges[e].target].degree++;\n  }\n\n}\n\nfunction hivtrace_get_node_by_id(id, obj) {\n  return obj.Nodes.filter(function(n) {\n    return id == n.id;\n  })[0] || undefined;\n}\n\nfunction hivtrace_compute_cluster_betweenness(obj, callback) {\n\n  var nodes = obj.Nodes;\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  // Get all unique clusters\n  var clusters = nodes.map(function(n) {\n    return n.cluster;\n  });\n  var unique_clusters = clusters.filter(onlyUnique);\n\n  var cb_count = 0;\n\n  function cb(err, results) {\n\n    cb_count++;\n\n    for (var node in results) {\n      hivtrace_get_node_by_id(node, obj)['betweenness'] = results[node];\n    }\n\n    if (cb_count >= unique_clusters.length) {\n      callback('done');\n    }\n\n  }\n\n  // Compute betweenness in parallel\n  unique_clusters.forEach(function(cluster_id) {\n    hivtrace_betweenness_centrality_all_nodes_in_cluster(cluster_id, obj, cb);\n  });\n\n  // once all settled callback\n\n}\n\n\nfunction hivtrace_is_contaminant(node) {\n  return node.attributes.indexOf('problematic') != -1;\n}\n\nfunction hivtrace_convert_to_csv(obj, callback) {\n  //Translate nodes to rows, and then use d3.format\n  hivtrace_compute_node_degrees(obj);\n\n  hivtrace_compute_cluster_betweenness(obj, function(err) {\n    var node_array = obj.Nodes.map(function(d) {\n      return [d.id, d.cluster, d.degree, d.betweenness, hivtrace_is_contaminant(d), d.attributes.join(';')];\n    });\n    node_array.unshift(['seqid', 'cluster', 'degree', 'betweenness', 'is_contaminant', 'attributes']);\n    node_csv = d3.csv.format(node_array);\n    callback(null, node_csv);\n  });\n}\n\nfunction hivtrace_export_csv_button(graph, tag) {\n\n  var data = hivtrace_convert_to_csv(graph, function(err, data) {\n    if (data !== null) {\n      var pom = document.createElement('a');\n      pom.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));\n      pom.setAttribute('download', 'export.csv');\n      pom.className = 'btn btn-default btn-sm';\n      pom.innerHTML = '<span class=\"glyphicon glyphicon-floppy-save\"></span> Export Results';\n      $(tag).append(pom);\n    }\n  });\n\n}\n\n\nfunction hiv_trace_export_table_to_text(parent_id, table_id, sep) {\n\n  var the_button = d3.select(parent_id);\n  the_button.selectAll(\"[data-type='download-button']\").remove();\n\n  the_button = the_button.append(\"a\")\n    .attr(\"target\", \"_blank\")\n    .attr(\"data-type\", \"download-button\")\n    .on(\"click\", function(data, element) {\n      d3.event.preventDefault();\n      var table_tag = d3.select(this).attr(\"data-table\");\n      var table_text = helpers.table_to_text(table_tag);\n      helpers.export_handler(table_text, table_tag.substring(1) + \".tsv\", \"text/tab-separated-values\");\n    })\n    .attr(\"data-table\", table_id);\n\n  the_button.append(\"i\").classed(\"fa fa-download fa-2x\", true);\n  return the_button;\n\n}\n\nvar hivtrace_compute_local_clustering_coefficients = _.once(function(obj) {\n\n  hivtrace_new_cluster_adjacency_list(obj);\n\n  var nodes = obj.Nodes;\n\n  nodes.forEach(function(n) {\n\n    var a_node = n;\n    var neighborhood_size = a_node.neighbors.size();\n\n    if (neighborhood_size < 2) {\n      a_node.lcc = undefined;\n    } else {\n\n      if (neighborhood_size > 500) {\n        a_node.lcc = hivtrace_too_large;\n      } else {\n        // count triangles\n        neighborhood = a_node.neighbors.values();\n        counter = 0;\n        for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n          for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n            if (nodes[neighborhood[n1]].neighbors.has(neighborhood[n2])) {\n              counter++;\n            }\n          }\n        }\n        a_node.lcc = 2 * counter / neighborhood_size / (neighborhood_size - 1);\n      }\n    }\n\n  });\n\n});\n\nfunction hivtrace_render_settings(settings, explanations) {\n  // TODO:\n  //d3.json (explanations, function (error, expl) {\n  //    //console.log (settings);\n  //});\n}\n\nfunction hivtrace_format_value(value, formatter) {\n\n  if (typeof value === 'undefined') {\n    return \"Not computed\";\n  }\n  if (value === hivtrace_undefined) {\n    return \"Undefined\";\n  }\n  if (value === hivtrace_too_large) {\n    return \"Size limit\";\n  }\n\n  if (value === hivtrace_processing) {\n    return '<span class=\"fa fa-spin fa-spinner\"></span>';\n  }\n\n  return formatter ? formatter(value) : value;\n\n}\n\nfunction hivtrace_plot_cluster_dynamics (time_series, container, x_title, y_title, y_scale, bin_by, options) {\n        \n    options = options || {\n        base_line : 20,\n        top: 40,\n        right: 30,\n        bottom: 3 * 20,\n        left: 5 * 20,\n        font_size : 18,\n        rect_size : 22,\n        width : 1024,\n        height : 600\n    };\n\n    var skip_cumulative = options && options[\"skip_cumulative\"];\n    \n    var width =  options.width - options.left - options.right;\n    var height =  options.height - options.top - options.bottom;\n\n    bin_by = bin_by || function (date) {\n        var year = date.getFullYear (),\n            nearest_quarter = new Date(),\n            mid_point = new Date ();\n            \n        nearest_quarter.setDate (1);\n        nearest_quarter.setFullYear (year);\n        mid_point.setFullYear (year);\n       \n        \n        var quarter = Math.floor (date.getMonth() / 3) + 1;\n        nearest_quarter.setMonth ((quarter) * 3);\n        nearest_quarter.setHours (0,0,0);\n        mid_point.setHours (0,0,0);\n        \n        nearest_quarter.setFullYear (year + (quarter == 4 ? 1 : 0));\n        mid_point.setMonth ((quarter) * 3 + 1);\n        mid_point.setDate (15);\n                        \n        return [\"Q\" + quarter + \" \" + year, nearest_quarter, mid_point];\n        \n    };\n\n    /** plot_data is an array with entries like \n        {\n            \"time\": DATE,\n            \"sex_trans\":\"IDU-Male\"\n        }\n        \n        \"time\" is required, everything else are optional attributes\n        \n        1. First, we bin everything into ranges (like years or quarters, this is returned by the mapper callback)\n        2. Second, we compute growth dynamics of total counts and individual attributes\n        3. Third, if additional attributes are present, one that's tagged for display is stratified by values and \n           converted into time series\n        \n    */\n            \n    var x = d3.time.scale()\n        .range([0, width]);\n\n    var y = y_scale ? y_scale : d3.scale.linear();\n    \n    y.range([height, 0]);\n                        \n   \n\n    var xAxis = d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\")\n        .ticks (8).tickFormat(d3.time.format (\"%m/%Y\"));\n\n    var yAxis = d3.svg.axis()\n        .scale(y)\n        .orient(\"left\").ticks (8, \"f\");\n    \n    \n    var binned              = {};\n    var values_by_attribute = {};\n    var total_id            = \"total\";\n    var total_color         = \"#555555\";\n    var prefix              = options && options [\"prefix\"]  ? options [\"prefix\"] : null;\n    var max_bin             = 0;\n    \n    _.each (time_series, function (point, index) {\n        var bin_tag = bin_by (point[\"time\"]);\n        if (! (bin_tag [0] in binned)) {\n            binned [bin_tag[0]] = {\"time\" : bin_tag[1], \"x\" : bin_tag[2]};\n            binned [bin_tag[0]][total_id] = 0;\n            _.each (point, function (v, k) {\n                if (k != \"time\") {\n                    binned [bin_tag[0]][k] = {};\n                }\n            });\n        }\n        \n        binned [bin_tag[0]][total_id] += 1;\n        max_bin = Math.max (max_bin, binned [bin_tag[0]][total_id]);\n        \n        var y = {};\n        y [total_id] = index + 1;\n        _.each (point, function (v, k) {\n                if (k != \"time\") {\n                   binned [bin_tag[0]][k][v] = binned [bin_tag[0]][k][v] ? binned [bin_tag[0]][k][v] + 1 : 1;\n                    if (! (k in values_by_attribute)) {\n                        values_by_attribute [k] = {};\n                    }\n                    if (v in values_by_attribute [k]) {\n                        values_by_attribute [k][v] ++;\n                    } else {\n                        values_by_attribute [k][v] = 1;\n                    }\n                    max_bin = Math.max (max_bin, binned [bin_tag[0]][k][v]);\n                    y [k] = _.clone (values_by_attribute[k]);\n                }\n            });\n            \n        point [\"y\"] = y;    \n        point [\"_bin\"] = bin_tag[1];\n    }); \n    \n    \n    var binned_array = [];\n    _.each (binned, function (v,k) {\n        v[\"id\"] = k;\n        binned_array.push (v);\n        \n    });\n        \n    binned_array.sort (function (a,b) {\n        return b['time'] > a['time'] ? 1 : (b['time'] == a['time'] ? 0 : -1);\n    });\n    \n        \n    var min_x = d3.min (time_series, function(d) {\n        return d[\"time\"] < d[\"_bin\"] ? d[\"time\"] : d[\"_bin\"];\n    });\n    var max_x = d3.max (time_series, function(d) {\n        return d[\"time\"] > d[\"_bin\"] ? d[\"time\"] : d[\"_bin\"];\n    });\n              \n    x.domain([min_x,max_x]).clamp (true);\n    y.domain ([0.0, Math.round (skip_cumulative ? max_bin + 1 : time_series.length * 1.2)]).clamp (true);\n    \n    \n    /* step-plot generator*/\n\n    /*var svg = container.append(\"svg\")//.style(\"display\", \"table-cell\")\n        .attr(\"width\", width + options.left + options.right)\n        .attr(\"height\", height + options.top + options.bottom);*/\n        \n        \n    container.selectAll(\"*\").remove(); // clean up previous plots\n        \n    var legend_area = container.append(\"g\").attr(\"transform\", \"translate(\" + (options.left + options.font_size * 2.5) + \",\" + (options.top + options.font_size) + \")\")\n\n    var svg = container.append(\"g\")\n        .attr(\"transform\", \"translate(\" + options.left + \",\" + options.top + \")\");\n\n\n    /* set the domain for the codons */\n        \n    var y_key = _.keys (values_by_attribute)[0];\n    \n    \n    var color_scale = ((\"colorizer\" in options) && options[\"colorizer\"] && (y_key in options[\"colorizer\"])) ? options[\"colorizer\"][y_key]: d3.scale.category10();\n    \n    color_scale = _.wrap (color_scale, function(func, arg) {\n          if (arg == total_id) return total_color;\n          return func(\n            arg\n          );\n        });\n    \n    var plot_types = _.keys (values_by_attribute[y_key]);\n    plot_types.push (total_id);\n    plot_types.sort();\n    \n    if (options && options [\"drag\"]) {\n        var drag = d3.behavior.drag();\n        drag.on (\"drag\", function () {\n            options [\"drag\"].x += d3.event.dx;\n            options [\"drag\"].y += d3.event.dy;\n            d3.select (this).attr (\"transform\", \"translate(\" + options [\"drag\"].x + ',' + options [\"drag\"].y + \")\");\n        }); \n        container.call(drag);\n    }\n    \n    \n    \n    var legend_lines = legend_area.selectAll(\"g\").data(plot_types);\n    \n    legend_lines.enter().append(\"g\").attr(\"class\", \"annotation-text\");\n\n    function opacity_toggle (tag, on_off) {\n        d3.select ('[data-plotid=\"' + tag + '\"]').style (\"fill-opacity\", on_off ? 0.5 : 0.1);\n        d3.select ('[data-curveid=\"' + tag + '\"]').style (\"stroke-width\", on_off ? 3 : 1);\n    }\n\n    legend_lines.selectAll(\"text\").data(function(d) {\n            return [d];\n        }).enter().append(\"text\")\n        .attr(\"transform\", function(d, i, j) {\n            return \"translate(\" + options.rect_size + \",\" + (options.rect_size * (plot_types.length - 1 - j) - (options.rect_size - options.font_size)) + \")\";\n        })\n        .attr(\"dx\", \"0.2em\")\n        .style (\"font-size\", options.font_size)\n        .text(function(d) {\n            return d;\n        }).on (\"mouseover\", function (d) {\n            opacity_toggle (prefix + d, true);\n        }).on (\"mouseout\", function (d) {\n            opacity_toggle (prefix + d, false);\n        });\n\n\n\n    legend_lines.selectAll(\"rect\").data(function(d) {\n            return [d];\n        }).enter().append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", function(d, i, j) {\n            return options.rect_size * (plot_types.length - 2 - j);\n        })\n        .attr(\"width\", options.rect_size)\n        .attr(\"height\", options.rect_size)\n        .attr(\"class\", \"area\")\n        .style(\"fill\", function(d, i, j) {\n            return color_scale (d);\n        }).on (\"mouseover\", function (d) {\n            opacity_toggle (prefix + d, true);\n        }).on (\"mouseout\", function (d) {\n            opacity_toggle (prefix + d, false);\n        });\n\n\n      var last = _.clone (time_series[time_series.length - 1]);\n      last ['time'] = x.domain ()[1];\n      time_series.push (last);\n\n     _.each (plot_types, function (plot_key, idx) {\n    \n        var plot_color = color_scale (plot_key);\n        var y_accessor = function (d) {\n            //console.log ((plot_key in d['y']) ? d['y'][plot_key] : 0);\n            if (plot_key in d['y']) {\n                return d['y'][plot_key];\n            }\n            if (y_key in d['y']) {\n                if (plot_key in d['y'][y_key]) {\n                    return d['y'][y_key][plot_key];\n                }\n            }\n            return 0.0;\n        };\n        \n       var bin_accessor = function (d) {\n            if (y_key && plot_key in d[y_key]) {\n                return d[y_key][plot_key];\n            } else {\n                if (plot_key in d) {\n                    return d[plot_key];\n                }\n            }\n            return 0.0;\n        };\n       \n\n        if (!skip_cumulative) {\n            var curve = d3.svg.area()\n                .x(function(d)  { return x(d['time']); })\n                .y1(function(d) { return y(y_accessor(d)); })\n                .y0(function(d) { return y(0); })\n                .interpolate (\"step\");\n        \n               svg.append(\"path\")\n                  .datum(time_series)\n                  .classed (\"trend\", true)\n                  .style (\"fill\", plot_color)\n                  .style (\"stroke\", plot_color)\n                  .attr(\"d\", curve)\n                  .attr (\"data-plotid\", prefix + plot_key);\n        }\n              \n        binned_array.forEach (function (d) {\n            svg.append (\"circle\").attr (\"cx\", x(d['time'])).attr (\"cy\", y(bin_accessor (d))).attr (\"r\", \"5\")\n            .classed (\"node\", true)\n            .style (\"fill\", plot_color)\n            .style (\"stroke\", plot_color)\n            .attr (\"title\", plot_key + \" : \" + bin_accessor (d));\n        });            \n\n        var curve_year = d3.svg.line()\n            .x(function(d)  { return x(d['time']); })\n            .y(function(d) { return y(bin_accessor(d)); })\n            .interpolate (\"cardinal\");\n        \n           svg.append(\"path\")\n              .datum(binned_array)\n              .classed (\"tracer\", true)\n              .style (\"stroke\", plot_color)\n              .attr(\"d\", curve_year)\n              .attr (\"data-curveid\", prefix + plot_key);\n\n\n    }\n    );\n\n     /* x-axis */\n    var x_axis = svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .style (\"font-size\", options.font_size)\n        .call(xAxis);\n        \n    x_axis.selectAll (\"text\").attr(\"transform\", \"rotate(45)\")\n                        .attr(\"dy\", \"1em\")\n                        .attr(\"dx\", \"1em\");\n\n    \n    x_axis.append(\"text\")\n        .attr(\"x\", width)\n        .attr(\"dy\", \"-.5em\")\n        .style(\"text-anchor\", \"end\")\n        .style (\"font-size\", options.font_size)\n        .text(x_title);\n        \n    \n\n   /* y-axis*/\n    svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .style (\"font-size\", options.font_size)\n        .call(yAxis)\n        .append(\"text\")\n        .style (\"font-size\", options.font_size)\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 6)\n        .attr(\"dy\", \".71em\")\n        .style(\"text-anchor\", \"end\")\n        .text(y_title); // beta - alpha\n\n}\n\nmodule.exports.compute_node_degrees = hivtrace_compute_node_degrees;\nmodule.exports.export_csv_button = hivtrace_export_csv_button;\nmodule.exports.convert_to_csv = hivtrace_convert_to_csv;\nmodule.exports.betweenness_centrality = hivtrace_compute_betweenness_centrality;\nmodule.exports.betweenness_centrality_all_nodes_in_cluster = hivtrace_compute_betweenness_centrality_all_nodes_in_cluster;\nmodule.exports.cluster_adjacency_list = hivtrace_cluster_adjacency_list;\nmodule.exports.new_cluster_adjacency_list = hivtrace_new_cluster_adjacency_list;\nmodule.exports.analysis_settings = hivtrace_render_settings;\nmodule.exports.export_table_to_text = hiv_trace_export_table_to_text;\nmodule.exports.compute_local_clustering = hivtrace_compute_local_clustering_coefficients;\nmodule.exports.undefined = {};\nmodule.exports.too_large = {};\nmodule.exports.processing = {};\nmodule.exports.format_value = hivtrace_format_value;\nmodule.exports.polygon = hivtrace_generate_svg_polygon;\nmodule.exports.symbol = hivtrace_generate_svg_symbol;\nmodule.exports.cluster_dynamics = hivtrace_plot_cluster_dynamics;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc.js","var download = require('downloadjs');\n\nvar datamonkey_error_modal = function(msg) {\n  $('#modal-error-msg').text(msg);\n  $('#errorModal').modal();\n};\n\nfunction b64toBlob(b64, onsuccess, onerror) {\n  var img = new Image();\n\n  img.onerror = onerror;\n\n  img.onload = function onload() {\n    var canvas = document.getElementById(\"hyphy-chart-canvas\");\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    var ctx = canvas.getContext('2d');\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n    if(canvas.msToBlob) {\n      var blob = canvas.msToBlob(onsuccess);\n      onsuccess(blob);\n      window.navigator.msSaveBlob(blob, 'image.png');\n    } else {\n      canvas.toBlob(onsuccess);\n    }\n  };\n\n  img.src = b64;\n}\n\nvar datamonkey_export_csv_button = function(data) {\n  data = d3.csv.format(data);\n  if (data !== null) {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));\n    pom.setAttribute('download', 'export.csv');\n    pom.className = 'btn btn-default btn-sm';\n    pom.innerHTML = '<span class=\"glyphicon glyphicon-floppy-save\"></span> Download CSV';\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n};\n\nvar datamonkey_save_image = function(type, container) {\n\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  };\n\n  function get_styles(doc) {\n\n    function process_stylesheet(ss) {\n      try {\n        if (ss.cssRules) {\n          for (var i = 0; i < ss.cssRules.length; i++) {\n            var rule = ss.cssRules[i];\n            if (rule.type === 3) {\n              // Import Rule\n              process_stylesheet(rule.styleSheet);\n            } else {\n              // hack for illustrator crashing on descendent selectors\n              if (rule.selectorText) {\n                if (rule.selectorText.indexOf(\">\") === -1) {\n                  styles += \"\\n\" + rule.cssText;\n                }\n              }\n            }\n          }\n        }\n      } catch (e) {\n        console.log('Could not process stylesheet : ' + ss);\n      }\n    }\n\n    var styles = \"\",\n      styleSheets = doc.styleSheets;\n\n    if (styleSheets) {\n      for (var i = 0; i < styleSheets.length; i++) {\n        process_stylesheet(styleSheets[i]);\n      }\n    }\n\n    return styles;\n\n  }\n\n  var convert_svg_to_png = function(image_string) {\n\n    var image = document.getElementById(\"hyphy-chart-image\");\n\n    image.onload = function() {\n\n      var canvas = document.getElementById(\"hyphy-chart-canvas\");\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var context = canvas.getContext(\"2d\");\n      context.fillStyle = \"#FFFFFF\";\n      context.fillRect(0, 0, image.width, image.height);\n      context.drawImage(image, 0, 0);\n      var img = canvas.toDataURL(\"image/png\");\n      var pom = document.createElement('a');\n      pom.setAttribute('download', 'image.png');\n      pom.href = canvas.toDataURL(\"image/png\");\n      $(\"body\").append(pom);\n      pom.click();\n      pom.remove();\n\n    };\n\n    image.src = image_string;\n\n  };\n\n  var svg = $(container).find(\"svg\")[0];\n  if (!svg) {\n    svg = $(container)[0];\n  }\n\n  var styles = get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = (new XMLSerializer()).serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n  var rect = svg.getBoundingClientRect();\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source];\n  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\n  if (navigator.msSaveBlob) { // IE10\n    download(image_string, \"image.svg\", \"image/svg+xml\");\n  } else if (type == \"png\") {\n    b64toBlob(image_string,\n      function(blob) {\n        var url = window.URL.createObjectURL(blob);\n        var pom = document.createElement('a');\n        pom.setAttribute('download', 'image.png');\n        pom.setAttribute('href', url);\n        $(\"body\").append(pom);\n        pom.click();\n        pom.remove();\n      },\n      function(error) {\n        console.log(error);\n      });\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'image.svg');\n    pom.setAttribute('href', image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n\n};\n\nvar datamonkey_validate_date = function() {\n\n  // Check that it is not empty\n  if ($(this).val().length === 0) {\n    $(this).next('.help-block').remove();\n    $(this).parent().removeClass('has-success');\n    $(this).parent().addClass('has-error');\n\n    jQuery('<span/>', {\n      class: 'help-block',\n      text: 'Field is empty'\n    }).insertAfter($(this));\n\n  } else if (isNaN(Date.parse($(this).val()))) {\n    $(this).next('.help-block').remove();\n    $(this).parent().removeClass('has-success');\n    $(this).parent().addClass('has-error');\n\n    jQuery('<span/>', {\n      class: 'help-block',\n      text: 'Date format should be in the format YYYY-mm-dd'\n    }).insertAfter($(this));\n\n  } else {\n    $(this).parent().removeClass('has-error');\n    $(this).parent().addClass('has-success');\n    $(this).next('.help-block').remove();\n  }\n\n};\n\nfunction datamonkey_get_styles(doc) {\n  var styles = \"\",\n    styleSheets = doc.styleSheets;\n\n  if (styleSheets) {\n    for (var i = 0; i < styleSheets.length; i++) {\n      processStyleSheet(styleSheets[i]);\n    }\n  }\n\n  function processStyleSheet(ss) {\n    if (ss.cssRules) {\n      for (var i = 0; i < ss.cssRules.length; i++) {\n        var rule = ss.cssRules[i];\n        if (rule.type === 3) {\n          // Import Rule\n          processStyleSheet(rule.styleSheet);\n        } else {\n          // hack for illustrator crashing on descendent selectors\n          if (rule.selectorText) {\n            if (rule.selectorText.indexOf(\">\") === -1) {\n              styles += \"\\n\" + rule.cssText;\n            }\n          }\n        }\n      }\n    }\n  }\n  return styles;\n}\n\nfunction datamonkey_save_newick_to_file() {\n  var top_modal_container = \"#neighbor-tree-modal\";\n  var nwk = $(top_modal_container).data(\"tree\");\n  var pom = document.createElement('a');\n  pom.setAttribute('href', 'data:text/octet-stream;charset=utf-8,' + encodeURIComponent(nwk));\n  pom.setAttribute('download', 'nwk.txt');\n  $(\"body\").append(pom);\n  pom.click();\n  pom.remove();\n}\n\nfunction datamonkey_convert_svg_to_png(image_string) {\n  var image = document.getElementById(\"image\");\n  image.src = image_string;\n\n  image.onload = function() {\n    var canvas = document.getElementById(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#FFFFFF\";\n    context.fillRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n    var img = canvas.toDataURL(\"image/png\");\n\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'phylotree.png');\n    pom.href = canvas.toDataURL(\"image/png\");\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n}\n\nfunction datamonkey_save_newick_tree(type) {\n\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  }\n\n  var tree_container = \"#tree_container\";\n  var svg = $(\"#tree_container\").find(\"svg\")[0];\n  var styles = datamonkey_get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = (new XMLSerializer()).serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n  var rect = svg.getBoundingClientRect();\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source]\n  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\n  if (type == \"png\") {\n    datamonkey_convert_svg_to_png(image_string)\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'phylotree.svg');\n    pom.setAttribute('href', image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n\n}\n\nfunction datamonkey_validate_email(email) {\n  if ($(this).find(\"input[name='receive_mail']\")[0].checked) {\n    var regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n    if (regex.test($(this).find(\"input[name='mail']\").val())) {\n      // Give them green. They like that.\n      $(this).removeClass('has-error');\n      $(this).addClass('has-success');\n      $(this).next('.help-block').remove();\n    } else {\n      $(this).next('.help-block').remove();\n      $(this).removeClass('has-error');\n      $(this).removeClass('has-success');\n      $(this).addClass('has-error');\n      var span = jQuery('<span/>', {\n        class: 'help-block col-lg-9 pull-right',\n        text: 'Invalid Email'\n      }).insertAfter($(this));\n    }\n  } else {\n    $(this).removeClass('has-error');\n    $(this).removeClass('has-success');\n    $(this).next('.help-block').remove();\n  }\n\n}\n\nfunction datamonkey_describe_vector(vector, as_list) {\n\n  var d = {};\n\n  if (vector.length) {\n\n      vector.sort(d3.ascending);\n\n      var d = {\n        'min': d3.min(vector),\n        'max': d3.max(vector),\n        'median': d3.median(vector),\n        'Q1': d3.quantile(vector, 0.25),\n        'Q3': d3.quantile(vector, 0.75),\n        'mean': d3.mean(vector)\n      };\n   } else {\n      var d = {\n        'min': null,\n        'max': null,\n        'median': null,\n        'Q1': null,\n        'Q3': null,\n        'mean': null\n      };\n\n   }\n\n  if (as_list) {\n\n    d = \"<pre>Range  :\" + d['min'] + \"-\" + d['max'] + \"\\n\" + \"IQR    :\" + d['Q1'] + \"-\" + d['Q3'] + \"\\n\" + \"Mean   :\" + d['mean'] + \"\\n\" + \"Median :\" + d['median'] + \"\\n\" + \"</pre>\";\n\n    /*d =\n    \"<dl class = 'dl-horizontal'>\" +\n    \"<dt>Range</dt><dd>\" + d['min'] + \"-\" + d['max'] + \"</dd>\" +\n    \"<dt>IQR</dt><dd>\" + d['Q1'] + \"-\" + d['Q3'] +  \"</dd>\" +\n    \"<dt>Mean</dt><dd>\" + d['mean'] +  \"</dd>\" +\n    \"<dt>Median</dt><dd>\" + d['median'] + \"</dd></dl>\";*/\n  }\n\n  return d;\n\n}\n\nfunction datamonkey_export_handler(data, filename, mimeType) {\n\n  function msieversion() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n      return true;\n    }\n    return false;\n  }\n\n  if (msieversion()) {\n    var IEwindow = window.open();\n    IEwindow.document.write(data);\n    IEwindow.document.close();\n    IEwindow.document.execCommand('SaveAs', true, filename + \".csv\");\n    IEwindow.close();\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:' + (mimeType || 'text/plain') + ';charset=utf-8,' + encodeURIComponent(data));\n    pom.setAttribute('download', filename || \"download.tsv\");\n    pom.click();\n    pom.remove();\n  }\n\n}\n\nfunction datamonkey_table_to_text(table_id, sep) {\n  sep = sep || \"\\t\";\n  var header_row = [];\n  d3.select(table_id + \" thead\").selectAll(\"th\").each(function() {\n    header_row.push(d3.select(this).text())\n  });\n  var data_rows = [];\n  d3.select(table_id + \" tbody\").selectAll(\"tr\").each(function(d, i) {\n    data_rows.push([]);\n    d3.select(this).selectAll(\"td\").each(function() {\n      data_rows[i].push(d3.select(this).text())\n    })\n  });\n\n  return header_row.join(sep) + \"\\n\" +\n    data_rows.map(function(d) {\n      return d.join(sep);\n    }).join(\"\\n\");\n}\n\nfunction datamonkey_capitalize(s) {\n  if (s.length > 0) {\n    return s[0].toUpperCase() + s.slice(1);\n  } else {\n    return s;\n  }\n}\n\nfunction datamonkey_count_partitions(json) {\n  try {\n    return _.keys(json).length;\n  } catch (e) {\n    // ignore errors\n  }\n  return 0;\n}\n\nfunction datamonkey_sum(object, accessor) {\n  accessor = accessor || function(value) {\n    return value;\n  };\n  return _.reduce(object, function(sum, value, index) {\n    return sum + accessor(value, index);\n  }, 0);\n}\n\nfunction datamonkey_count_sites_from_partitions(json) {\n  try {\n    return datamonkey_sum(json[\"partitions\"], function(value) {\n      return value[\"coverage\"][0].length;\n    });\n  } catch (e) {\n    // ignore errors\n  }\n  return 0;\n}\n\nfunction datamonkey_filter_list(list, predicate, context) {\n  var result = {};\n  predicate = _.bind(predicate, context);\n  _.each(list, _.bind(function(value, key) {\n    if (predicate(value, key)) {\n      result[key] = value;\n    }\n  }, context));\n  return result;\n}\n\nfunction datamonkey_map_list(list, transform, context) {\n  var result = {};\n  transform = _.bind(transform, context);\n  _.each(list, _.bind(function(value, key) {\n    result[key] = transform(value, key);\n  }, context));\n  return result;\n}\n\nmodule.exports.errorModal = datamonkey_error_modal;\nmodule.exports.export_csv_button = datamonkey_export_csv_button;\nmodule.exports.save_image = datamonkey_save_image;\nmodule.exports.validate_date = datamonkey_validate_date;\n\nmodule.exports.save_newick_to_file = datamonkey_save_newick_to_file;\nmodule.exports.convert_svg_to_png = datamonkey_convert_svg_to_png;\nmodule.exports.save_newick_tree = datamonkey_save_newick_tree;\nmodule.exports.validate_email = datamonkey_validate_email;\nmodule.exports.describe_vector = datamonkey_describe_vector;\nmodule.exports.table_to_text = datamonkey_table_to_text;\nmodule.exports.export_handler = datamonkey_export_handler;\nmodule.exports.capitalize = datamonkey_capitalize;\nmodule.exports.countPartitionsJSON = datamonkey_count_partitions;\nmodule.exports.countSitesFromPartitionsJSON = datamonkey_count_sites_from_partitions;\nmodule.exports.sum = datamonkey_sum;\nmodule.exports.filter = datamonkey_filter_list;\nmodule.exports.map = datamonkey_map_list;\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/downloadjs/download.js\n// module id = 45\n// module chunks = 0","var d3 = require('d3'),\n  _ = require('underscore');\n\nfunction hivtrace_render_scatterplot(points, w, h, id, labels, dates) {\n    var _defaultDateViewFormat = d3.time.format(\"%B %d, %Y\");\n    var _defaultFloatFormat = d3.format(\",.2r\");\n    var _defaultDateViewFormatShort = d3.time.format(\"%B %Y\");\n\n  var margin = {\n      top: 10,\n      right: 10,\n      bottom: 100,\n      left: 100\n    },\n    width = w - margin.left - margin.right,\n    height = h - margin.top - margin.bottom;\n\n\n  var x = (dates ? d3.time.scale() : d3.scale.linear())\n    .domain(d3.extent(points, function(p) {\n      return p.x;\n    }))\n    .range([0, width]);\n\n  var y = (dates ? d3.time.scale() : d3.scale.linear())\n    .domain(d3.extent(points, function(p) {\n      return p.y;\n    }))\n    .range([height, 0]);\n\n  var xAxis = d3.svg.axis()\n    .scale(x)\n    .orient(\"bottom\").tickFormat(dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n  var yAxis = d3.svg.axis()\n    .scale(y)\n    .orient(\"left\").tickFormat(dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (!histogram_svg.empty()) {\n    histogram_svg.remove();\n  }\n\n  histogram_svg = d3.select(id).append(\"svg\").attr(\"width\", w).attr(\"height\", h).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  points = histogram_svg.selectAll(\"circle\").data(points);\n  points.enter().append(\"circle\");\n\n  points.attr(\"cx\", function(d) {\n    return x(d.x);\n  }).attr(\"cy\", function(d) {\n    return y(d.y);\n  }).attr(\"r\", 3).classed(\"node scatter\", true);\n\n  points.each(function(d) {\n    if (\"title\" in d) {\n      d3.select(this).append(\"title\").text(d.title);\n    }\n  });\n\n  var x_axis = histogram_svg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n\n\n  x_axis.selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").attr(\"dx\", \"-.5em\").attr(\"dy\", \".25em\").style(\"text-anchor\", \"end\");\n  x_axis.append(\"text\").text(labels.x).attr(\"transform\", \"translate(\" + width + \",0)\").attr(\"dy\", \"-1em\").attr(\"text-anchor\", \"end\");\n\n  var y_axis = histogram_svg.append(\"g\")\n    .attr(\"class\", \"y axis\")\n    .attr(\"transform\", \"translate(0,\" + 0 + \")\")\n    .call(yAxis);\n\n  y_axis.selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").attr(\"dx\", \"-.5em\").attr(\"dy\", \".25em\").style(\"text-anchor\", \"end\");\n  y_axis.append(\"text\").text(labels.y).attr(\"transform\", \"rotate(-90)\").attr(\"dy\", \"1em\").attr(\"text-anchor\", \"end\");\n\n}\n\nmodule.exports.scatterPlot = hivtrace_render_scatterplot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/scatterplot.js","var d3 = require('d3'),\n  _ = require('underscore');\n\nfunction hivtrace_render_prevalence (data, w, h, id, x_title, y_title, y_scale, fractions, baseline) {\n\n    var base_line = baseline || 14;\n\n    var container = d3.select (id);\n    \n    var margin = {\n            top: base_line*2,\n            right: base_line*1.5,\n            bottom: 3 * base_line,\n            left: 5 * base_line\n        },\n        \n        width =  w - margin.left - margin.right,\n        height = h - margin.top - margin.bottom, \n        font_size = baseline  * 1.25,\n        rect_size = font_size * 1.25;\n    \n    \n    \n        var x = d3.time.scale()\n            .range([0, width]);\n\n        var y = y_scale ? y_scale : d3.scale.linear();\n    \n    \n        y.range([height, 0]);\n                        \n   \n\n        var xAxis = d3.svg.axis()\n            .scale(x)\n            .orient(\"bottom\");//.ticks (5, y.tickFormat(5, \".0f\"));\n\n        var yAxis = d3.svg.axis()\n            .scale(y)\n            .orient(\"left\").ticks (8, fractions ? \"p\" : \"f\");\n    \n    \n        x.domain(d3.extent(plot_data, function(d) {\n            return d['x'];\n        })).clamp (true);\n\n\n        var extents = d3.extent(plot_data, function(d) {\n            return _.max (d['y']);\n        });  \n    \n        var year_range = [plot_data[0]['x'].getFullYear (), plot_data[plot_data.length-1]['x'].getFullYear ()];\n    \n   \n        _.each (annual, function (v, year) {\n            if (year >= year_range[0] && year <= year_range[1]) {\n                var my_f = _.max (v, function (f) {return f[1] / (fractions ? 1 : f[0])});\n                extents[1] = Math.max (extents[1], my_f[1]);\n            \n            }\n        });     \n    \n\n \n        y.domain ([0.0, extents[1] * 1.2]);\n    \n\n        var svg = container.append(\"svg\")//.style(\"display\", \"table-cell\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom);\n        \n        \n        var legend_area = svg.append(\"g\").attr(\"transform\", \"translate(\" + (margin.left + font_size * 2.5) + \",\" + (margin.top + font_size) + \")\")\n\n        svg = svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n        /* set the domain for the codons */\n    \n        var color_scale = d3.scale.category10();\n    \n        var plot_types = _.map(plot_data[0]['y'], function(v,k) {\n            return k;\n        });\n    \n        plot_types.sort();\n    \n        var legend_lines = legend_area.selectAll(\"g\").data(plot_types);\n    \n        legend_lines.enter().append(\"g\").attr(\"class\", \"annotation-text\");\n\n        legend_lines.selectAll(\"text\").data(function(d) {\n                return [d];\n            }).enter().append(\"text\")\n            .attr(\"transform\", function(d, i, j) {\n                return \"translate(\" + rect_size + \",\" + (rect_size * (plot_types.length - 1 - j) - (rect_size - font_size)) + \")\";\n            })\n            .attr(\"dx\", \"0.2em\")\n            .text(function(d) {\n                return d;\n            });\n\n        //console.log (plot_data);\n\n        legend_lines.selectAll(\"rect\").data(function(d) {\n                return [d];\n            }).enter().append(\"rect\")\n            .attr(\"x\", 0)\n            .attr(\"y\", function(d, i, j) {\n                return rect_size * (plot_types.length - 2 - j);\n            })\n            .attr(\"width\", rect_size)\n            .attr(\"height\", rect_size)\n            .attr(\"class\", \"area\")\n            .style(\"fill\", function(d, i, j) {\n                return color_scale (d);\n        });\n\n        _.each (plot_types, function (plot_key, idx) {\n    \n            var plot_color = color_scale (plot_key);\n                \n            var y_accessor = function (d) {return d['y'][plot_key]};\n            var year_points = [];\n    \n            for (k = year_range[0]; k <= year_range[1]; k++) {\n                if (k in annual) {\n                    fraction = annual[k][plot_key];\n                    fraction = fraction[1];\n                    year_points.push ({'x' : new Date (k, 7, 1), 'y' : fraction});\n                }\n            }\n    \n\n\n            var scaler_per_year = 1000 * 60 * 60 * 24 * 365;\n    \n            var lf = linear_fit (year_points.map (function (d) {return [(d['x'] - x.domain ()[0])/scaler_per_year, d['y']];}));\n             \n            /*var line = d3.svg.line()\n                .x(function(d) { return x(d['x']); })\n                .y(function(d) { return y(\n                Math.max (0,(d['x'] - x.domain ()[0] )*lf[\"slope\"]/scaler_per_year+lf[\"intercept\"]))\n                ; })\n                .interpolate (\"linear\");*/\n        \n            var line = d3.svg.line()\n                .x(function(d) { return x(d['x']); })\n                .y(function(d) { return y(d['y']); })\n                .interpolate (\"basis\");\n\n             svg.append(\"path\")\n              .datum(year_points)\n              .classed (\"line\", true)\n              .style (\"stroke\", plot_color)\n              .attr(\"d\", line);   \n      \n            /*var curve_year = d3.svg.line()\n                .x(function(d) { return x(d['x']); })\n                .y(function(d) { return y(d['y']); })\n                .interpolate (\"basis\");\n        \n               svg.append(\"path\")\n                  .datum(year_points)\n                  .classed (\"tracer\", true)\n                  .style (\"stroke\", plot_color)\n                  .attr(\"d\", curve_year); */\n\n    \n            year_points.forEach (function (d) {\n                svg.append (\"circle\").attr (\"cx\", x(d['x'])).attr (\"cy\", y(d['y'])).attr (\"r\", \"5\")\n                .classed (\"node\", true)\n                .style (\"fill\", plot_color)\n                .style (\"stroke\", plot_color)\n            });            \n\n            year_points.forEach (function (d) {\n                svg.append (\"text\").attr (\"x\", x(d['x']) + 5).attr (\"y\", y(d['y']) + 5)\n                .text (d['y'])//.attr (\"transform\", \"rotate (\" + 30*(1 - 2*idx) + \" \" + x(d['x']) + \" \" + y(d['y']) + \")\")\n                .attr (\"dy\", \"\"+(0.5 - idx)+\"em\")\n            });            \n\n            var curve = d3.svg.area()\n                .x(function(d) { return x(d['x']); })\n                .y1(function(d) { return y(y_accessor(d)); })\n                .y0(function(d) { return y(0); })\n                .interpolate (\"line\");\n        \n               svg.append(\"path\")\n                  .datum(plot_data)\n                  .classed (\"trend\", true)\n                  .style (\"fill\", plot_color)\n                  .style (\"stroke\", plot_color)\n                  .attr(\"d\", curve); \n        }\n        );\n\n   \n         /* x-axis */\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(xAxis)\n            .append(\"text\")\n            .attr(\"x\", width)\n            .attr(\"dy\", \"+2.5em\")\n            .style(\"text-anchor\", \"end\")\n            .text(x_title);\n        \n    \n\n       /* y-axis*/\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(yAxis)\n            .append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 6)\n            .attr(\"dy\", \".71em\")\n            .style(\"text-anchor\", \"end\")\n            .text(y_title); // beta - alpha\n\n        /* plot title */\n        /*if (title) {\n            svg.append(\"text\").text(title).style(\"font-size\", \"24px\").attr(\"dx\", \"2em\").attr(\"dy\", \"-0.1em\");\n        }*/\n}\n\nexports.prevalence = hivtrace_render_prevalence;\n\n\n\n// WEBPACK FOOTER //\n// ./src/prevalence.js","var d3 = require('d3'),\n  _ = require('underscore');\n\nfunction hivtrace_histogram(graph, histogram_tag, histogram_label) {\n\n  var defaultFloatFormat = d3.format(\",.2f\");\n  var histogram_w = 300,\n    histogram_h = 300;\n\n  hivtrace_render_histogram(graph[\"Degrees\"][\"Distribution\"],\n    graph[\"Degrees\"][\"fitted\"],\n    histogram_w,\n    histogram_h,\n    histogram_tag);\n\n  var label = \"Network degree distribution is best described by the <strong>\" + graph[\"Degrees\"][\"Model\"] + \"</strong> model, with &rho; of \" +\n    defaultFloatFormat(graph[\"Degrees\"][\"rho\"]);\n\n  if (graph[\"Degrees\"][\"rho CI\"] != undefined) {\n    label += \" (95% CI \" + defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][0]) + \" - \" + defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][1]) + \")\";\n  }\n\n  d3.select(histogram_label).html(label);\n}\n\nfunction hivtrace_histogram_distances(graph, histogram_tag, histogram_label) {\n\n  var defaultFloatFormat = d3.format(\",.3p\");\n  var histogram_w = 300,\n    histogram_h = 300;\n\n  var edge_lengths = _.map(graph[\"Edges\"], function(edge) {\n    return edge.length;\n  });\n\n\n  hivtrace_render_histogram_continuous(edge_lengths,\n    histogram_w,\n    histogram_h,\n    histogram_tag);\n\n  var label = \"Genetic distances among linked nodes.\";\n  d3.select(histogram_label).html(label);\n}\n\nfunction hivtrace_render_histogram_continuous(data, w, h, id) {\n\n  var margin = {\n      top: 10,\n      right: 30,\n      bottom: 50,\n      left: 10\n    },\n    width = w - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (histogram_svg) {\n    histogram_svg.remove();\n  }\n\n  if (data.length > 0) {\n\n      var histogram_data = d3.layout.histogram()(data);\n    \n      var x = d3.scale.linear()\n        .domain(d3.extent(data));\n\n      var y = d3.scale.linear()\n        .domain([0, d3.max(_.map(histogram_data, function(b) {\n          return b.y\n        }))]).range([height, 0]);\n      \n      margin.left += 10*Math.ceil(Math.log10 (y.domain()[1]));\n      width -= margin.left;\n      x.range([0, width]);\n\n      var xAxis = d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\");\n\n      var yAxis = d3.svg.axis()\n        .scale(y)\n        .orient(\"left\");\n\n\n\n      histogram_data.splice(0, 0, {\n        'x': x.domain()[0],\n        'y': 0,\n        'dx': 0\n      });\n      histogram_data.splice(histogram_data.length, 0, {\n        'x': x.domain()[1],\n        'y': 0,\n        'dx': 0\n      });\n\n      histogram_svg = d3.select(id).insert(\"svg\", \".histogram-label\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        .datum(histogram_data);\n\n      var histogram_line = d3.svg.line()\n        .x(function(d) {\n          return x(d.x + d.dx);\n        })\n        .y(function(d) {\n          return y(d.y);\n        })\n        .interpolate(\"step-before\");\n\n      histogram_svg.selectAll(\"path\").remove();\n      histogram_svg.append(\"path\")\n        .attr(\"d\", function(d) {\n          return histogram_line(d) + \"Z\";\n        })\n        .attr(\"class\", \"histogram\");\n\n\n\n      var x_axis = histogram_svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis);\n\n      x_axis.selectAll(\"text\").attr(\"transform\", \"rotate(45)\").attr(\"dx\", \"1em\").attr(\"dy\", \"0.5em\");\n\n      var y_axis = histogram_svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        //.attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(yAxis);\n    }\n\n}\n\nfunction hivtrace_render_histogram(counts, fit, w, h, id) {\n\n  var margin = {\n      top: 10,\n      right: 30,\n      bottom: 50,\n      left: 30\n    },\n    width = w - margin.left - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var x = d3.scale.linear()\n    .domain([0, counts.length + 1])\n    .range([0, width]);\n\n  var y = d3.scale.log()\n    .domain([1, d3.max(counts)])\n    .range([height, 0]);\n\n  var total = d3.sum(counts);\n\n  var xAxis = d3.svg.axis()\n    .scale(x)\n    .orient(\"bottom\");\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (histogram_svg) {\n    histogram_svg.remove();\n  }\n\n  var data_to_plot = counts.map(function(d, i) {\n    return {\n      'x': i + 1,\n      'y': d + 1\n    };\n  });\n  data_to_plot.push({\n    'x': counts.length + 1,\n    'y': 1\n  });\n  data_to_plot.push({\n    'x': 0,\n    'y': 1\n  });\n  data_to_plot.push({\n    'x': 0,\n    'y': counts[0] + 1\n  });\n\n  histogram_svg = d3.select(id).insert(\"svg\", \".histogram-label\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    .datum(data_to_plot);\n\n  var histogram_line = d3.svg.line()\n    .x(function(d) {\n      return x(d.x);\n    })\n    .y(function(d) {\n      return y(d.y);\n    })\n    .interpolate(\"step-before\");\n\n  histogram_svg.selectAll(\"path\").remove();\n  histogram_svg.append(\"path\")\n    .attr(\"d\", function(d) {\n      return histogram_line(d) + \"Z\";\n    })\n    .attr(\"class\", \"histogram\");\n\n\n\n  if (fit) {\n    var fit_line = d3.svg.line()\n      .interpolate(\"linear\")\n      .x(function(d, i) {\n        return x(i + 1) + (x(i + 1) - x(i)) / 2;\n      })\n      .y(function(d) {\n        return y(1 + d * total);\n      });\n    histogram_svg.append(\"path\").datum(fit)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", function(d) {\n        return fit_line(d);\n      });\n  }\n\n  var x_axis = histogram_svg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n\n  x_axis.selectAll(\"text\").attr(\"transform\", \"rotate(45)\").attr(\"dx\", \"1em\").attr(\"dy\", \"0.5em\");\n}\n\nexports.histogram = hivtrace_histogram;\nexports.histogramDistances = hivtrace_histogram_distances;\n\n\n\n// WEBPACK FOOTER //\n// ./src/histogram.js"],"sourceRoot":""}